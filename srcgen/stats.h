// Autogenerated file (from src/hardware_indep/stats.h.py: via hardware_indep/stats.h.py), do not modify directly.
// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

// SPDX-License-Identifier: Apache-2.0
// Copyright 2021 Eotvos Lorand University, Budapest, Hungary

#pragma once

#define T4STAT(part1, part2, part3)   t4stat_ ## part1 ## _ ## part2 ## _ ## part3
#define T4REQ(part1, part2, part3)   t4req_ ## part1 ## _ ## part2 ## _ ## part3

typedef enum {
    t4stat1_action,
    t4stat1_parser,
    t4stat1_table,
} t4p4s_stat1_e;

typedef enum {
    t4stat2_apply,
    t4stat2_ipv4_lpm_0,
    t4stat2_nexthops_0,
    t4stat2_state,
} t4p4s_stat2_e;

typedef enum {
    t4stat3_NoAction_1,
    t4stat3_NoAction_2,
    t4stat3__drop,
    t4stat3__drop_1,
    t4stat3_accept,
    t4stat3_forward,
    t4stat3_ipv4_lpm_0,
    t4stat3_nexthops_0,
    t4stat3_parse_arp,
    t4stat3_parse_ethernet,
    t4stat3_parse_ipv4,
    t4stat3_reject,
    t4stat3_set_nhop,
    t4stat3_start,
} t4p4s_stat3_e;

typedef struct {
    bool T4STAT(parser,state,parse_ipv4);
    bool T4STAT(parser,state,parse_arp);
    bool T4STAT(parser,state,parse_ethernet);
    bool T4STAT(parser,state,start);
    bool T4STAT(parser,state,accept);
    bool T4STAT(parser,state,reject);
    
    
    bool T4STAT(table,apply,ipv4_lpm_0);
    bool T4STAT(table,hit,ipv4_lpm_0);
    bool T4STAT(table,miss,ipv4_lpm_0);
    bool T4STAT(action,ipv4_lpm_0,set_nhop);
    bool T4STAT(action,ipv4_lpm_0,_drop);
    bool T4STAT(action,ipv4_lpm_0,NoAction_1);
    bool T4STAT(table,apply,nexthops_0);
    bool T4STAT(table,hit,nexthops_0);
    bool T4STAT(table,miss,nexthops_0);
    bool T4STAT(action,nexthops_0,forward);
    bool T4STAT(action,nexthops_0,_drop_1);
    bool T4STAT(action,nexthops_0,NoAction_2);
} t4p4s_stats_t;

typedef enum {
    req_none,
    T4REQ(parser,state,parse_ipv4),
    T4REQ(parser,state,parse_arp),
    T4REQ(parser,state,parse_ethernet),
    T4REQ(parser,state,start),
    T4REQ(parser,state,accept),
    T4REQ(parser,state,reject),
    
    
    T4REQ(table,apply,ipv4_lpm_0),
    T4REQ(table,hit,ipv4_lpm_0),
    T4REQ(table,miss,ipv4_lpm_0),
    T4REQ(action,ipv4_lpm_0,set_nhop),
    T4REQ(action,ipv4_lpm_0,_drop),
    T4REQ(action,ipv4_lpm_0,NoAction_1),
    T4REQ(table,apply,nexthops_0),
    T4REQ(table,hit,nexthops_0),
    T4REQ(table,miss,nexthops_0),
    T4REQ(action,nexthops_0,forward),
    T4REQ(action,nexthops_0,_drop_1),
    T4REQ(action,nexthops_0,NoAction_2),
} t4p4s_controlflow_name_e;

