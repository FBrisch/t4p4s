// Autogenerated file (from src/hardware_indep/common_enums.h.py: via hardware_indep/common_enums.h.py), do not modify directly.
// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

// SPDX-License-Identifier: Apache-2.0
// Copyright 2019 Eotvos Lorand University, Budapest, Hungary

#pragma once

#include <stdbool.h>
#include <stdint.h>

#define T4P4S_TYPE_error_error
#define T4P4S_TYPE_enum_CounterType
#define T4P4S_TYPE_enum_MeterType
#define T4P4S_TYPE_enum_HashAlgorithm
#define T4P4S_TYPE_enum_CloneType
#define T4P4S_TYPE_routing_metadata_t
#define T4P4S_TYPE_headers
#define T4P4S_TYPE_tuple_0
typedef enum {
    error_error_NoError,
    error_error_PacketTooShort,
    error_error_NoMatch,
    error_error_StackOutOfBounds,
    error_error_HeaderTooShort,
    error_error_ParserTimeout,
    error_error_ParserInvalidArgument,
} error_error_t;

extern const char* error_value_names_error[7];

typedef enum {
    enum_CounterType_packets,
    enum_CounterType_bytes,
    enum_CounterType_packets_and_bytes,
} enum_CounterType_t;

extern const char* enum_value_names_CounterType[3];

typedef enum {
    enum_MeterType_packets,
    enum_MeterType_bytes,
} enum_MeterType_t;

extern const char* enum_value_names_MeterType[2];

typedef enum {
    enum_HashAlgorithm_crc32,
    enum_HashAlgorithm_crc32_custom,
    enum_HashAlgorithm_crc16,
    enum_HashAlgorithm_crc16_custom,
    enum_HashAlgorithm_random,
    enum_HashAlgorithm_identity,
    enum_HashAlgorithm_csum16,
    enum_HashAlgorithm_xor16,
} enum_HashAlgorithm_t;

extern const char* enum_value_names_HashAlgorithm[8];

typedef enum {
    enum_CloneType_I2E,
    enum_CloneType_E2E,
} enum_CloneType_t;

extern const char* enum_value_names_CloneType[2];

