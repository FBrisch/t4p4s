// Autogenerated file (from src/hardware_indep/stateful_memory_type.h.py: via hardware_indep/stateful_memory_type.h.py), do not modify directly.
// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

#pragma once

#include <stdbool.h>
#include <stdint.h>

#include "aliases.h"

typedef enum {
    pob_packets,
    pob_bytes,
    pob_packets_and_bytes,
} packets_or_bytes_e;

typedef struct {
    rte_atomic32_t packets;
    rte_atomic32_t bytes;
    packets_or_bytes_e pob;
    #ifdef T4P4S_DEBUG
    char name[256];
    #endif
} SMEMTYPE(counter);

typedef struct {
    rte_atomic32_t packets;
    rte_atomic32_t bytes;
    packets_or_bytes_e pob;
    #ifdef T4P4S_DEBUG
    char name[256];
    #endif
} SMEMTYPE(direct_counter);

typedef struct {
    rte_atomic32_t packets;
    rte_atomic32_t bytes;
    packets_or_bytes_e pob;
    #ifdef T4P4S_DEBUG
    char name[256];
    #endif
} SMEMTYPE(meter);

typedef struct {
    rte_atomic32_t packets;
    rte_atomic32_t bytes;
    packets_or_bytes_e pob;
    #ifdef T4P4S_DEBUG
    char name[256];
    #endif
} SMEMTYPE(direct_meter);

typedef struct {
    rte_atomic32_t packets;
    rte_atomic32_t bytes;
    packets_or_bytes_e pob;
    #ifdef T4P4S_DEBUG
    char name[256];
    #endif
} SMEMTYPE(register);

typedef struct {
    rte_atomic32_t value;
    #ifdef T4P4S_DEBUG
    char name[256];
    #endif
} EXTERNTYPE0(action_profile);

typedef struct {
    rte_atomic32_t value;
    #ifdef T4P4S_DEBUG
    char name[256];
    #endif
} EXTERNTYPE0(action_selector);

typedef struct {
    rte_atomic32_t value;
} EXTERNTYPE1(Checksum,u32);

