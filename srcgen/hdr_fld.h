// Autogenerated file (from src/hardware_indep/hdr_fld.h.py: via hardware_indep/hdr_fld.h.py), do not modify directly.
// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

#pragma once

#include "common_enums.h"

#define HDRT(hdrt)  HDRT_ ## hdrt

typedef struct {
    uint8_t* dstAddr;
    uint8_t* srcAddr;
    uint16_t etherType;
} __attribute__((packed)) HDRT(ethernet_t);

typedef struct {
    uint8_t versionIhl;
    uint8_t diffserv;
    uint16_t totalLen;
    uint16_t identification;
    uint16_t fragOffset;
    uint8_t ttl;
    uint8_t protocol;
    uint16_t hdrChecksum;
    uint32_t srcAddr;
    uint32_t dstAddr;
} __attribute__((packed)) HDRT(ipv4_t);

typedef struct {
    uint16_t hardware_type;
    uint16_t protocol_type;
    uint8_t HLEN;
    uint8_t PLEN;
    uint16_t OPER;
    uint8_t* sender_ha;
    uint32_t sender_ip;
    uint8_t* target_ha;
    uint32_t target_ip;
} __attribute__((packed)) HDRT(arp_t);

typedef struct {
    uint32_t nhgroup;
} __attribute__((packed)) routing_metadata_t;

typedef struct {
    HDRT(ethernet_t) ethernet;
    HDRT(ipv4_t) ipv4;
} __attribute__((packed)) headers_t;

typedef struct {
    uint8_t f0;
    uint8_t f1;
    uint16_t f2;
    uint16_t f3;
    uint16_t f4;
    uint8_t f5;
    uint8_t f6;
    uint32_t f7;
    uint32_t f8;
} __attribute__((packed)) tuple_0_t;

