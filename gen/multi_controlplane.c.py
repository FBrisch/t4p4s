
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/multi_controlplane.c.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/multi_controlplane.c.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/multi_controlplane.c.py: via hardware_indep/multi_controlplane.c.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

# SPDX-License-Identifier: Apache-2.0 ## src/hardware_indep/multi_controlplane.c.py:2
# Copyright 2016 Eotvos Lorand University, Budapest, Hungary ## src/hardware_indep/multi_controlplane.c.py:3

generated_code += add_code("")
from compiler_common import unique_everseen, generate_var_name, get_hdr_name, get_hdrfld_name ## src/hardware_indep/multi_controlplane.c.py:5
from utils.codegen import format_expr, format_type, gen_format_slice ## src/hardware_indep/multi_controlplane.c.py:6

generated_code += add_code("")
import os ## src/hardware_indep/multi_controlplane.c.py:8

generated_code += add_code("")
generated_code += add_code(" #include <unistd.h>", lineno = 9)

generated_code += add_code("")
generated_code += add_code(" #include \"dpdk_lib.h\"", lineno = 11)
generated_code += add_code(" #include \"dpdk_primitives.h\" // TODO remove", lineno = 12)
generated_code += add_code(" #include \"actions.h\"", lineno = 13)
generated_code += add_code(" #include \"tables.h\"", lineno = 14)

generated_code += add_code("")
part_count = compiler_common.current_compilation['multi'] ## src/hardware_indep/multi_controlplane.c.py:17
all_tables = sorted(hlir.tables, key=lambda table: len(table.actions)) ## src/hardware_indep/multi_controlplane.c.py:18
for idx, table in enumerate(all_tables): ## src/hardware_indep/multi_controlplane.c.py:19
    multi_idx = idx % part_count ## src/hardware_indep/multi_controlplane.c.py:20
    generated_code += add_code(' #if T4P4S_MULTI_IDX == {}'.format(multi_idx), lineno = 20)
    generated_code += add_code(' void make_{}_set_default_table_entry(ENTRY({})* entry, const char* action_name, p4_action_parameter_t** action_params) {{'.format(table.name, table.name), indent_level = 1, lineno = 22)
    for action in table.actions: ## src/hardware_indep/multi_controlplane.c.py:24
        ao = action.action_object ## src/hardware_indep/multi_controlplane.c.py:25
        generated_code += add_code('     if (strcmp("{}", action_name) == 0) {{'.format(ao.canonical_name), indent_level = 2, lineno = 26)
        generated_code += add_code('         entry->id = action_{};'.format(ao.name), indent_level = 3, lineno = 27)
        for idx, par in enumerate(ao.parameters.parameters): ## src/hardware_indep/multi_controlplane.c.py:30
            generated_code += add_code('         uint8_t* param_{} = (uint8_t*)action_params[{}]->bitmap;'.format(par.name, idx), indent_level = 3, lineno = 30)
        for par in ao.parameters.parameters: ## src/hardware_indep/multi_controlplane.c.py:33
            generated_code += add_code('         memcpy(&entry->params.{}_params.{}, param_{}, {});'.format(ao.name, par.name, par.name, (par.urtype.size+7) // 8), indent_level = 3, lineno = 33)
        if not table.is_hidden: ## src/hardware_indep/multi_controlplane.c.py:36
            generated_code += add_code('         debug(" " T4LIT(ctl>,incoming) " Set " T4LIT(default action,action) " for " T4LIT({},table) ": " T4LIT({},action) "\\n");'.format(table.short_name, ao.short_name), indent_level = 3, lineno = 36)
        generated_code += add_code("         return;", indent_level = 3, lineno = 38)
        generated_code += add_code("     }", indent_level = 2, lineno = 40)
    valid_actions = ", ".join([f'" T4LIT({a.action_object.canonical_name},action) "' for a in table.actions]) ## src/hardware_indep/multi_controlplane.c.py:43
    generated_code += add_code("", indent_level = 2, lineno = 43)
    generated_code += add_code('     debug("   " T4LIT(!!,warning) " Table setdefault on table " T4LIT({},table) ": action name " T4LIT(mismatch,warning) " " T4LIT(%s,action) ", expected one of ({})\\n", action_name);'.format(table.short_name, valid_actions), indent_level = 2, lineno = 44)
    generated_code += add_code("     entry->id = INVALID_ACTION;", indent_level = 2, lineno = 45)
    generated_code += add_code(" }", indent_level = 1, lineno = 46)
    generated_code += add_code(' #endif // T4P4S_MULTI_IDX == {}'.format(multi_idx), lineno = 47)
    generated_code += add_code("", lineno = 48)
