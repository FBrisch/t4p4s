
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/controlplane.c.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/controlplane.c.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/controlplane.c.py: via hardware_indep/controlplane.c.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

# SPDX-License-Identifier: Apache-2.0 ## src/hardware_indep/controlplane.c.py:2
# Copyright 2016 Eotvos Lorand University, Budapest, Hungary ## src/hardware_indep/controlplane.c.py:3

generated_code += add_code("")
from hlir16.hlir_utils import align8_16_32 ## src/hardware_indep/controlplane.c.py:5
from compiler_common import unique_everseen, generate_var_name, get_hdr_name, get_hdrfld_name ## src/hardware_indep/controlplane.c.py:6
from utils.codegen import format_expr, format_type, gen_format_slice ## src/hardware_indep/controlplane.c.py:7
from utils.extern import get_smem_name ## src/hardware_indep/controlplane.c.py:8

generated_code += add_code("")
import os ## src/hardware_indep/controlplane.c.py:10

generated_code += add_code("")
generated_code += add_code(" #include <unistd.h>", lineno = 11)

generated_code += add_code("")
generated_code += add_code(" #include \"dpdk_lib.h\"", lineno = 13)
generated_code += add_code(" #include \"dpdk_primitives.h\" // TODO remove", lineno = 14)
generated_code += add_code(" #include \"actions.h\"", lineno = 15)
generated_code += add_code(" #include \"tables.h\"", lineno = 16)
generated_code += add_code(" #include \"controlplane.h\"", lineno = 17)

generated_code += add_code("")
generated_code += add_code(" #ifdef T4P4S_P4RT", lineno = 19)
generated_code += add_code("     #include \"PI/proto/pi_server.h\"", indent_level = 1, lineno = 20)
generated_code += add_code("     #include \"p4rt/device_mgr.h\"", indent_level = 1, lineno = 21)
generated_code += add_code("     extern device_mgr_t *dev_mgr_ptr;", indent_level = 1, lineno = 22)
generated_code += add_code(" #endif", lineno = 23)

generated_code += add_code("")
for table in hlir.tables: ## src/hardware_indep/controlplane.c.py:27
    if len(table.key.keyElements) > 0: ## src/hardware_indep/controlplane.c.py:28
        generated_code += add_code(' extern void table_{}_key(packet_descriptor_t* pd, uint8_t* key); // defined in dataplane.c'.format(table.name), lineno = 28)
# Variable width fields are not supported ## src/hardware_indep/controlplane.c.py:32
def get_key_byte_width(k): ## src/hardware_indep/controlplane.c.py:33
    if 'size' in k: ## src/hardware_indep/controlplane.c.py:34
        return (k.size+7)//8 ## src/hardware_indep/controlplane.c.py:35
    if k.header.urtype('is_vw', False): ## src/hardware_indep/controlplane.c.py:37
        return 0 ## src/hardware_indep/controlplane.c.py:38
    return (k.header.type.size+7)//8 ## src/hardware_indep/controlplane.c.py:40
def slice_info(e): ## src/hardware_indep/controlplane.c.py:44
    hdrname, fldname = get_hdrfld_name(e.e0) ## src/hardware_indep/controlplane.c.py:45
    maxval  = e.e1.value ## src/hardware_indep/controlplane.c.py:46
    minval  = e.e1.value ## src/hardware_indep/controlplane.c.py:47
    return hdrname, fldname, maxval, minval ## src/hardware_indep/controlplane.c.py:48
def get_key_name_postfix(k, idx): ## src/hardware_indep/controlplane.c.py:51
    if 'header_name' in k: ## src/hardware_indep/controlplane.c.py:52
        return f'_{k.header_name}_{k.field_name}' ## src/hardware_indep/controlplane.c.py:53
    ke = k.expression ## src/hardware_indep/controlplane.c.py:55
    if ke.node_type == 'Slice': ## src/hardware_indep/controlplane.c.py:57
        hdrname, fldname, maxval, minval = slice_info(ke) ## src/hardware_indep/controlplane.c.py:58
        return f'_{hdrname}_{fldname}_{maxval}_{minval}' ## src/hardware_indep/controlplane.c.py:59
    return '' ## src/hardware_indep/controlplane.c.py:61
def get_key_name(k, idx): ## src/hardware_indep/controlplane.c.py:63
    return f'keyelem_{idx}_{k.node_type}{get_key_name_postfix(k, idx)}' ## src/hardware_indep/controlplane.c.py:64
for table in hlir.tables: ## src/hardware_indep/controlplane.c.py:66
    if len(table.key.keyElements) > 0: ## src/hardware_indep/controlplane.c.py:67
        generated_code += add_code(" typedef struct {", lineno = 67)
        for idx, k in enumerate(sorted(table.key.keyElements, key = lambda k: k.match_order)): ## src/hardware_indep/controlplane.c.py:69
            varname = get_key_name(k, idx) ## src/hardware_indep/controlplane.c.py:70
            generated_code += add_code('     {};'.format(format_type(k.expression.type, varname)), indent_level = 1, lineno = 70)
        generated_code += add_code(' }} table_key_{}_t;'.format(table.name), lineno = 71)
        generated_code += add_code("", lineno = 72)
# TODO move to hlir_attrib ## src/hardware_indep/controlplane.c.py:76
for table in hlir.tables: ## src/hardware_indep/controlplane.c.py:77
    for k in table.key.keyElements: ## src/hardware_indep/controlplane.c.py:78
        if 'header' in k: ## src/hardware_indep/controlplane.c.py:79
            k.src = f'field_{k.header.name}_{k.field_name}' ## src/hardware_indep/controlplane.c.py:80
            continue ## src/hardware_indep/controlplane.c.py:81
        ke = k.expression ## src/hardware_indep/controlplane.c.py:83
        # TODO implement these two ## src/hardware_indep/controlplane.c.py:84
        if ke.node_type == 'MethodCallExpression': ## src/hardware_indep/controlplane.c.py:85
            k.src = None ## src/hardware_indep/controlplane.c.py:86
        elif ke.node_type == 'Slice': ## src/hardware_indep/controlplane.c.py:87
            k.src = None ## src/hardware_indep/controlplane.c.py:88
        else: ## src/hardware_indep/controlplane.c.py:89
            k.src = f'{ke.path.name}' ## src/hardware_indep/controlplane.c.py:90
def gen_key_component_param(k, byte_width): ## src/hardware_indep/controlplane.c.py:93
    generated_code = ""
    if 'header' in k: ## src/hardware_indep/controlplane.c.py:94
        generated_code += add_code('     uint8_t field_{}_{}[{}],'.format(k.header.name, k.field_name, byte_width), lineno = 94)
    else: ## src/hardware_indep/controlplane.c.py:96
        varname = generate_var_name(f'target_{k.src}') ## src/hardware_indep/controlplane.c.py:97
        generated_code += add_code('     uint8_t* {},'.format(varname), lineno = 97)
    if k.src is not None: ## src/hardware_indep/controlplane.c.py:100
        # TODO it should never be None ## src/hardware_indep/controlplane.c.py:101
        if k.matchType.path.name == "ternary": ## src/hardware_indep/controlplane.c.py:103
            generated_code += add_code('     uint8_t {}_mask[{}],'.format(k.src, byte_width), lineno = 103)
        if k.matchType.path.name == "lpm": ## src/hardware_indep/controlplane.c.py:105
            generated_code += add_code('     uint8_t {}_prefix_length,'.format(k.src), lineno = 105)
    return generated_code
def gen_fill_key_component_slice(ke): ## src/hardware_indep/controlplane.c.py:109
    generated_code = ""
    src = generate_var_name('slice') ## src/hardware_indep/controlplane.c.py:110
    slice_expr = gen_format_slice(ke) ## src/hardware_indep/controlplane.c.py:112
    generated_code += compiler_common.pre_statement_buffer ## src/hardware_indep/controlplane.c.py:113
    generated_code += add_code(' {} {} = {};'.format(format_type(ke.e0.type), src, slice_expr), lineno = 114)
    generated_code += compiler_common.post_statement_buffer ## src/hardware_indep/controlplane.c.py:115
    compiler_common.pre_statement_buffer = "" ## src/hardware_indep/controlplane.c.py:118
    compiler_common.post_statement_buffer = "" ## src/hardware_indep/controlplane.c.py:119
    return generated_code
def gen_fill_key_component(k, idx, byte_width, tmt, kmt): ## src/hardware_indep/controlplane.c.py:122
    generated_code = ""
    ke = k.expression ## src/hardware_indep/controlplane.c.py:123
    if ke.node_type == 'MethodCallExpression': ## src/hardware_indep/controlplane.c.py:124
        # TODO can this be anything other than a call to isValid? ## src/hardware_indep/controlplane.c.py:125
        target = generate_var_name('method_call') ## src/hardware_indep/controlplane.c.py:126
        value = 1; ## src/hardware_indep/controlplane.c.py:128
        generated_code += add_code('     {} = {};'.format(format_type(ke.type, target), value), lineno = 128)
    elif ke.node_type == 'Slice': ## src/hardware_indep/controlplane.c.py:130
        generated_code += add_code("     // TODO fill Slice component properly (call gen_fill_key_component_slice)", lineno = 130)
    else: ## src/hardware_indep/controlplane.c.py:132
        is_t4p4s_order = byte_width <= 4 and not ('header' in k and k.header.urtype.is_metadata) ## src/hardware_indep/controlplane.c.py:133
        if is_t4p4s_order: ## src/hardware_indep/controlplane.c.py:135
            padded_byte_width = align8_16_32(byte_width) ## src/hardware_indep/controlplane.c.py:136
            varname = generate_var_name(f'fld_{get_key_name(k, idx)}') ## src/hardware_indep/controlplane.c.py:137
            generated_code += add_code('     uint{}_t {} = *(uint{}_t*)field_matches[{}]->bitmap;'.format(padded_byte_width, varname, padded_byte_width, idx), lineno = 137)
            generated_code += add_code('     key->{} = {};'.format(get_key_name(k, idx), varname), lineno = 138)
        else: ## src/hardware_indep/controlplane.c.py:140
            generated_code += add_code('     memcpy(&(key->{}), field_matches[{}]->bitmap, {});'.format(get_key_name(k, idx), idx, byte_width), lineno = 140)
        if tmt == "lpm": ## src/hardware_indep/controlplane.c.py:143
            if kmt == "exact": ## src/hardware_indep/controlplane.c.py:144
                generated_code += add_code('     prefix_length += {};'.format(get_key_byte_width(k)), lineno = 144)
            if kmt == "lpm": ## src/hardware_indep/controlplane.c.py:146
                generated_code += add_code('     prefix_length += {};'.format(byte_width), lineno = 146)
    return generated_code
for table in hlir.tables: ## src/hardware_indep/controlplane.c.py:150
    tmt = table.matchType.name ## src/hardware_indep/controlplane.c.py:151
    return_t     = {'exact': 'void', 'lpm': 'uint8_t', 'ternary': 'void'} ## src/hardware_indep/controlplane.c.py:153
    extra_init   = {'exact': '', 'lpm': 'uint8_t prefix_length = 0;', 'ternary': ''} ## src/hardware_indep/controlplane.c.py:154
    extra_return = {'exact': '', 'lpm': 'return prefix_length;', 'ternary': ''} ## src/hardware_indep/controlplane.c.py:155
    if len(table.key.keyElements) > 0: ## src/hardware_indep/controlplane.c.py:157
        generated_code += add_code(' // note: {} alias {} alias {}, {}, {}'.format(table.short_name, table.canonical_name, table.name, tmt, table.key_length_bytes), lineno = 157)
        generated_code += add_code(' {} {}_setup_key(p4_field_match_{}_t** field_matches, table_key_{}_t* key) {{'.format(return_t[tmt], table.name, tmt, table.name), lineno = 158)
        if extra_init[tmt]: ## src/hardware_indep/controlplane.c.py:160
            generated_code += add_code('     {}'.format(extra_init[tmt]), indent_level = 1, lineno = 160)
        for i, k in enumerate(sorted(table.key.keyElements, key = lambda k: k.match_order)): ## src/hardware_indep/controlplane.c.py:163
            kmt = k.matchType.path.name ## src/hardware_indep/controlplane.c.py:164
            if kmt == "lpm": ## src/hardware_indep/controlplane.c.py:166
                generated_code += add_code('     prefix_length += field_matches[{}]->prefix_length;'.format(i), indent_level = 1, lineno = 166)
            if kmt == "ternary": ## src/hardware_indep/controlplane.c.py:168
                generated_code += add_code("     /* TODO ternary */", indent_level = 1, lineno = 168)
        for idx, k in enumerate(sorted(table.key.keyElements, key = lambda k: k.match_order)): ## src/hardware_indep/controlplane.c.py:172
            byte_width = get_key_byte_width(k) ## src/hardware_indep/controlplane.c.py:173
            generated_code += gen_fill_key_component(k, idx, byte_width, tmt, kmt) ## src/hardware_indep/controlplane.c.py:173
        if extra_return[tmt]: ## src/hardware_indep/controlplane.c.py:176
            generated_code += add_code('     {}'.format(extra_return[tmt]), indent_level = 1, lineno = 176)
        generated_code += add_code(" }", lineno = 178)
        generated_code += add_code("", lineno = 179)
for table in hlir.tables: ## src/hardware_indep/controlplane.c.py:183
    # with open(os.path.join(t4p4sdir, 'output_translate.txt'), 'w') as outf: ## src/hardware_indep/controlplane.c.py:184
    #     for action in table.actions: ## src/hardware_indep/controlplane.c.py:185
    #         if action.action_object.name == f'({action.action_object.canonical_name})': ## src/hardware_indep/controlplane.c.py:186
    #             continue ## src/hardware_indep/controlplane.c.py:187
    #         print(f"TRANSLATE {action.action_object.name} {action.action_object.canonical_name}") ## src/hardware_indep/controlplane.c.py:188
    #         outf.write(f"TRANSLATE {action.action_object.name} {action.action_object.canonical_name}") ## src/hardware_indep/controlplane.c.py:189
    pass ## src/hardware_indep/controlplane.c.py:190
for table in hlir.tables: ## src/hardware_indep/controlplane.c.py:193
    generated_code += add_code(' bool {}_setup_entry(ENTRY({})* entry, p4_action_parameter_t** action_params, const char* action_name) {{'.format(table.name, table.name), lineno = 193)
    for idx, action in enumerate(table.actions): ## src/hardware_indep/controlplane.c.py:195
        ao = action.action_object ## src/hardware_indep/controlplane.c.py:196
        if idx == 0: ## src/hardware_indep/controlplane.c.py:197
            generated_code += add_code('     if (strcmp("{}", action_name)==0) {{'.format(ao.canonical_name), indent_level = 1, lineno = 197)
        else: ## src/hardware_indep/controlplane.c.py:199
            generated_code += add_code('     }} else if (strcmp("{}", action_name)==0) {{'.format(ao.canonical_name), indent_level = 2, lineno = 199)
        generated_code += add_code('         entry->id = action_{};'.format(ao.name), indent_level = 2, lineno = 201)
        for pidx, p in enumerate(ao.parameters.parameters): ## src/hardware_indep/controlplane.c.py:203
            generated_code += add_code('         memcpy(&entry->params.{}_params.{}, action_params[{}]->bitmap, {});'.format(ao.name, p.name, pidx, (p.urtype.size+7)//8), indent_level = 2, lineno = 203)
    valid_actions = ", ".join(f'" T4LIT({a.action_object.canonical_name},action) "' for a in table.actions) ## src/hardware_indep/controlplane.c.py:206
    generated_code += add_code("     } else {", indent_level = 2, lineno = 206)
    generated_code += add_code('         debug(" " T4LIT(!!!! Table add entry,warning) " on table " T4LIT({},table) ": action name " T4LIT(mismatch,warning) ": " T4LIT(%s,action) ", expected one of ({}).\\n", action_name);'.format(table.short_name, valid_actions), indent_level = 2, lineno = 207)
    generated_code += add_code("         return false;", indent_level = 2, lineno = 208)
    generated_code += add_code("     }", indent_level = 1, lineno = 209)
    generated_code += add_code("     return true;", indent_level = 1, lineno = 211)
    generated_code += add_code(" }", lineno = 212)
    generated_code += add_code("", lineno = 213)
for table in hlir.tables: ## src/hardware_indep/controlplane.c.py:216
    tmt = table.matchType.name ## src/hardware_indep/controlplane.c.py:217
    generated_code += add_code(' void {}_add_table_entry(p4_ctrl_msg_t* ctrl_m) {{'.format(table.name), lineno = 217)
    generated_code += add_code('     ENTRY({}) entry;'.format(table.name), indent_level = 1, lineno = 218)
    generated_code += add_code('     bool success = {}_setup_entry(&entry, (p4_action_parameter_t**)ctrl_m->action_params, ctrl_m->action_name);'.format(table.name), indent_level = 1, lineno = 219)
    generated_code += add_code("     if (unlikely(!success))    return;", indent_level = 1, lineno = 220)
    generated_code += add_code("", indent_level = 1, lineno = 221)
    table_extra_t = {'exact': '', 'lpm': 'int prefix_length = ', 'ternary': ''} ## src/hardware_indep/controlplane.c.py:224
    extra_names = {'exact': [], 'lpm': ['prefix_length'], 'ternary': []} ## src/hardware_indep/controlplane.c.py:225
    if len(table.key.keyElements) > 0: ## src/hardware_indep/controlplane.c.py:227
        generated_code += add_code('     table_key_{}_t key;'.format(table.name), indent_level = 1, lineno = 227)
        generated_code += add_code('     {}{}_setup_key((p4_field_match_{}_t**)ctrl_m->field_matches, &key);'.format(table_extra_t[tmt], table.name, tmt), indent_level = 1, lineno = 228)
        generated_code += add_code("", indent_level = 1, lineno = 229)
    extra_params = "".join(f'{p}, ' for p in extra_names[tmt]) ## src/hardware_indep/controlplane.c.py:232
    has_fields = "false" if len(action.action_object.parameters.parameters) == 0 else "true" ## src/hardware_indep/controlplane.c.py:233
    keyparam = '(uint8_t*)&key' if len(table.key.keyElements) else 'NULL /* empty key */' ## src/hardware_indep/controlplane.c.py:234
    generated_code += add_code('     {}_add_promote(TABLE_{}, {}, {} (ENTRYBASE*)&entry, false, {} || ctrl_is_initialized);'.format(table.matchType.name, table.name, keyparam, extra_params, has_fields), indent_level = 1, lineno = 234)
    generated_code += add_code(" }", lineno = 236)
    generated_code += add_code("", lineno = 237)
all_keyed_table_names = ", ".join((f'"T4LIT({table.canonical_name},table)"' for table in hlir.tables)) ## src/hardware_indep/controlplane.c.py:241
common_keyed_table_names = ", ".join((f'"T4LIT({table.canonical_name},table)"' for table in hlir.tables.filterfalse('is_hidden'))) ## src/hardware_indep/controlplane.c.py:242
hidden_table_count = len(hlir.tables.filter('is_hidden')) ## src/hardware_indep/controlplane.c.py:243

generated_code += add_code("")
generated_code += add_code(" #ifdef T4P4S_DEBUG", lineno = 244)
generated_code += add_code("     bool possible_tables_already_shown = false;", indent_level = 1, lineno = 245)
generated_code += add_code("     #ifdef T4P4S_SHOW_HIDDEN_TABLES", indent_level = 1, lineno = 246)
generated_code += add_code("         bool show_hidden_tables = true;", indent_level = 2, lineno = 247)
generated_code += add_code("     #else", indent_level = 2, lineno = 248)
generated_code += add_code("         bool show_hidden_tables = false;", indent_level = 2, lineno = 249)
generated_code += add_code("     #endif", indent_level = 1, lineno = 250)

generated_code += add_code("", indent_level = 1)
generated_code += add_code("     void debug_show_possible_tables() {", indent_level = 1, lineno = 252)
generated_code += add_code("         if (possible_tables_already_shown)   return;", indent_level = 2, lineno = 253)
generated_code += add_code("         if (show_hidden_tables) {", indent_level = 2, lineno = 254)
generated_code += add_code('             debug("   " T4LIT(!!,warning) " Possible table names: {}\\n");'.format(all_keyed_table_names), indent_level = 3, lineno = 255)
generated_code += add_code("         } else {", indent_level = 3, lineno = 256)
generated_code += add_code('             debug("   " T4LIT(!!,warning) " Possible table names: {} and " T4LIT(%d) " hidden tables\\n", {});'.format(common_keyed_table_names, hidden_table_count), indent_level = 3, lineno = 257)
generated_code += add_code("         }", indent_level = 2, lineno = 258)
generated_code += add_code("         possible_tables_already_shown = true;", indent_level = 2, lineno = 259)
generated_code += add_code("     }", indent_level = 1, lineno = 260)

generated_code += add_code("", indent_level = 1)
generated_code += add_code(" #endif", lineno = 262)

generated_code += add_code("")
generated_code += add_code(" void ctrl_add_table_entry(p4_ctrl_msg_t* ctrl_m) {", lineno = 264)
for table in hlir.tables: ## src/hardware_indep/controlplane.c.py:266
    generated_code += add_code('     if (strcmp("{}", ctrl_m->table_name) == 0) {{'.format(table.canonical_name), indent_level = 1, lineno = 266)
    generated_code += add_code('         {}_add_table_entry(ctrl_m);'.format(table.name), indent_level = 2, lineno = 267)
    generated_code += add_code("         return;", indent_level = 2, lineno = 268)
    generated_code += add_code("     }", indent_level = 1, lineno = 269)
generated_code += add_code('     debug(" " T4LIT(!!!! Table add entry,warning) ": " T4LIT(unknown table name,warning) " " T4LIT(%s,table) "\\n", ctrl_m->table_name);', indent_level = 1, lineno = 270)
generated_code += add_code("     #ifdef T4P4S_DEBUG", indent_level = 1, lineno = 271)
generated_code += add_code("         debug_show_possible_tables();", indent_level = 2, lineno = 272)
generated_code += add_code("     #endif", indent_level = 1, lineno = 273)
generated_code += add_code(" }", lineno = 274)

generated_code += add_code("")
generated_code += add_code(" extern char* action_names[];", lineno = 277)

generated_code += add_code("")
generated_code += add_code(" void ctrl_setdefault(p4_ctrl_msg_t* ctrl_m) {", lineno = 279)
for table in hlir.tables: ## src/hardware_indep/controlplane.c.py:281
    generated_code += add_code('     if (strcmp("{}", ctrl_m->table_name) == 0) {{'.format(table.canonical_name), indent_level = 1, lineno = 281)
    generated_code += add_code('         {}_action_t default_entry;'.format(table.name), indent_level = 2, lineno = 282)
    generated_code += add_code('         make_{}_set_default_table_entry(&default_entry, ctrl_m->action_name, (p4_action_parameter_t**)ctrl_m->action_params);'.format(table.name), indent_level = 2, lineno = 283)
    generated_code += add_code('         table_setdefault_promote(TABLE_{}, (ENTRYBASE*)&default_entry, false);'.format(table.name), indent_level = 2, lineno = 284)
    generated_code += add_code("         return;", indent_level = 2, lineno = 285)
    generated_code += add_code("     }", indent_level = 1, lineno = 286)
generated_code += add_code('     debug(" " T4LIT(!!!! Table set default,warning) ": " T4LIT(unknown table name,warning) " " T4LIT(%s,table) "\\n", ctrl_m->table_name);', indent_level = 1, lineno = 288)
generated_code += add_code("     #ifdef T4P4S_DEBUG", indent_level = 1, lineno = 289)
generated_code += add_code("         debug_show_possible_tables();", indent_level = 2, lineno = 290)
generated_code += add_code("     #endif", indent_level = 1, lineno = 291)
generated_code += add_code(" }", lineno = 292)

generated_code += add_code("")
for inst in hlir.smem_insts.filterfalse('smem.smem_type', ('register', 'direct_counter', 'direct_meter')): ## src/hardware_indep/controlplane.c.py:296
    generated_code += add_code(' uint32_t {}[{}];'.format(get_smem_name(inst, ['ctrl']), inst.amount), lineno = 296)
for packets_or_bytes in ('packets', 'bytes'): ## src/hardware_indep/controlplane.c.py:299
    generated_code += add_code(' uint32_t* read_counter_value_by_name_{}(char* counter_name, int* size, bool is_bytes) {{'.format(packets_or_bytes), lineno = 299)
    for inst in hlir.smem_insts.filterfalse('smem.smem_type', ('register', 'direct_counter', 'direct_meter')): ## src/hardware_indep/controlplane.c.py:301
        generated_code += add_code(' if (strcmp("{}", counter_name) == 0) {{'.format(inst.smem.canonical_name), indent_level = 1, lineno = 301)
        generated_code += add_code('     *size = {};'.format(inst.amount), indent_level = 2, lineno = 302)
        generated_code += add_code('     for (int i=0;i<{};++i) {}[i] = rte_atomic32_read(&global_smem.{}[i].{});'.format(inst.amount, get_smem_name(inst, ['ctrl']), get_smem_name(inst.smem), packets_or_bytes), indent_level = 2, lineno = 303)
        generated_code += add_code('     return {};'.format(get_smem_name(inst, ['ctrl'])), indent_level = 2, lineno = 304)
        generated_code += add_code(" }", indent_level = 1, lineno = 305)
        generated_code += add_code("", indent_level = 1, lineno = 306)
    generated_code += add_code("     *size = -1;", indent_level = 1, lineno = 307)
    generated_code += add_code("     return 0;", indent_level = 1, lineno = 308)
    generated_code += add_code(" }", lineno = 309)
    generated_code += add_code("", lineno = 310)
generated_code += add_code(" uint32_t* read_counter_value_by_name(char* counter_name, int* size, bool is_bytes) {", lineno = 312)
generated_code += add_code("     return is_bytes ? read_counter_value_by_name_bytes(counter_name, size, is_bytes) : read_counter_value_by_name_packets(counter_name, size, is_bytes);", indent_level = 1, lineno = 313)
generated_code += add_code(" }", lineno = 314)
generated_code += add_code("", lineno = 315)

generated_code += add_code("")
generated_code += add_code(" extern struct socket_state state[NB_SOCKETS];", lineno = 318)

generated_code += add_code("")
generated_code += add_code(" extern volatile bool ctrl_is_initialized;", lineno = 320)

generated_code += add_code("")
generated_code += add_code(" void ctrl_initialized() {", lineno = 322)
generated_code += add_code("     debug(\"   \" T4LIT(::,incoming) \" Control plane init \" T4LIT(done,success) \"\\n\");", indent_level = 1, lineno = 323)
generated_code += add_code("     ctrl_is_initialized = true;", indent_level = 1, lineno = 324)
generated_code += add_code(" }", lineno = 325)

generated_code += add_code("")
generated_code += add_code(" void recv_from_controller(p4_ctrl_msg_t* ctrl_m) {", lineno = 328)
generated_code += add_code("     if (ctrl_m->type == P4T_ADD_TABLE_ENTRY) {", indent_level = 1, lineno = 329)
generated_code += add_code("         ctrl_add_table_entry(ctrl_m);", indent_level = 2, lineno = 330)
generated_code += add_code("     } else if (ctrl_m->type == P4T_SET_DEFAULT_ACTION) {", indent_level = 2, lineno = 331)
generated_code += add_code("         ctrl_setdefault(ctrl_m);", indent_level = 2, lineno = 332)
generated_code += add_code("     } else if (ctrl_m->type == P4T_CTRL_INITIALIZED) {", indent_level = 2, lineno = 333)
generated_code += add_code("         ctrl_initialized();", indent_level = 2, lineno = 334)
generated_code += add_code("     } else if (ctrl_m->type == P4T_READ_COUNTER) {", indent_level = 2, lineno = 335)
generated_code += add_code("         //ctrl_m->xid = *read_counter_value_by_name(ctrl_m->table_name);", indent_level = 2, lineno = 336)
generated_code += add_code("         //TODO:SEND BACK;", indent_level = 2, lineno = 337)
generated_code += add_code("     } else {", indent_level = 2, lineno = 338)
generated_code += add_code("         debug(\" \" T4LIT(!!!!) \" Unknown message (type %d) arrived from the controller\\n\", ctrl_m->type);", indent_level = 2, lineno = 339)
generated_code += add_code("     }", indent_level = 1, lineno = 340)
generated_code += add_code(" }", lineno = 341)

generated_code += add_code("")
generated_code += add_code(" ctrl_plane_backend bg;", lineno = 344)

generated_code += add_code("")
generated_code += add_code(" void print_table_summary() {", lineno = 346)
generated_code += add_code("     #ifdef T4P4S_DEBUG", indent_level = 1, lineno = 347)
generated_code += add_code("         for (int i = 0; i < NB_TABLES; i++) {", indent_level = 2, lineno = 348)
generated_code += add_code("             lookup_table_t t = table_config[i];", indent_level = 3, lineno = 349)
generated_code += add_code("             if (state[0].tables[t.id][0]->init_entry_count > 0)", indent_level = 3, lineno = 350)
generated_code += add_code("                 debug(\"    \" T4LIT(:,incoming) \" Table \" T4LIT(%s,table) \" got \" T4LIT(%d) \" entries from the control plane\\n\", state[0].tables[t.id][0]->short_name, state[0].tables[t.id][0]->init_entry_count);", indent_level = 3, lineno = 351)
generated_code += add_code("             }", indent_level = 2, lineno = 352)
generated_code += add_code("     #endif", indent_level = 1, lineno = 353)
generated_code += add_code(" }", lineno = 354)
generated_code += add_code("", lineno = 355)

generated_code += add_code("")
generated_code += add_code(" void init_control_plane() {", lineno = 357)
generated_code += add_code("     bg = create_backend(3, 1000, \"localhost\", T4P4S_CTL_PORT, recv_from_controller);", indent_level = 1, lineno = 358)
generated_code += add_code("     launch_backend(bg);", indent_level = 1, lineno = 359)
generated_code += add_code("     #ifdef T4P4S_P4RT", indent_level = 1, lineno = 360)
generated_code += add_code("         dev_mgr_init_with_t4p4s(dev_mgr_ptr, recv_from_controller, read_counter_value_by_name, 1);", indent_level = 2, lineno = 361)
generated_code += add_code("         PIGrpcServerRunAddrGnmi(\"0.0.0.0:50051\", 0);", indent_level = 2, lineno = 362)
generated_code += add_code("         //PIGrpcServerRun();", indent_level = 2, lineno = 363)
generated_code += add_code("     #else", indent_level = 2, lineno = 364)
generated_code += add_code("         print_table_summary();", indent_level = 2, lineno = 365)
generated_code += add_code("     #endif", indent_level = 1, lineno = 366)
generated_code += add_code(" }", lineno = 367)
generated_code += add_code("", lineno = 368)
