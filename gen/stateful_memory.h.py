
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/stateful_memory.h.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/stateful_memory.h.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/stateful_memory.h.py: via hardware_indep/stateful_memory.h.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

# SPDX-License-Identifier: Apache-2.0 ## src/hardware_indep/stateful_memory.h.py:2
# Copyright 2018 Eotvos Lorand University, Budapest, Hungary ## src/hardware_indep/stateful_memory.h.py:3

generated_code += add_code("")
from compiler_log_warnings_errors import addError ## src/hardware_indep/stateful_memory.h.py:5
from utils.codegen import format_expr, format_type, format_statement, format_declaration ## src/hardware_indep/stateful_memory.h.py:6
from utils.extern import get_smem_name ## src/hardware_indep/stateful_memory.h.py:7
from compiler_common import unique_everseen ## src/hardware_indep/stateful_memory.h.py:8

generated_code += add_code("")
generated_code += add_code(" #pragma once", lineno = 10)

generated_code += add_code("")
generated_code += add_code(" #include \"common.h\"", lineno = 12)
generated_code += add_code(" #include \"aliases.h\"", lineno = 13)
generated_code += add_code(" #include \"dpdk_smem.h\"", lineno = 14)
generated_code += add_code(" #include \"gen_include.h\"", lineno = 15)
generated_code += add_code(" #include \"stateful_memory_type.h\"", lineno = 16)

generated_code += add_code("")
nonregs = unique_everseen(smem for _, smem in hlir.smem.all_counters + hlir.smem.all_meters) ## src/hardware_indep/stateful_memory.h.py:19

generated_code += add_code("")
if len(hlir.smem.all_counters) + len(hlir.smem.all_meters) + len(hlir.smem.registers) > 0: ## src/hardware_indep/stateful_memory.h.py:21
    generated_code += add_code(" typedef enum {", lineno = 21)
    for smem in nonregs: ## src/hardware_indep/stateful_memory.h.py:23
        amount = 1 if smem.is_direct else smem.amount ## src/hardware_indep/stateful_memory.h.py:24
        generated_code += add_code('     {} = {},'.format(get_smem_name(smem, ['amount']), amount), indent_level = 1, lineno = 24)
    for inst in hlir.smem.registers: ## src/hardware_indep/stateful_memory.h.py:26
        generated_code += add_code('     {} = {},'.format(get_smem_name(inst, ['amount']), inst.amount), indent_level = 1, lineno = 26)
    generated_code += add_code(" } global_smem_amounts_e;", lineno = 27)
    generated_code += add_code("", lineno = 28)
generated_code += add_code(" typedef struct {", lineno = 30)
for smem in nonregs: ## src/hardware_indep/stateful_memory.h.py:32
    generated_code += add_code('     SMEMTYPE({}) {}[{}];'.format(smem.smem_type, get_smem_name(smem), get_smem_name(smem, ['amount'])), indent_level = 1, lineno = 32)
for inst in hlir.smem.registers: ## src/hardware_indep/stateful_memory.h.py:34
    signed = "int" if inst.is_signed else "uint" ## src/hardware_indep/stateful_memory.h.py:35
    size = 8 if inst.size <= 8 else 16 if inst.size <= 16 else 32 if inst.size <= 32 else 64 ## src/hardware_indep/stateful_memory.h.py:36
    generated_code += add_code('     REGTYPE({},{}) {}[{}];'.format(signed, size, get_smem_name(inst), get_smem_name(inst, ['amount'])), indent_level = 1, lineno = 36)
generated_code += add_code("", indent_level = 1, lineno = 37)

generated_code += add_code("", indent_level = 1)
for smem in nonregs: ## src/hardware_indep/stateful_memory.h.py:40
    amount = 1 if smem.is_direct else smem.amount ## src/hardware_indep/stateful_memory.h.py:41
    generated_code += add_code('     lock_t {}[{}];'.format(get_smem_name(smem, ['lock']), amount), indent_level = 1, lineno = 41)
generated_code += add_code("", indent_level = 1, lineno = 42)

generated_code += add_code("", indent_level = 1)
local_params = unique_everseen(hlir.tables.flatmap('control.controlLocals').filter('node_type', 'P4Action').flatmap('parameters.parameters')) ## src/hardware_indep/stateful_memory.h.py:46
all_locals = unique_everseen((param.name, format_type(param.type)) for param in local_params) ## src/hardware_indep/stateful_memory.h.py:47
all_locals_dict = dict(all_locals) ## src/hardware_indep/stateful_memory.h.py:48
if len(all_locals) != len(all_locals_dict): ## src/hardware_indep/stateful_memory.h.py:49
    names = [name for name, _type in all_locals] ## src/hardware_indep/stateful_memory.h.py:50
    dups = unique_everseen(name for name in names if names.count(name) > 1) ## src/hardware_indep/stateful_memory.h.py:51
    for dup in dups: ## src/hardware_indep/stateful_memory.h.py:52
        dup_types = {f'{format_type(lp.type)}': f'{lp.type.node_type}[{lp.type.size}]' for lp in local_params if lp.name == dup} ## src/hardware_indep/stateful_memory.h.py:53
        description = ", ".join(f'{t} aka {dup_types[t]}' for t in dup_types) ## src/hardware_indep/stateful_memory.h.py:54
        addError("Collecting local variables of controls", f"Local variable {dup} is used with different types, which is currently unsupported: {description}") ## src/hardware_indep/stateful_memory.h.py:55
for locname, loctype in all_locals: ## src/hardware_indep/stateful_memory.h.py:57
    generated_code += add_code('     {} {};'.format(loctype, locname), indent_level = 1, lineno = 57)
generated_code += add_code("", indent_level = 1, lineno = 58)

generated_code += add_code("", indent_level = 1)
# Note: currently all control locals are put together into the global state ## src/hardware_indep/stateful_memory.h.py:61
for ctl in hlir.controls: ## src/hardware_indep/stateful_memory.h.py:62
    for local_var_decl in (ctl.controlLocals['Declaration_Variable'] + ctl.controlLocals['Declaration_Instance']).filterfalse('urtype.node_type', 'Type_Header').filterfalse(lambda n: 'smem_type' in n): ## src/hardware_indep/stateful_memory.h.py:63
        if (extern := local_var_decl.urtype).node_type == 'Type_Extern' and extern.repr is None: ## src/hardware_indep/stateful_memory.h.py:64
            generated_code += add_code('     // the extern {} has no representation'.format(extern.name), indent_level = 1, lineno = 64)
            continue ## src/hardware_indep/stateful_memory.h.py:66
        extern_name = f'EXTERNNAME({local_var_decl.name})' ## src/hardware_indep/stateful_memory.h.py:67
        generated_code += add_code('     {};'.format(format_type(local_var_decl.urtype, varname = extern_name, resolve_names = False)), indent_level = 1, lineno = 67)
# TODO implement properly ## src/hardware_indep/stateful_memory.h.py:70
generated_code += add_code(" uint8_t EXTERNNAME(rnd8_0);", indent_level = 1, lineno = 70)
generated_code += add_code(" uint16_t EXTERNNAME(rnd16_0);", indent_level = 1, lineno = 71)
generated_code += add_code(" uint32_t EXTERNNAME(rnd32_0);", indent_level = 1, lineno = 72)

generated_code += add_code("", indent_level = 1)
generated_code += add_code(" } global_state_t;", lineno = 74)

generated_code += add_code("")
generated_code += add_code(" extern global_state_t global_smem;", lineno = 76)

generated_code += add_code("")
generated_code += add_code(" static lock_t ingress_lock;", lineno = 79)
generated_code += add_code(" static lock_t egress_lock;", lineno = 80)
