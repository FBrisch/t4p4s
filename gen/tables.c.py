
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/tables.c.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/tables.c.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/tables.c.py: via hardware_indep/tables.c.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

# SPDX-License-Identifier: Apache-2.0 ## src/hardware_indep/tables.c.py:2
# Copyright 2016 Eotvos Lorand University, Budapest, Hungary ## src/hardware_indep/tables.c.py:3

generated_code += add_code("")
from utils.codegen import format_expr ## src/hardware_indep/tables.c.py:5
import utils.codegen ## src/hardware_indep/tables.c.py:6
from compiler_log_warnings_errors import addError, addWarning ## src/hardware_indep/tables.c.py:7
from compiler_common import generate_var_name, prepend_statement, SugarStyle, to_c_bool, make_const ## src/hardware_indep/tables.c.py:8

generated_code += add_code("")
generated_code += add_code(" #include \"dataplane.h\"", lineno = 9)
generated_code += add_code(" #include \"actions.h\"", lineno = 10)
generated_code += add_code(" #include \"tables.h\"", lineno = 11)
generated_code += add_code(" #include \"stateful_memory.h\"", lineno = 12)
generated_code += add_code(" #include \"dpdk_lib.h\"", lineno = 13)
generated_code += add_code(" #include \"util_debug.h\"", lineno = 14)
generated_code += add_code("", lineno = 15)

generated_code += add_code("")
all_table_short_names_sorted = ' ", " '.join(sorted(f'T4LIT({table.short_name},table)' for table in hlir.tables)) ## src/hardware_indep/tables.c.py:20
table_short_names_sorted = ' ", " '.join(sorted(f'T4LIT({table.short_name},table)' for table in hlir.tables if not table.is_hidden)) ## src/hardware_indep/tables.c.py:21
generated_code += add_code(" #ifdef T4P4S_DEBUG", lineno = 21)
generated_code += add_code('     const char* all_table_short_names_sorted = "" {};'.format(all_table_short_names_sorted), indent_level = 1, lineno = 22)
generated_code += add_code('     const int   all_table_short_names_count  = {};'.format(len(hlir.tables)), indent_level = 1, lineno = 23)
generated_code += add_code('     const char* table_short_names_sorted     = "" {};'.format(table_short_names_sorted), indent_level = 1, lineno = 24)
generated_code += add_code('     const int   table_short_names_count      = {};'.format(len(hlir.tables.filterfalse('is_hidden'))), indent_level = 1, lineno = 25)
generated_code += add_code(" #endif", lineno = 26)
generated_code += add_code("", lineno = 27)

generated_code += add_code("")
with SugarStyle("no_comment"): ## src/hardware_indep/tables.c.py:30
    generated_code += add_code(" #define TABLE_CONFIG_ENTRY_DEF(tname,cname,sname,mt,hidden,keysize,size) (lookup_table_t) { \\", lineno = 30)
    generated_code += add_code("  .name           = #tname, \\", indent_level = 1, lineno = 31)
    generated_code += add_code("  .canonical_name = #cname, \\", indent_level = 1, lineno = 32)
    generated_code += add_code("  .short_name     = #sname, \\", indent_level = 1, lineno = 33)
    generated_code += add_code("  .id = TABLE_ ## tname, \\", indent_level = 1, lineno = 34)
    generated_code += add_code("  .type = LOOKUP_ ## mt, \\", indent_level = 1, lineno = 35)
    generated_code += add_code("  .default_val = NULL, \\", indent_level = 1, lineno = 36)
    generated_code += add_code("  .is_hidden = hidden, \\", indent_level = 1, lineno = 37)
    generated_code += add_code("  .entry = { \\", indent_level = 1, lineno = 38)
    generated_code += add_code("      .entry_count = 0, \\", indent_level = 2, lineno = 39)
    generated_code += add_code("      .key_size = keysize, \\", indent_level = 2, lineno = 40)
    generated_code += add_code("      .action_size = sizeof(tname ## _action_t), \\", indent_level = 2, lineno = 41)
    generated_code += add_code("      .state_size = 0, \\", indent_level = 2, lineno = 42)
    generated_code += add_code("      }, \\", indent_level = 1, lineno = 43)
    generated_code += add_code("  .min_size = 0, \\", indent_level = 1, lineno = 44)
    generated_code += add_code("  .max_size = size == NO_TABLE_SIZE ? MAX_TABLE_SIZE : size, \\", indent_level = 1, lineno = 45)
    generated_code += add_code(" }", lineno = 46)
    generated_code += add_code("", lineno = 47)
generated_code += add_code(" lookup_table_t table_config[NB_TABLES] = {", lineno = 50)
for table in hlir.tables: ## src/hardware_indep/tables.c.py:52
    tmt = table.matchType.name ## src/hardware_indep/tables.c.py:53
    ks  = table.key_length_bytes ## src/hardware_indep/tables.c.py:54
    size = table.size.expression.value if 'size' in table else 'NO_TABLE_SIZE' ## src/hardware_indep/tables.c.py:55
    generated_code += add_code('     TABLE_CONFIG_ENTRY_DEF({},{},{},{},{},{},{}),'.format(table.name, table.canonical_name, table.short_name, tmt, to_c_bool(table.is_hidden), ks, size), lineno = 55)
generated_code += add_code(" };", lineno = 56)

generated_code += add_code("")
for table in hlir.tables: ## src/hardware_indep/tables.c.py:60
    generated_code += add_code(' void setdefault_{}(actions_e action_id, bool show_info) {{'.format(table.name), lineno = 60)
    generated_code += add_code('     ENTRY({}) default_entry = {{ .id = action_id }};'.format(table.name), indent_level = 1, lineno = 61)
    generated_code += add_code('     table_setdefault_promote(TABLE_{}, (ENTRYBASE*)&default_entry, show_info);'.format(table.name), indent_level = 1, lineno = 62)
    generated_code += add_code(" }", lineno = 63)
generated_code += add_code(" #define SOCKET0 0", lineno = 66)

generated_code += add_code("")
generated_code += add_code(" extern struct socket_state state[NB_SOCKETS];", lineno = 68)
generated_code += add_code("", lineno = 69)

generated_code += add_code("")
nops = list(sorted((t for t in hlir.tables if not t.is_hidden for default in [t.default_action.expression.method.action_ref] if default.canonical_name == '.nop'), key=lambda t: t.short_name)) ## src/hardware_indep/tables.c.py:72
nopinfo = "" if len(nops) == 0 else f' ({len(nops)} " T4LIT(nop,action) " defaults: ' + ", ".join(f'" T4LIT({t.short_name},table) "' for t in nops) + ')' ## src/hardware_indep/tables.c.py:73
tableinfos = [(t.name, t not in nops and not t.is_hidden, t.default_action.expression.method.action_ref) for t in sorted(hlir.tables, key=lambda table: table.short_name)] ## src/hardware_indep/tables.c.py:74

generated_code += add_code("")
generated_code += add_code(" void init_table_default_actions() {", lineno = 75)
if len(nops) > 0: ## src/hardware_indep/tables.c.py:77
    noptxt = ", ".join(f'" T4LIT({t.short_name},table) "' for t in nops) ## src/hardware_indep/tables.c.py:78
    generated_code += add_code('     debug(" :::: Init tables: " T4LIT({}) " " T4LIT(nop,action) " default actions: {}\\n");'.format(len(nops), noptxt), indent_level = 1, lineno = 78)
if len(definfos := list((tname, default_action.name) for tname, show_info, default_action in tableinfos if show_info if default_action.name != '.NoAction')) > 0: ## src/hardware_indep/tables.c.py:80
    deftxt = ", ".join(f'" T4LIT({tname},table) "[" T4LIT({defname},action) "]' for tname, defname in definfos) ## src/hardware_indep/tables.c.py:81
if len(tableinfos) > 0: ## src/hardware_indep/tables.c.py:83
    generated_code += add_code("     struct socket_state socket0 = state[SOCKET0];", indent_level = 1, lineno = 83)
for name, show_info, default_action in tableinfos: ## src/hardware_indep/tables.c.py:86
    generated_code += add_code('     int current_replica_{} = socket0.active_replica[TABLE_{}];'.format(name, name), indent_level = 1, lineno = 86)
    generated_code += add_code('     if (likely(socket0.tables[TABLE_{}][current_replica_{}]->default_val == NULL)) {{'.format(name, name), indent_level = 1, lineno = 87)
    generated_code += add_code('         setdefault_{}(action_{}, false);'.format(name, default_action.name), indent_level = 2, lineno = 88)
    generated_code += add_code("     }", indent_level = 1, lineno = 89)
generated_code += add_code(" }", lineno = 90)
generated_code += add_code("", lineno = 91)

generated_code += add_code("")
# TODO move to a utility module ## src/hardware_indep/tables.c.py:95
def align_to_byte(num): ## src/hardware_indep/tables.c.py:96
    return (num + 7) // 8 ## src/hardware_indep/tables.c.py:97
def gen_make_const_entry(entry, params, args, keys, key_sizes, varinfos, action_id): ## src/hardware_indep/tables.c.py:100
    generated_code = ""
    # note: _left is for lpm and ternary that may have a mask ## src/hardware_indep/tables.c.py:101
    key_total_size = sum(entry.keys.components.map('_left.urtype.size').map(align_to_byte)) ## src/hardware_indep/tables.c.py:102
    # key_total_size = (sum((key._left.urtype.size for key in entry.keys.components))+7) // 8 ## src/hardware_indep/tables.c.py:103
    generated_code += add_code('     uint8_t {}[{}];'.format(key_var, key_total_size), lineno = 104)
    offsets = ["+".join(["0"] + [f'{ksize}' for ksize in key_sizes[0:idx]]) for idx, ksize in enumerate(key_sizes)] ## src/hardware_indep/tables.c.py:107
    for key, ksize, (const_var, hex_content) in zip(keys, key_sizes, varinfos): ## src/hardware_indep/tables.c.py:109
        generated_code += add_code('     uint8_t {}[] = {{{}}};'.format(const_var, hex_content), lineno = 109)
    for key, ksize, offset, (const_var, hex_content) in zip(keys, key_sizes, offsets, varinfos): ## src/hardware_indep/tables.c.py:112
        generated_code += add_code('     memcpy({} + (({} +7)/8), &{}, {});'.format(key_var, offset, const_var, (ksize+7)//8), lineno = 112)
    generated_code += add_code('     ENTRY({}) {} = {{'.format(table.name, entry_var), lineno = 114)
    generated_code += add_code('         .id = action_{},'.format(action_id), indent_level = 1, lineno = 115)
    generated_code += add_code("         .params = {", indent_level = 1, lineno = 116)
    generated_code += add_code('             .{}_params = {{'.format(action_id), indent_level = 2, lineno = 117)
    for param, value_expr in zip(params, args): ## src/hardware_indep/tables.c.py:119
        _, hex_content = make_const(value_expr.expression) ## src/hardware_indep/tables.c.py:120
        if param.urtype.size <= 32: ## src/hardware_indep/tables.c.py:121
            generated_code += add_code('                 .{} = {},'.format(param.name, value_expr.expression.value), indent_level = 3, lineno = 121)
        else: ## src/hardware_indep/tables.c.py:123
            generated_code += add_code('                 .{} = {{ {} }}, // {}'.format(param.name, hex_content, value_expr.expression.value), indent_level = 3, lineno = 123)
    generated_code += add_code("             },", indent_level = 2, lineno = 124)
    generated_code += add_code("         },", indent_level = 1, lineno = 125)
    generated_code += add_code("     };", lineno = 126)
    return generated_code
def gen_add_const_entry(table, key_var, entry_var, keys, key_sizes, varinfos, mt): ## src/hardware_indep/tables.c.py:130
    generated_code = ""
    if mt == 'exact': ## src/hardware_indep/tables.c.py:131
        generated_code += add_code('     {}_add_promote(TABLE_{}, {}, (ENTRYBASE*)&{}, true, false);'.format(mt, table.name, key_var, entry_var), lineno = 131)
    elif mt == 'lpm': ## src/hardware_indep/tables.c.py:133
        # TODO: if there are exact fields as well as an lpm field, make sure that the exact fields are in front ## src/hardware_indep/tables.c.py:134
        lpm_depth = sum((f'{key.right.value:b}'.count('1') if key.node_type == 'Mask' else ksize for key, ksize, (const_var, hex_content) in zip(keys, key_sizes, varinfos))) ## src/hardware_indep/tables.c.py:135
        generated_code += add_code('     {}_add_promote(TABLE_{}, {}, {}, (ENTRYBASE*)&{}, true, false);'.format(mt, table.name, key_var, lpm_depth, entry_var), lineno = 135)
    elif mt == 'ternary': ## src/hardware_indep/tables.c.py:137
        ternary_expr = keys[0].right ## src/hardware_indep/tables.c.py:138
        generated_code += add_code('     {}_add_promote(TABLE_{}, {}, {}, (ENTRYBASE*)&{}, true, false);'.format(mt, table.name, key_var, format_expr(ternary_expr), entry_var), lineno = 138)
    return generated_code
def gen_print_const_entry(table, entry, params, args, mt): ## src/hardware_indep/tables.c.py:142
    generated_code = ""
    def make_value(value): ## src/hardware_indep/tables.c.py:143
        if value.type.node_type in ('Type_Enum', 'Type_Error'): ## src/hardware_indep/tables.c.py:144
            values = value.type.members ## src/hardware_indep/tables.c.py:145
            elem = values.get(value.member) ## src/hardware_indep/tables.c.py:146
            idx = {val: idx for idx, val in enumerate(values)}[elem] ## src/hardware_indep/tables.c.py:147
            return f'{value.member}={idx}' ## src/hardware_indep/tables.c.py:148
        elif value.node_type == 'BoolLiteral': ## src/hardware_indep/tables.c.py:149
            value_const = 1 if value.value else 0 ## src/hardware_indep/tables.c.py:150
            value_base = 2 ## src/hardware_indep/tables.c.py:151
        else: ## src/hardware_indep/tables.c.py:152
            value_const = value.value ## src/hardware_indep/tables.c.py:153
            value_base = value.base ## src/hardware_indep/tables.c.py:154
        is_hex = value_base == 16 ## src/hardware_indep/tables.c.py:156
        split_places = 4 if is_hex else 3 ## src/hardware_indep/tables.c.py:157
        val = f'{value_const:x}' if is_hex else f'{value_const}' ## src/hardware_indep/tables.c.py:159
        val = '_'.join(val[::-1][i:i+split_places] for i in range(0, len(val), split_places))[::-1] ## src/hardware_indep/tables.c.py:160
        return f'0x{val},bytes' if is_hex else f'{val}' ## src/hardware_indep/tables.c.py:161
    def make_key(table, key, value): ## src/hardware_indep/tables.c.py:163
        value_str = f'" T4LIT({make_value(value._left)}) "' ## src/hardware_indep/tables.c.py:164
        mask_str = '' ## src/hardware_indep/tables.c.py:165
        if value.node_type == 'Mask': ## src/hardware_indep/tables.c.py:166
            if mt == 'lpm': ## src/hardware_indep/tables.c.py:167
                depth = f'{value.right.value:b}'.count('1') ## src/hardware_indep/tables.c.py:168
                mask_str = f'/" T4LIT({depth}b) "' ## src/hardware_indep/tables.c.py:169
            if mt == 'ternary': ## src/hardware_indep/tables.c.py:170
                mask_str = ' &&& " T4LIT({make_value(value.right)}) "' ## src/hardware_indep/tables.c.py:171
        if 'header_name' in key: ## src/hardware_indep/tables.c.py:173
            return f'" T4LIT({key.header_name},header) "." T4LIT({key.field_name},field) "={value_str}{mask_str}' ## src/hardware_indep/tables.c.py:174
        long_name = key.expression.path.name ## src/hardware_indep/tables.c.py:176
        short_name = table.control.controlLocals.get(long_name, 'Declaration_Variable').short_name ## src/hardware_indep/tables.c.py:177
        return f'" T4LIT({short_name},field) "={value_str}{mask_str}' ## src/hardware_indep/tables.c.py:178
    def make_param(param, value_expr): ## src/hardware_indep/tables.c.py:180
        return f'" T4LIT({param.name},field) "=" T4LIT({make_value(value_expr.expression)}) "' ## src/hardware_indep/tables.c.py:181
    key_str = ", ".join((make_key(table, key, value) for key, value in zip(table.key.keyElements, entry.keys.components))) ## src/hardware_indep/tables.c.py:183
    params_str = ", ".join((make_param(param, value_expr) for param, value_expr in zip(params, args))) ## src/hardware_indep/tables.c.py:184
    if params_str != "": ## src/hardware_indep/tables.c.py:185
        params_str = f'({params_str})' ## src/hardware_indep/tables.c.py:186
    generated_code += add_code("     #ifndef TEST_CONST_ENTRIES_hide", lineno = 187)
    generated_code += add_code("     #ifndef TEST_CONST_ENTRIES_simple", indent_level = 1, lineno = 188)
    generated_code += add_code('         debug("   :: Table " T4LIT({},table) "/" T4LIT({}) ": const entry ({}) -> " T4LIT({},action) "{}\\n");'.format(table.short_name, mt, key_str, entry.action.method.action_ref.short_name, params_str), indent_level = 2, lineno = 189)
    generated_code += add_code("     #endif", indent_level = 1, lineno = 190)
    generated_code += add_code("     #endif", lineno = 191)
    return generated_code
generated_code += add_code("", lineno = 192)

generated_code += add_code("")
generated_code += add_code(" char summary[1024];", lineno = 194)

generated_code += add_code("")
generated_code += add_code(" void print_const_entry_summary() {", lineno = 196)
generated_code += add_code("     #ifdef TEST_CONST_ENTRIES_simple", indent_level = 1, lineno = 197)
generated_code += add_code("         char* summary_ptr = summary;", indent_level = 2, lineno = 198)
generated_code += add_code("         int count = 0;", indent_level = 2, lineno = 199)
generated_code += add_code("         bool is_first = true;", indent_level = 2, lineno = 200)
for table in hlir.tables: ## src/hardware_indep/tables.c.py:202
    if 'entries' not in table: ## src/hardware_indep/tables.c.py:203
        continue ## src/hardware_indep/tables.c.py:204
    generated_code += add_code('         int {}_size = table_size(TABLE_{});'.format(table.name, table.name), indent_level = 2, lineno = 205)
    generated_code += add_code('         if ({}_size > 0) {{'.format(table.name), indent_level = 2, lineno = 206)
    generated_code += add_code('             count += {}_size;'.format(table.name), indent_level = 3, lineno = 207)
    generated_code += add_code('             summary_ptr += sprintf(summary_ptr, "%s" T4LIT(%d) " on " T4LIT({},table), is_first ? "" : ", ", {}_size);'.format(table.short_name, table.name), indent_level = 3, lineno = 208)
    generated_code += add_code("             is_first = false;", indent_level = 3, lineno = 209)
    generated_code += add_code("         }", indent_level = 2, lineno = 210)
generated_code += add_code("         if (count > 0) {", indent_level = 2, lineno = 211)
generated_code += add_code("             debug(\" :::: Const entries on tables: %s\\n\", summary);", indent_level = 3, lineno = 212)
generated_code += add_code("         }", indent_level = 2, lineno = 213)

generated_code += add_code("", indent_level = 2)
generated_code += add_code("     #endif", indent_level = 1, lineno = 215)
generated_code += add_code(" }", lineno = 216)
generated_code += add_code("", lineno = 217)

generated_code += add_code("")
for table in hlir.tables: ## src/hardware_indep/tables.c.py:220
    if 'entries' not in table: ## src/hardware_indep/tables.c.py:221
        continue ## src/hardware_indep/tables.c.py:222
    if 'size' in table and (table_size := table.size.expression.value) < (const_entry_count := len(table.entries.entries)): ## src/hardware_indep/tables.c.py:224
        addError("Generating const entries", f"Table {table.name} has {const_entry_count} const entries, but its size is only {table_size}") ## src/hardware_indep/tables.c.py:225
    generated_code += add_code(' void init_table_const_entries_{}() {{'.format(table.name), lineno = 226)
    for entry in table.entries.entries: ## src/hardware_indep/tables.c.py:228
        if any((component.urtype.node_type == 'Type_Dontcare' for component in entry.keys.components)): ## src/hardware_indep/tables.c.py:229
            addWarning("adding const entry", f"Underscore entry for const entry for table {table.name} not supported yet") ## src/hardware_indep/tables.c.py:230
            continue ## src/hardware_indep/tables.c.py:231
        utils.codegen.pre_statement_buffer = "" ## src/hardware_indep/tables.c.py:233
        action_id = entry.action.method.path.name ## src/hardware_indep/tables.c.py:235
        key_var = generate_var_name("key", f"{table.name}__{action_id}") ## src/hardware_indep/tables.c.py:237
        entry_var = generate_var_name("entry", f"{table.name}__{action_id}") ## src/hardware_indep/tables.c.py:238
        params = entry.action.method.type.parameters.parameters ## src/hardware_indep/tables.c.py:240
        args = entry.action.arguments ## src/hardware_indep/tables.c.py:241
        mt = table.matchType.name ## src/hardware_indep/tables.c.py:243
        keys = entry.keys.components ## src/hardware_indep/tables.c.py:245
        key_sizes = [key._left.urtype.size for key in keys] ## src/hardware_indep/tables.c.py:246
        def make_var(keyelem, key, ksize): ## src/hardware_indep/tables.c.py:248
            is_meta = 'header' in keyelem and keyelem.header.name == 'all_metadatas' ## src/hardware_indep/tables.c.py:249
            name, hex_content = make_const(key._left, not is_meta and ksize <= 32) ## src/hardware_indep/tables.c.py:250
            const_var = generate_var_name(f"const{ksize}", name) ## src/hardware_indep/tables.c.py:251
            return const_var, hex_content ## src/hardware_indep/tables.c.py:252
        varinfos = [make_var(keyelem, key, ksize) for keyelem, key, ksize in zip(table.key.keyElements, keys, key_sizes)] ## src/hardware_indep/tables.c.py:254
        generated_code += add_code(' {}'.format(utils.codegen.pre_statement_buffer), indent_level = 1, lineno = 255)
        generated_code += add_code(' {}'.format(gen_make_const_entry(entry, params, args, keys, key_sizes, varinfos, action_id)), indent_level = 1, lineno = 256)
        generated_code += add_code(' {}'.format(gen_add_const_entry(table, key_var, entry_var, keys, key_sizes, varinfos, mt)), indent_level = 1, lineno = 257)
        generated_code += add_code(' {}'.format(gen_print_const_entry(table, entry, params, args, mt)), indent_level = 1, lineno = 258)
        utils.codegen.pre_statement_buffer = "" ## src/hardware_indep/tables.c.py:261
    generated_code += add_code(" }", lineno = 261)
    generated_code += add_code("", lineno = 262)
generated_code += add_code(" void init_table_const_entries() {", lineno = 265)
for table in hlir.tables: ## src/hardware_indep/tables.c.py:267
    if 'entries' not in table: ## src/hardware_indep/tables.c.py:268
        generated_code += add_code('     // no const entries in table {}'.format(table.name), indent_level = 1, lineno = 268)
        continue ## src/hardware_indep/tables.c.py:270
    generated_code += add_code('     init_table_const_entries_{}();'.format(table.name), indent_level = 1, lineno = 270)
generated_code += add_code("     print_const_entry_summary();", indent_level = 1, lineno = 271)
generated_code += add_code(" }", lineno = 272)

generated_code += add_code("")
generated_code += add_code(" // ============================================================================", lineno = 274)
generated_code += add_code(" // Getters", lineno = 275)

generated_code += add_code("")
generated_code += add_code(" extern char* action_names[];", lineno = 277)
generated_code += add_code(" extern char* action_canonical_names[];", lineno = 278)
generated_code += add_code(" extern char* action_short_names[];", lineno = 279)
