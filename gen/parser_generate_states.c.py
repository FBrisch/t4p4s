
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/parser_generate_states.c.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/parser_generate_states.c.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/parser_generate_states.c.py: via hardware_indep/parser_generate_states.c.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

# SPDX-License-Identifier: Apache-2.0 ## src/hardware_indep/parser_generate_states.c.py:2
# Copyright 2016 Eotvos Lorand University, Budapest, Hungary ## src/hardware_indep/parser_generate_states.c.py:3

generated_code += add_code("")
import os ## src/hardware_indep/parser_generate_states.c.py:5
import re ## src/hardware_indep/parser_generate_states.c.py:6

generated_code += add_code("")
from itertools import takewhile, dropwhile ## src/hardware_indep/parser_generate_states.c.py:8

generated_code += add_code("")
NOT_separator = '▶' ## src/hardware_indep/parser_generate_states.c.py:10

generated_code += add_code("")
for parser in hlir.parsers: ## src/hardware_indep/parser_generate_states.c.py:12
    def fmt_key(key): ## src/hardware_indep/parser_generate_states.c.py:13
        if key.node_type == 'DefaultExpression': ## src/hardware_indep/parser_generate_states.c.py:14
            return '_' ## src/hardware_indep/parser_generate_states.c.py:15
        if key.node_type == 'Constant': ## src/hardware_indep/parser_generate_states.c.py:16
            return f'{key.value}' if key.value < 10 else f'{key.value:0{(key.urtype.size+3)//4}x}' ## src/hardware_indep/parser_generate_states.c.py:17
        return f'???#{key.node_type}' ## src/hardware_indep/parser_generate_states.c.py:18
    def get_elems(node): ## src/hardware_indep/parser_generate_states.c.py:20
        if node.node_type == 'ListExpression': ## src/hardware_indep/parser_generate_states.c.py:21
            return node.components.map(fmt_key) ## src/hardware_indep/parser_generate_states.c.py:22
        if node.node_type == 'Constant': ## src/hardware_indep/parser_generate_states.c.py:23
            return [fmt_key(node)] ## src/hardware_indep/parser_generate_states.c.py:24
        return [] ## src/hardware_indep/parser_generate_states.c.py:25
    def output_states(state, known_states): ## src/hardware_indep/parser_generate_states.c.py:27
        new_known_states = set(known_states) ## src/hardware_indep/parser_generate_states.c.py:28
        new_known_states.add(state.Node_ID) ## src/hardware_indep/parser_generate_states.c.py:29
        if state.name == 'accept': ## src/hardware_indep/parser_generate_states.c.py:31
            yield([]) ## src/hardware_indep/parser_generate_states.c.py:32
            return ## src/hardware_indep/parser_generate_states.c.py:33
        if state.name == 'reject': ## src/hardware_indep/parser_generate_states.c.py:35
            yield(["rejected"]) ## src/hardware_indep/parser_generate_states.c.py:36
            return ## src/hardware_indep/parser_generate_states.c.py:37
        def get_name(comp): ## src/hardware_indep/parser_generate_states.c.py:39
            if comp.node_type == 'Slice': ## src/hardware_indep/parser_generate_states.c.py:40
                return f'{comp.e0.path.name}[{comp.e1.value}:{comp.e2.value}]' ## src/hardware_indep/parser_generate_states.c.py:41
            if 'expr' not in comp: ## src/hardware_indep/parser_generate_states.c.py:42
                return f'{comp.path.name}' ## src/hardware_indep/parser_generate_states.c.py:43
            if 'path' in comp.expr and comp.expr.path.name == "standard_metadata": ## src/hardware_indep/parser_generate_states.c.py:44
                return f'all_metadatas.{comp.member}/{comp.urtype.size}' ## src/hardware_indep/parser_generate_states.c.py:45
            if comp.expr.node_type == 'ArrayIndex': ## src/hardware_indep/parser_generate_states.c.py:46
                return f'{comp.expr.left.expr.path.name}.{comp.expr.left.member}[{comp.expr.right.value}]/{comp.urtype.size}' ## src/hardware_indep/parser_generate_states.c.py:47
            if 'member' in comp.expr: ## src/hardware_indep/parser_generate_states.c.py:48
                return f'{comp.expr.member}.{comp.member}/{comp.urtype.size}' ## src/hardware_indep/parser_generate_states.c.py:49
            return f'{comp.expr.path.name}/{comp.urtype.size}' ## src/hardware_indep/parser_generate_states.c.py:50
        if 'select' in state.selectExpression: ## src/hardware_indep/parser_generate_states.c.py:52
            keys = [get_name(comp) for comp in state.selectExpression.select.components] ## src/hardware_indep/parser_generate_states.c.py:53
            prev_conds = [] ## src/hardware_indep/parser_generate_states.c.py:54
            for case in state.selectExpression.selectCases: ## src/hardware_indep/parser_generate_states.c.py:55
                infos = [f'{key}={value}' for key, value in zip(keys, get_elems(case.keyset)) if value != '_'] ## src/hardware_indep/parser_generate_states.c.py:56
                next_state_name = case.state.path.name ## src/hardware_indep/parser_generate_states.c.py:57
                next_state = parser.states.get(next_state_name) ## src/hardware_indep/parser_generate_states.c.py:58
                if next_state.Node_ID in new_known_states: ## src/hardware_indep/parser_generate_states.c.py:60
                    yield([f'state-already-visited:{state.name}']) ## src/hardware_indep/parser_generate_states.c.py:61
                    continue ## src/hardware_indep/parser_generate_states.c.py:62
                for info in output_states(next_state, new_known_states): ## src/hardware_indep/parser_generate_states.c.py:64
                    yield(infos + prev_conds + info) ## src/hardware_indep/parser_generate_states.c.py:65
                if len(infos) == 1: ## src/hardware_indep/parser_generate_states.c.py:67
                    prev_conds.append(infos[0].replace('=', '≠')) ## src/hardware_indep/parser_generate_states.c.py:68
                elif len(infos) > 1: ## src/hardware_indep/parser_generate_states.c.py:69
                    keys = set(re.sub(r"[.].*", "", info) for info in infos) ## src/hardware_indep/parser_generate_states.c.py:70
                    if len(keys) == 1: ## src/hardware_indep/parser_generate_states.c.py:71
                        joined_infos = NOT_separator.join(re.sub(r"[^.]*[.]", ".", info) for info in infos) ## src/hardware_indep/parser_generate_states.c.py:72
                        prev_conds.append(f'{list(keys)[0]}.NOT({joined_infos})') ## src/hardware_indep/parser_generate_states.c.py:73
                    else: ## src/hardware_indep/parser_generate_states.c.py:74
                        joined_infos = NOT_separator.join(infos) ## src/hardware_indep/parser_generate_states.c.py:75
                        prev_conds.append(f'NOT({joined_infos})') ## src/hardware_indep/parser_generate_states.c.py:76
        else: ## src/hardware_indep/parser_generate_states.c.py:77
            next_state_name = state.selectExpression.path.name ## src/hardware_indep/parser_generate_states.c.py:78
            next_state = parser.states.get(next_state_name) ## src/hardware_indep/parser_generate_states.c.py:79
            if next_state.Node_ID in new_known_states: ## src/hardware_indep/parser_generate_states.c.py:81
                yield([f'state-already-visited:{state.name}']) ## src/hardware_indep/parser_generate_states.c.py:82
                return ## src/hardware_indep/parser_generate_states.c.py:83
            for info in output_states(next_state, known_states): ## src/hardware_indep/parser_generate_states.c.py:85
                yield(info) ## src/hardware_indep/parser_generate_states.c.py:86
    infos = output_states(parser.states.get('start'), set()) ## src/hardware_indep/parser_generate_states.c.py:89
    cuco = compiler_common.current_compilation ## src/hardware_indep/parser_generate_states.c.py:91
    targetdir = os.path.dirname(cuco['to']) ## src/hardware_indep/parser_generate_states.c.py:92
    def simplify_infos(txts): ## src/hardware_indep/parser_generate_states.c.py:94
        def is_ok(txt, keys): ## src/hardware_indep/parser_generate_states.c.py:95
            key, *rest = txt.split("≠") ## src/hardware_indep/parser_generate_states.c.py:96
            return rest == [] or key not in keys ## src/hardware_indep/parser_generate_states.c.py:97
        keys = set(txt.split("=")[0] for txt in txts if 'NOT' not in txt) ## src/hardware_indep/parser_generate_states.c.py:99
        return [txt for txt in txts if 'NOT' in txts or is_ok(txt, keys)] ## src/hardware_indep/parser_generate_states.c.py:100
    short_infos = [simplify_infos(info) for info in infos if info != []] ## src/hardware_indep/parser_generate_states.c.py:102
    if short_infos != []: ## src/hardware_indep/parser_generate_states.c.py:104
        with open(os.path.join(targetdir, '..', f'parser_state_transitions_{parser.name}_v1.txt'), 'w', encoding='utf8') as file: ## src/hardware_indep/parser_generate_states.c.py:105
            file.write('accepted: \n') ## src/hardware_indep/parser_generate_states.c.py:106
            for info in (info for info in short_infos if 'rejected' not in info): ## src/hardware_indep/parser_generate_states.c.py:107
                file.write('    ' + ' '.join(info) + '\n') ## src/hardware_indep/parser_generate_states.c.py:108
            file.write('\n') ## src/hardware_indep/parser_generate_states.c.py:109
            if len(list((info for info in short_infos if 'rejected' in info))) != 0: ## src/hardware_indep/parser_generate_states.c.py:111
                file.write('rejected: \n') ## src/hardware_indep/parser_generate_states.c.py:112
                for info in (info for info in short_infos if 'rejected' in info): ## src/hardware_indep/parser_generate_states.c.py:113
                    file.write('    ' + ' '.join(info) + '\n') ## src/hardware_indep/parser_generate_states.c.py:114
    # v2 ## src/hardware_indep/parser_generate_states.c.py:116
    if short_infos != []: ## src/hardware_indep/parser_generate_states.c.py:117
        with open(os.path.join(targetdir, '..', f'parser_state_transitions_{parser.name}_v2.txt'), 'w', encoding='utf8') as file: ## src/hardware_indep/parser_generate_states.c.py:118
            file.write('accepted: \n') ## src/hardware_indep/parser_generate_states.c.py:119
            collected = [] ## src/hardware_indep/parser_generate_states.c.py:120
            for info in (info for info in short_infos if 'rejected' not in info): ## src/hardware_indep/parser_generate_states.c.py:121
                out_info = info ## src/hardware_indep/parser_generate_states.c.py:122
                for idx in range(len(info), 1, -1): ## src/hardware_indep/parser_generate_states.c.py:123
                    pre = info[:idx] ## src/hardware_indep/parser_generate_states.c.py:124
                    if pre in collected: ## src/hardware_indep/parser_generate_states.c.py:125
                        collected_idx = collected.index(pre) ## src/hardware_indep/parser_generate_states.c.py:126
                        out_info = [f'@{collected_idx+1:04}'] + simplify_infos(info[idx:]) ## src/hardware_indep/parser_generate_states.c.py:127
                        break ## src/hardware_indep/parser_generate_states.c.py:128
                this_except_last = info[:-1] ## src/hardware_indep/parser_generate_states.c.py:130
                collected.append(this_except_last) ## src/hardware_indep/parser_generate_states.c.py:131
                file.write(f'    {len(collected):04} ' + ' '.join(out_info) + '\n') ## src/hardware_indep/parser_generate_states.c.py:133
            file.write('\n') ## src/hardware_indep/parser_generate_states.c.py:134
            if len(list((info for info in short_infos if 'rejected' in info))) != 0: ## src/hardware_indep/parser_generate_states.c.py:136
                file.write('rejected: \n') ## src/hardware_indep/parser_generate_states.c.py:137
                for info in (info for info in short_infos if 'rejected' in info): ## src/hardware_indep/parser_generate_states.c.py:138
                    file.write('    ' + ' '.join(info) + '\n') ## src/hardware_indep/parser_generate_states.c.py:139
    # v3 ## src/hardware_indep/parser_generate_states.c.py:141
    if short_infos != []: ## src/hardware_indep/parser_generate_states.c.py:142
        with open(os.path.join(targetdir, '..', f'parser_state_transitions_{parser.name}_v3.txt'), 'w', encoding='utf8') as file: ## src/hardware_indep/parser_generate_states.c.py:143
            file.write('accepted: \n') ## src/hardware_indep/parser_generate_states.c.py:144
            collected = {} ## src/hardware_indep/parser_generate_states.c.py:145
            curr_idx = 1 ## src/hardware_indep/parser_generate_states.c.py:146
            for info in (info for info in short_infos if 'rejected' not in info): ## src/hardware_indep/parser_generate_states.c.py:147
                out_info = info ## src/hardware_indep/parser_generate_states.c.py:148
                for idx in range(len(info), 1, -1): ## src/hardware_indep/parser_generate_states.c.py:149
                    pre = tuple(info[:idx]) ## src/hardware_indep/parser_generate_states.c.py:150
                    if pre in collected: ## src/hardware_indep/parser_generate_states.c.py:151
                        collected_idx = collected[pre] ## src/hardware_indep/parser_generate_states.c.py:152
                        out_info = [f'@{collected_idx}'] + simplify_infos(info[idx:]) ## src/hardware_indep/parser_generate_states.c.py:153
                        break ## src/hardware_indep/parser_generate_states.c.py:154
                    else: ## src/hardware_indep/parser_generate_states.c.py:155
                        collected[tuple(pre)] = f'{curr_idx:04}-{len(info)+1-idx}' ## src/hardware_indep/parser_generate_states.c.py:156
                file.write(f'    {curr_idx:04} ' + ' '.join(out_info) + '\n') ## src/hardware_indep/parser_generate_states.c.py:158
                curr_idx = curr_idx + 1 ## src/hardware_indep/parser_generate_states.c.py:159
            file.write('\n') ## src/hardware_indep/parser_generate_states.c.py:160
            if len(list((info for info in short_infos if 'rejected' in info))) != 0: ## src/hardware_indep/parser_generate_states.c.py:162
                file.write('rejected: \n') ## src/hardware_indep/parser_generate_states.c.py:163
                for info in (info for info in short_infos if 'rejected' in info): ## src/hardware_indep/parser_generate_states.c.py:164
                    file.write('    ' + ' '.join(info) + '\n') ## src/hardware_indep/parser_generate_states.c.py:165
    def final_simplify_infos(in_infos, is_reject, postfixes): ## src/hardware_indep/parser_generate_states.c.py:168
        prefixes = {} ## src/hardware_indep/parser_generate_states.c.py:169
        curr_idx = 1 ## src/hardware_indep/parser_generate_states.c.py:170
        infos2 = [] ## src/hardware_indep/parser_generate_states.c.py:171
        for info in (info for info in in_infos if ('rejected' in info) == is_reject): ## src/hardware_indep/parser_generate_states.c.py:172
            if tuple(info) in prefixes: ## src/hardware_indep/parser_generate_states.c.py:173
                continue ## src/hardware_indep/parser_generate_states.c.py:174
            out_info = info ## src/hardware_indep/parser_generate_states.c.py:176
            for idx in range(len(info), 1, -1): ## src/hardware_indep/parser_generate_states.c.py:177
                pre = tuple(info[:idx]) ## src/hardware_indep/parser_generate_states.c.py:178
                if pre in prefixes: ## src/hardware_indep/parser_generate_states.c.py:179
                    prefixes_idx = prefixes[pre] ## src/hardware_indep/parser_generate_states.c.py:180
                    out_info = [f'@{prefixes_idx}'] + simplify_infos(info[idx:]) ## src/hardware_indep/parser_generate_states.c.py:181
                    break ## src/hardware_indep/parser_generate_states.c.py:182
                else: ## src/hardware_indep/parser_generate_states.c.py:183
                    prefixes[tuple(pre)] = f'{curr_idx:04}+{idx}-{len(info)+1-idx}' ## src/hardware_indep/parser_generate_states.c.py:184
            infos2.append(out_info) ## src/hardware_indep/parser_generate_states.c.py:186
            curr_idx = curr_idx + 1 ## src/hardware_indep/parser_generate_states.c.py:187
        infos3 = [] ## src/hardware_indep/parser_generate_states.c.py:189
        postfix_idx = len(postfixes) + 1 ## src/hardware_indep/parser_generate_states.c.py:190
        for info in infos2: ## src/hardware_indep/parser_generate_states.c.py:191
            if '@' not in info[0] or len(info) <= 2: ## src/hardware_indep/parser_generate_states.c.py:192
                infos3.append(info) ## src/hardware_indep/parser_generate_states.c.py:193
                continue ## src/hardware_indep/parser_generate_states.c.py:194
            postfix = tuple(info[1:]) ## src/hardware_indep/parser_generate_states.c.py:196
            if postfix not in postfixes: ## src/hardware_indep/parser_generate_states.c.py:197
                postfixes[postfix] = postfix_idx ## src/hardware_indep/parser_generate_states.c.py:198
                postfix_idx = postfix_idx + 1 ## src/hardware_indep/parser_generate_states.c.py:199
            infos3.append([info[0], f'post@{postfixes[postfix]:04}']) ## src/hardware_indep/parser_generate_states.c.py:201
        return infos3 ## src/hardware_indep/parser_generate_states.c.py:203
    def not_prefix_len(txts): ## src/hardware_indep/parser_generate_states.c.py:205
        return -len(list(takewhile(lambda txt: all(not txt.startswith(pre) for pre in ('@', 'post@')), txts))) ## src/hardware_indep/parser_generate_states.c.py:206
    def info_sorter(infos): ## src/hardware_indep/parser_generate_states.c.py:208
        return sorted(enumerate(infos), key=lambda keyval: (not_prefix_len(keyval[1]), len(''.join(keyval[1])), keyval[0])) ## src/hardware_indep/parser_generate_states.c.py:209
    # v4 ## src/hardware_indep/parser_generate_states.c.py:211
    if short_infos != []: ## src/hardware_indep/parser_generate_states.c.py:212
        postfixes = {} ## src/hardware_indep/parser_generate_states.c.py:213
        accepts = final_simplify_infos(short_infos, False, postfixes) ## src/hardware_indep/parser_generate_states.c.py:214
        rejects = final_simplify_infos(short_infos, True, postfixes) ## src/hardware_indep/parser_generate_states.c.py:215
        with open(os.path.join(targetdir, '..', f'parser_state_transitions_{parser.name}_v4.txt'), 'w', encoding='utf8') as file: ## src/hardware_indep/parser_generate_states.c.py:217
            file.write('postfixes: \n') ## src/hardware_indep/parser_generate_states.c.py:218
            for postfix, idx in sorted(postfixes.items(), key=lambda keyval: (-len(keyval[0]), -len(''.join(keyval[0])), keyval[1])): ## src/hardware_indep/parser_generate_states.c.py:219
                file.write(f'    post@{idx:04} {" ".join(postfix)}\n') ## src/hardware_indep/parser_generate_states.c.py:220
            file.write('\n') ## src/hardware_indep/parser_generate_states.c.py:221
            file.write('accepted: \n') ## src/hardware_indep/parser_generate_states.c.py:223
            for idx, info in info_sorter(accepts): ## src/hardware_indep/parser_generate_states.c.py:224
                file.write(f'    {idx+1:04} {" ".join(info)}\n') ## src/hardware_indep/parser_generate_states.c.py:225
            file.write('\n') ## src/hardware_indep/parser_generate_states.c.py:226
            if len(list((info for info in short_infos if 'rejected' in info))) != 0: ## src/hardware_indep/parser_generate_states.c.py:228
                file.write('rejected: \n') ## src/hardware_indep/parser_generate_states.c.py:229
                for idx, info in info_sorter(rejects): ## src/hardware_indep/parser_generate_states.c.py:230
                    file.write(f'    {idx+1:04} {" ".join(info)}\n') ## src/hardware_indep/parser_generate_states.c.py:231
