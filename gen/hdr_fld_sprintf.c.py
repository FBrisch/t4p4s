
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/hdr_fld_sprintf.c.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/hdr_fld_sprintf.c.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/hdr_fld_sprintf.c.py: via hardware_indep/hdr_fld_sprintf.c.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

# SPDX-License-Identifier: Apache-2.0 ## src/hardware_indep/hdr_fld_sprintf.c.py:2
# Copyright 2016 Eotvos Lorand University, Budapest, Hungary ## src/hardware_indep/hdr_fld_sprintf.c.py:3

generated_code += add_code("")
from compiler_log_warnings_errors import addError, addWarning ## src/hardware_indep/hdr_fld_sprintf.c.py:5
from utils.codegen import format_expr, format_type, format_statement, format_declaration, to_c_bool ## src/hardware_indep/hdr_fld_sprintf.c.py:6
from compiler_common import statement_buffer_value, generate_var_name, get_hdr_name, unique_everseen ## src/hardware_indep/hdr_fld_sprintf.c.py:7

generated_code += add_code("")
import functools ## src/hardware_indep/hdr_fld_sprintf.c.py:9

generated_code += add_code("")
generated_code += add_code(" #include \"dpdk_lib.h\"", lineno = 11)
generated_code += add_code(" #include \"util_packet.h\"", lineno = 12)
generated_code += add_code(" #include \"gen_include.h\"", lineno = 13)
generated_code += add_code(" #include \"hdr_fld.h\"", lineno = 14)
generated_code += add_code(" #include \"hdr_fld_sprintf.h\"", lineno = 15)

generated_code += add_code("")
field_size_print_limit = 12 ## src/hardware_indep/hdr_fld_sprintf.c.py:19

generated_code += add_code("")
generated_code += add_code(" char* sprintf_hdr_general(char* out, int field_count, uint32_t vals[], uint8_t* ptrs[], int offsets[], int sizes[], int vw_sizes[], const char*const fld_short_names[]) {", lineno = 20)
generated_code += add_code("     #ifdef T4P4S_DEBUG", indent_level = 1, lineno = 21)
generated_code += add_code("         for (int idx = 0; idx < field_count; ++idx) {", indent_level = 2, lineno = 22)
generated_code += add_code("             const char* sep_space = idx != field_count - 1 ? \" \" : \"\";", indent_level = 3, lineno = 23)
generated_code += add_code("             if (sizes[idx] <= 32 && vw_sizes[idx] == NO_VW_FIELD_PRESENT) {", indent_level = 3, lineno = 24)
generated_code += add_code("                 bool is_aligned = sizes[idx] % 8 == 0 && offsets[idx] % 8 == 0;", indent_level = 4, lineno = 25)
generated_code += add_code("                 bool fld_is_too_large = sizes[idx] < 32 && vals[idx] > 1 << sizes[idx];", indent_level = 4, lineno = 26)
generated_code += add_code("                 const char* fld_is_too_large_txt = fld_is_too_large ? T4LIT(!too large!,error) : \"\";", indent_level = 4, lineno = 27)
generated_code += add_code("                 if (vals[idx] > 9) {", indent_level = 4, lineno = 28)
generated_code += add_code("                     const char* fmt8 = \".\" T4LIT(%s,field) \"/\" T4LIT(%d) \"%s=%s\" T4LIT(%d) \"=0x\" T4LIT(%02x,bytes) \"%s\";", indent_level = 5, lineno = 29)
generated_code += add_code("                     const char* fmt16 = \".\" T4LIT(%s,field) \"/\" T4LIT(%d) \"%s=%s\" T4LIT(%d) \"=0x\" T4LIT(%04x,bytes) \"%s\";", indent_level = 5, lineno = 30)
generated_code += add_code("                     const char* fmt32 = \".\" T4LIT(%s,field) \"/\" T4LIT(%d) \"%s=%s\" T4LIT(%d) \"=0x\" T4LIT(%08x,bytes) \"%s\";", indent_level = 5, lineno = 31)
generated_code += add_code("                     out += sprintf(out, sizes[idx] > 16 ? fmt32 : sizes[idx] > 8 ? fmt16 : fmt8,", indent_level = 5, lineno = 32)
generated_code += add_code("                                    fld_short_names[idx],", indent_level = 5, lineno = 33)
generated_code += add_code("                                    sizes[idx] / (is_aligned ? 8 : 1), is_aligned ? \"B\" : \"b\",", indent_level = 5, lineno = 34)
generated_code += add_code("                                    fld_is_too_large_txt, vals[idx], vals[idx], sep_space);", indent_level = 5, lineno = 35)
generated_code += add_code("                 } else {", indent_level = 5, lineno = 36)
generated_code += add_code("                     out += sprintf(out, \".\" T4LIT(%s,field) \"/\" T4LIT(%d) \"%s=%s\" T4LIT(%d) \"%s\",", indent_level = 5, lineno = 37)
generated_code += add_code("                                    fld_short_names[idx],", indent_level = 5, lineno = 38)
generated_code += add_code("                                    sizes[idx] / (is_aligned ? 8 : 1), is_aligned ? \"B\" : \"b\",", indent_level = 5, lineno = 39)
generated_code += add_code("                                    fld_is_too_large_txt, vals[idx], sep_space);", indent_level = 5, lineno = 40)
generated_code += add_code("                 }", indent_level = 4, lineno = 41)
generated_code += add_code("             } else {", indent_level = 4, lineno = 42)
generated_code += add_code("                 bool is_vw = vw_sizes[idx] != NO_VW_FIELD_PRESENT;", indent_level = 4, lineno = 43)
generated_code += add_code("                 int size = is_vw ? vw_sizes[idx] : sizes[idx];", indent_level = 4, lineno = 44)
generated_code += add_code("                 out += sprintf(out, \".\" T4LIT(%s,field) \"/%s\" T4LIT(%d) \"%s=\" T4COLOR(T4LIGHT_bytes),", indent_level = 4, lineno = 45)
generated_code += add_code("                                fld_short_names[idx],", indent_level = 4, lineno = 46)
generated_code += add_code("                                is_vw ? \"vw\" : \"\", size / (size % 8 == 0 ? 8 : 1), size % 8 == 0 ? \"B\" : \"b\");", indent_level = 4, lineno = 47)
generated_code += add_code('                 out += dbg_sprint_bytes_limit(out, ptrs[idx], size/8, {}, "_");'.format(field_size_print_limit), indent_level = 4, lineno = 48)
generated_code += add_code("                 out += sprintf(out, T4COLOR(T4LIGHT_off) \"%s\", sep_space);", indent_level = 4, lineno = 49)
generated_code += add_code("             }", indent_level = 3, lineno = 50)
generated_code += add_code("         }", indent_level = 2, lineno = 51)
generated_code += add_code("     #endif", indent_level = 1, lineno = 52)
generated_code += add_code("     return out;", indent_level = 1, lineno = 53)
generated_code += add_code(" }", lineno = 54)
generated_code += add_code("", lineno = 55)

generated_code += add_code("")
for hdr in unique_everseen(hlir.header_instances): ## src/hardware_indep/hdr_fld_sprintf.c.py:59
    generated_code += add_code(' const char* detailed_sprintf_hdr_{}(char* out, packet_descriptor_t* pd, header_descriptor_t* hdr) {{'.format(hdr.name), lineno = 59)
    field_count = len(hdr.urtype.fields) ## src/hardware_indep/hdr_fld_sprintf.c.py:61
    generated_code += add_code('     uint32_t vals[{}];'.format(field_count), indent_level = 1, lineno = 61)
    generated_code += add_code('     uint8_t* ptrs[{}];'.format(field_count), indent_level = 1, lineno = 62)
    sizes = ", ".join(f'{fld.size}' for fld in hdr.urtype.fields) ## src/hardware_indep/hdr_fld_sprintf.c.py:64
    offsets = ", ".join(f'{fld.offset}' for fld in hdr.urtype.fields) ## src/hardware_indep/hdr_fld_sprintf.c.py:65
    vw_sizes = ", ".join('NO_VW_FIELD_PRESENT' if not fld.is_vw else f'hdr->vw_size' for fld in hdr.urtype.fields) ## src/hardware_indep/hdr_fld_sprintf.c.py:66
    names = ", ".join(f'"{fld.short_name}"' for fld in hdr.urtype.fields) ## src/hardware_indep/hdr_fld_sprintf.c.py:67
    generated_code += add_code('     int offsets[{}] = {{ {} }};'.format(field_count, offsets), indent_level = 1, lineno = 67)
    generated_code += add_code('     int sizes[{}] = {{ {} }};'.format(field_count, sizes), indent_level = 1, lineno = 68)
    generated_code += add_code('     int vw_sizes[{}] = {{ {} }};'.format(field_count, vw_sizes), indent_level = 1, lineno = 69)
    generated_code += add_code('     const char*const fld_short_names[{}] = {{ {} }};'.format(field_count, names), indent_level = 1, lineno = 70)
    for idx, fld in enumerate(hdr.urtype.fields): ## src/hardware_indep/hdr_fld_sprintf.c.py:72
        if fld.size <= 32 and not fld.is_vw: ## src/hardware_indep/hdr_fld_sprintf.c.py:73
            generated_code += add_code('     vals[{}] = GET32(src_pkt(pd), FLD({}, {}));  // {}.{}/{}b'.format(idx, hdr.name, fld.name, hdr.name, fld.name, fld.size), indent_level = 1, lineno = 73)
        else: ## src/hardware_indep/hdr_fld_sprintf.c.py:75
            generated_code += add_code('     ptrs[{}] = hdr->pointer + fld_infos[FLD({},{})].byte_offset;  // {}.{}/{}B'.format(idx, hdr.name, fld.name, hdr.name, fld.name, (fld.size+7)//8), indent_level = 1, lineno = 75)
    generated_code += add_code('     return sprintf_hdr_general(out, {}, vals, ptrs, offsets, sizes, vw_sizes, fld_short_names);'.format(field_count), indent_level = 1, lineno = 76)
    generated_code += add_code(" }", lineno = 77)
    generated_code += add_code("", lineno = 78)
generated_code += add_code(" const char* sprintf_hdr(char* out, packet_descriptor_t* pd, header_descriptor_t* hdr) {", lineno = 81)
generated_code += add_code("     #ifdef T4P4S_DEBUG", indent_level = 1, lineno = 82)
generated_code += add_code("         const char* name = hdr_infos[hdr->type].name;", indent_level = 2, lineno = 83)
for hdr in unique_everseen(hlir.header_instances): ## src/hardware_indep/hdr_fld_sprintf.c.py:85
    field_count = len(hdr.urtype.fields) ## src/hardware_indep/hdr_fld_sprintf.c.py:86
    generated_code += add_code('         if (!strcmp("{}", name))    return detailed_sprintf_hdr_{}(out, pd, hdr);'.format(hdr.name, hdr.name), indent_level = 2, lineno = 86)
generated_code += add_code("     #endif", indent_level = 1, lineno = 87)
generated_code += add_code("     return NULL; // should never happen", indent_level = 1, lineno = 88)
generated_code += add_code(" }", lineno = 89)
generated_code += add_code("", lineno = 90)
