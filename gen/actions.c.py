
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/actions.c.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/actions.c.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/actions.c.py: via hardware_indep/actions.c.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

# SPDX-License-Identifier: Apache-2.0 ## src/hardware_indep/actions.c.py:2
# Copyright 2016 Eotvos Lorand University, Budapest, Hungary ## src/hardware_indep/actions.c.py:3

generated_code += add_code("")
from compiler_log_warnings_errors import addError, addWarning ## src/hardware_indep/actions.c.py:5
from utils.codegen import format_declaration, format_statement, format_expr, format_type, get_method_call_env ## src/hardware_indep/actions.c.py:6
from compiler_common import types, unique_everseen ## src/hardware_indep/actions.c.py:7

generated_code += add_code("")
generated_code += add_code(" #include <unistd.h>", lineno = 8)

generated_code += add_code("")
generated_code += add_code(" #include \"dpdk_lib.h\"", lineno = 10)
generated_code += add_code(" #include \"actions.h\"", lineno = 11)
generated_code += add_code(" #include \"util_debug.h\"", lineno = 12)
generated_code += add_code(" #include \"util_packet.h\"", lineno = 13)

generated_code += add_code("")
generated_code += add_code(" extern ctrl_plane_backend bg;", lineno = 15)

generated_code += add_code("")
################################################################################ ## src/hardware_indep/actions.c.py:18

generated_code += add_code("")
generated_code += add_code(" #define STD_DIGEST_RECEIVER_ID 1024", lineno = 20)

generated_code += add_code("")
all_digests = hlir.all_nodes.by_type('MethodCallStatement').map('methodCall').filter(lambda n: 'path' in n.method and n.method.path.name=='digest') ## src/hardware_indep/actions.c.py:23
for _, mcall in {(dig.method.path.name, ','.join(dig.typeArguments.map(format_type))): dig for dig in all_digests}.items(): ## src/hardware_indep/actions.c.py:24
    digest = mcall.typeArguments[0] ## src/hardware_indep/actions.c.py:25
    funname = f'{mcall.method.path.name}__{digest.path.name}' ## src/hardware_indep/actions.c.py:26
    generated_code += add_code(' {} {}(uint32_t /* ignored */ receiver, ctrl_plane_digest cpd, SHORT_STDPARAMS) {{'.format(format_type(mcall.urtype), funname), lineno = 27)
    generated_code += add_code("     debug(\" \" T4LIT(<<<<,outgoing) \" \" T4LIT(Sending digest,outgoing) \" to port \" T4LIT(%d,port) \" using extern \" T4LIT(extern_Digest_pack,extern) \" for \" T4LIT(cpd,extern) \"\\n\", STD_DIGEST_RECEIVER_ID);", indent_level = 1, lineno = 28)
    generated_code += add_code("    /* ctrl_plane_digest cpd = create_digest(bg, \"digest\");", indent_level = 1, lineno = 30)
    for fld in digest.urtype.fields: ## src/hardware_indep/actions.c.py:33
        if fld.urtype.size > 32: ## src/hardware_indep/actions.c.py:34
            generated_code += add_code('     dbg_bytes(digest.{}, ({}+7)/8, "       : {}/" T4LIT({}) " = ");'.format(fld.name, fld.urtype.size, fld.name, fld.urtype.size), indent_level = 1, lineno = 34)
            generated_code += add_code('     add_digest_field(cpd, digest.{}, {});'.format(fld.name, fld.urtype.size), indent_level = 1, lineno = 35)
        else: ## src/hardware_indep/actions.c.py:37
            generated_code += add_code('     debug("       : " T4LIT(ingress_port,field) "/" T4LIT({}) " = " T4LIT(%x) "\\n", digest.{});'.format(fld.urtype.size, fld.name), indent_level = 1, lineno = 37)
            generated_code += add_code('     add_digest_field(cpd, &(digest.{}), {});'.format(fld.name, fld.urtype.size), indent_level = 1, lineno = 38)
    generated_code += add_code(" */", indent_level = 1, lineno = 39)
    generated_code += add_code(" #ifdef T4P4S_P4RT", indent_level = 1, lineno = 40)
    generated_code += add_code("        // dev_mgr_send_digest(dev_mgr_ptr, (struct p4_digest*)(((Digest_t*)cpd)->ctrl_plane_digest), STD_DIGEST_RECEIVER_ID);", indent_level = 2, lineno = 41)
    generated_code += add_code(" #endif", indent_level = 1, lineno = 42)
    generated_code += add_code("     send_digest(bg, cpd, STD_DIGEST_RECEIVER_ID);", indent_level = 1, lineno = 43)
    generated_code += add_code("     sleep_millis(DIGEST_SLEEP_MILLIS);", indent_level = 1, lineno = 44)
    generated_code += add_code(" }", lineno = 45)
    generated_code += add_code("", lineno = 46)
generated_code += add_code(" const char* action_names[] = {", lineno = 49)
for table in hlir.tables: ## src/hardware_indep/actions.c.py:51
    for action in unique_everseen(table.actions): ## src/hardware_indep/actions.c.py:52
        generated_code += add_code('     "{}",'.format(action.action_object.name), indent_level = 1, lineno = 52)
generated_code += add_code(" };", lineno = 53)
generated_code += add_code("", lineno = 54)

generated_code += add_code("")
generated_code += add_code(" const char* action_canonical_names[] = {", lineno = 56)
for table in hlir.tables: ## src/hardware_indep/actions.c.py:58
    for action in unique_everseen(table.actions): ## src/hardware_indep/actions.c.py:59
        generated_code += add_code('     "{}",'.format(action.action_object.canonical_name), indent_level = 1, lineno = 59)
generated_code += add_code(" };", lineno = 60)
generated_code += add_code("", lineno = 61)

generated_code += add_code("")
generated_code += add_code(" const char* action_short_names[] = {", lineno = 63)
for table in hlir.tables: ## src/hardware_indep/actions.c.py:65
    for action in unique_everseen(table.actions): ## src/hardware_indep/actions.c.py:66
        generated_code += add_code('     "{}",'.format(action.action_object.short_name), indent_level = 1, lineno = 66)
generated_code += add_code(" };", lineno = 67)
generated_code += add_code("", lineno = 68)

generated_code += add_code("")
