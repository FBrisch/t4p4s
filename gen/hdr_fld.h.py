
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/hdr_fld.h.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/hdr_fld.h.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/hdr_fld.h.py: via hardware_indep/hdr_fld.h.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

# SPDX-License-Identifier: Apache-2.0 ## src/hardware_indep/hdr_fld.h.py:2
# Copyright 2021 Eotvos Lorand University, Budapest, Hungary ## src/hardware_indep/hdr_fld.h.py:3

generated_code += add_code("")
from utils.codegen import format_type ## src/hardware_indep/hdr_fld.h.py:5
from compiler_common import unique_everseen ## src/hardware_indep/hdr_fld.h.py:6

generated_code += add_code("")
generated_code += add_code(" #pragma once", lineno = 7)

generated_code += add_code("")
generated_code += add_code(" #include \"common_enums.h\"", lineno = 9)

generated_code += add_code("")
generated_code += add_code(" #define HDRT(hdrt)  HDRT_ ## hdrt", lineno = 11)

generated_code += add_code("")
# for hdr in unique_everseen(hdr for struct in hlir.news.data for hdr in struct.fields.map('urtype') if hdr.node_type == 'Type_Header'): ## src/hardware_indep/hdr_fld.h.py:16
for hdr in unique_everseen(hlir.headers.map('urtype').filterfalse('is_metadata')): ## src/hardware_indep/hdr_fld.h.py:17
    generated_code += add_code(" typedef struct {", lineno = 17)
    for fld in hdr.fields: ## src/hardware_indep/hdr_fld.h.py:19
        generated_code += add_code('     {};'.format(format_type(fld.type, addon=fld.name)), indent_level = 1, lineno = 19)
    generated_code += add_code(' }} __attribute__((packed)) HDRT({});'.format(hdr.urtype.name), lineno = 20)
    generated_code += add_code("", lineno = 21)
for struct in hlir.news.data: ## src/hardware_indep/hdr_fld.h.py:24
    name = re.sub('_t$', '', struct.name) ## src/hardware_indep/hdr_fld.h.py:25
    generated_code += add_code(" typedef struct {", lineno = 26)
    for field in struct.fields: ## src/hardware_indep/hdr_fld.h.py:28
        generated_code += add_code('     {};'.format(format_type(field.urtype, field.name)), indent_level = 1, lineno = 28)
    generated_code += add_code(' }} __attribute__((packed)) {}_t;'.format(name), lineno = 29)
    generated_code += add_code("", lineno = 30)
