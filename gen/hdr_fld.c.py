
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/hdr_fld.c.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/hdr_fld.c.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/hdr_fld.c.py: via hardware_indep/hdr_fld.c.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

# SPDX-License-Identifier: Apache-2.0 ## src/hardware_indep/hdr_fld.c.py:2
# Copyright 2016 Eotvos Lorand University, Budapest, Hungary ## src/hardware_indep/hdr_fld.c.py:3

generated_code += add_code("")
from compiler_log_warnings_errors import addError, addWarning ## src/hardware_indep/hdr_fld.c.py:5
from utils.codegen import format_expr, format_type, format_statement, format_declaration, to_c_bool ## src/hardware_indep/hdr_fld.c.py:6
from compiler_common import statement_buffer_value, generate_var_name, get_hdr_name, unique_everseen ## src/hardware_indep/hdr_fld.c.py:7

generated_code += add_code("")
import functools ## src/hardware_indep/hdr_fld.c.py:9

generated_code += add_code("")
generated_code += add_code(" #include \"dpdk_lib.h\"", lineno = 11)
generated_code += add_code(" #include \"util_packet.h\"", lineno = 12)
generated_code += add_code(" #include \"gen_include.h\"", lineno = 13)
generated_code += add_code(" #include \"hdr_fld.h\"", lineno = 14)
generated_code += add_code(" #include \"hdr_fld_sprintf.h\"", lineno = 15)

generated_code += add_code("")
generated_code += add_code(" const char*const header_instance_names[HEADER_COUNT] = {", lineno = 18)
for hdr in hlir.header_instances: ## src/hardware_indep/hdr_fld.c.py:20
    generated_code += add_code('     "{}",'.format(hdr.name), indent_level = 1, lineno = 20)
generated_code += add_code(" };", lineno = 21)
generated_code += add_code("", lineno = 22)

generated_code += add_code("")
generated_code += add_code(" const char*const field_names[FIELD_COUNT] = {", lineno = 24)
for hdr in hlir.header_instances: ## src/hardware_indep/hdr_fld.c.py:26
    generated_code += add_code('     // {}'.format(hdr.name), indent_level = 1, lineno = 26)
    for fld in hdr.urtype.fields: ## src/hardware_indep/hdr_fld.c.py:28
        generated_code += add_code('         "{}", // {}.{}'.format(fld.short_name, hdr.name, fld.name), indent_level = 1, lineno = 28)
generated_code += add_code(" };", lineno = 29)
generated_code += add_code("", lineno = 30)

generated_code += add_code("")
generated_code += add_code(" const hdr_info_t hdr_infos[HEADER_COUNT] = {", lineno = 33)
byte_offsets = ["0"] ## src/hardware_indep/hdr_fld.c.py:35
fldidx = 0 ## src/hardware_indep/hdr_fld.c.py:36
for idx, hdr in enumerate(hlir.header_instances): ## src/hardware_indep/hdr_fld.c.py:37
    hdrt = hdr.urtype ## src/hardware_indep/hdr_fld.c.py:38
    flds = hdrt.fields ## src/hardware_indep/hdr_fld.c.py:39
    size = hdrt.size if 'size' in hdrt else 0 ## src/hardware_indep/hdr_fld.c.py:41
    byte_width = hdrt('byte_width', 0) ## src/hardware_indep/hdr_fld.c.py:42
    vw = list(hdr.urtype.fields.filter(lambda fld: fld('is_vw', False))) ## src/hardware_indep/hdr_fld.c.py:44
    vwfld_name = f'FLD({hdr.name},{vw[0].name})' if vw else 'NO_VW_FIELD_PRESENT' ## src/hardware_indep/hdr_fld.c.py:45
    vw_size = hdr.urtype.vw_fld.urtype.size if vw else 0 ## src/hardware_indep/hdr_fld.c.py:46
    generated_code += add_code('     // header {}'.format(hdr.name), indent_level = 1, lineno = 47)
    generated_code += add_code("     {", indent_level = 1, lineno = 48)
    generated_code += add_code('         .idx = {},'.format(idx), indent_level = 2, lineno = 49)
    generated_code += add_code('         .name = "{}",'.format(hdr.name), indent_level = 2, lineno = 50)
    generated_code += add_code('         .byte_width = {}, // {} bits, {} bytes'.format(byte_width, size, size/8.0), indent_level = 2, lineno = 51)
    generated_code += add_code('         .byte_offset = {},'.format("+".join(byte_offsets)), indent_level = 2, lineno = 52)
    generated_code += add_code('         .is_metadata = {},'.format(to_c_bool('is_metadata' in hdrt and hdrt.is_metadata)), indent_level = 2, lineno = 53)
    generated_code += add_code('         .var_width_field = {},'.format(vwfld_name), indent_level = 2, lineno = 55)
    generated_code += add_code('         .var_width_size  = {},'.format(vw_size), indent_level = 2, lineno = 56)
    if len(flds) == 0: ## src/hardware_indep/hdr_fld.c.py:58
        generated_code += add_code("         // TODO set .first_fld so that it cannot cause any problems", indent_level = 2, lineno = 58)
        generated_code += add_code("         // TODO set .last_fld so that it cannot cause any problems", indent_level = 2, lineno = 59)
    else: ## src/hardware_indep/hdr_fld.c.py:61
        generated_code += add_code('         .first_fld = FLD({},{}),'.format(hdr.name, flds[0].name), indent_level = 2, lineno = 61)
        generated_code += add_code('         .last_fld = FLD({},{}),'.format(hdr.name, flds[-1].name), indent_level = 2, lineno = 62)
    generated_code += add_code("     },", indent_level = 1, lineno = 63)
    generated_code += add_code("", indent_level = 1, lineno = 64)
    byte_offsets += [f'{byte_width}'] ## src/hardware_indep/hdr_fld.c.py:67
    fldidx += len(flds) + vw_size ## src/hardware_indep/hdr_fld.c.py:68
if len(hlir.header_instances) == 0: ## src/hardware_indep/hdr_fld.c.py:70
    generated_code += add_code(" {}, // dummy", indent_level = 1, lineno = 70)
generated_code += add_code(" };", lineno = 71)

generated_code += add_code("")
generated_code += add_code(" const fld_info_t fld_infos[FIELD_COUNT] = {", lineno = 74)
hdr_startidxs = {} ## src/hardware_indep/hdr_fld.c.py:76
fldidx = 0 ## src/hardware_indep/hdr_fld.c.py:77
for hdr in hlir.header_instances: ## src/hardware_indep/hdr_fld.c.py:78
    for fld in hdr.urtype.fields: ## src/hardware_indep/hdr_fld.c.py:79
        fldidx += 1 ## src/hardware_indep/hdr_fld.c.py:80
        if hdr.name not in hdr_startidxs: ## src/hardware_indep/hdr_fld.c.py:81
            hdr_startidxs[hdr.name] = fldidx ## src/hardware_indep/hdr_fld.c.py:82
        is_meta = hdr.urtype.is_metadata ## src/hardware_indep/hdr_fld.c.py:84
        generated_code += add_code('     // field {}.{}'.format(hdr.name, fld.name), indent_level = 1, lineno = 85)
        generated_code += add_code("     {", indent_level = 1, lineno = 86)
        generated_code += add_code('         .instance = FLD({}, {}),'.format('all_metadatas' if is_meta else hdr.name, fld.name), indent_level = 2, lineno = 87)
        generated_code += add_code('         .header_instance = HDR({}),'.format('all_metadatas' if is_meta else hdr.name), indent_level = 2, lineno = 88)
        generated_code += add_code('         .size = {},'.format(fld.urtype.size), indent_level = 2, lineno = 89)
        generated_code += add_code('         .byte_width = to_bytes({}),'.format(fld.urtype.size), indent_level = 2, lineno = 90)
        generated_code += add_code('         .bit_offset = {} % 8,'.format(fld.offset), indent_level = 2, lineno = 91)
        generated_code += add_code('         .byte_offset = {} / 8,'.format(fld.offset), indent_level = 2, lineno = 92)
        generated_code += add_code('         .is_vw = {},'.format(to_c_bool(fld.is_vw)), indent_level = 2, lineno = 93)
        generated_code += add_code('         .name = "{}",'.format(fld.name), indent_level = 2, lineno = 94)
        generated_code += add_code('         .short_name = "{}",'.format(fld.short_name), indent_level = 2, lineno = 95)
        if fld.urtype.size <= 32: ## src/hardware_indep/hdr_fld.c.py:97
            not0 = 0xffffffff ## src/hardware_indep/hdr_fld.c.py:98
            if is_meta: ## src/hardware_indep/hdr_fld.c.py:100
                mask = not0 >> (32 - fld.urtype.size) ## src/hardware_indep/hdr_fld.c.py:101
                mask_txt = f'0x{mask:08x}' ## src/hardware_indep/hdr_fld.c.py:102
            else: ## src/hardware_indep/hdr_fld.c.py:103
                shift_up = (32 - fld.urtype.size) % 32 ## src/hardware_indep/hdr_fld.c.py:104
                top_bits = (not0 << shift_up) & not0 ## src/hardware_indep/hdr_fld.c.py:105
                mask = top_bits >> (fld.offset % 8) ## src/hardware_indep/hdr_fld.c.py:106
                mask_txt = f'0x{mask:08x}' ## src/hardware_indep/hdr_fld.c.py:107
            byte_size = (fld.urtype.size + 7) // 8 ## src/hardware_indep/hdr_fld.c.py:109
            padded_size = byte_size * 8 ## src/hardware_indep/hdr_fld.c.py:110
            binary_txt = '_'.join(f'{mask:0{padded_size}b}'[i:i+8] for i in range(0, padded_size, 8)) ## src/hardware_indep/hdr_fld.c.py:111
            generated_code += add_code('         .mask = {}, // {}b at offset {}B+{}b: 0b{}'.format(mask_txt, fld.urtype.size, fld.offset//8, fld.offset%8, binary_txt), indent_level = 2, lineno = 111)
        else: ## src/hardware_indep/hdr_fld.c.py:113
            generated_code += add_code('         // .mask ignored: {}b field is restricted to be byte aligned (over 32b)'.format(fld.urtype.size), indent_level = 2, lineno = 113)
        generated_code += add_code("     },", indent_level = 1, lineno = 114)
        generated_code += add_code("", indent_level = 1, lineno = 115)
generated_code += add_code(" };", lineno = 116)

generated_code += add_code("")
generated_code += add_code(" const stk_info_t stk_infos[STACK_COUNT] = {", lineno = 119)
for stk in hlir.header_stacks: ## src/hardware_indep/hdr_fld.c.py:121
    stk0 = f'{stk.name}_0' ## src/hardware_indep/hdr_fld.c.py:122
    generated_code += add_code('     // stack {}'.format(stk.name), indent_level = 1, lineno = 122)
    generated_code += add_code("     {", indent_level = 1, lineno = 123)
    generated_code += add_code('         .size      = {},'.format(stk.urtype.stk_size.value), indent_level = 2, lineno = 124)
    generated_code += add_code('         .fld_count = {},'.format(len(stk.type.elementType.urtype.fields)), indent_level = 2, lineno = 125)
    generated_code += add_code('         .start_hdr = HDR({}),'.format(stk0), indent_level = 2, lineno = 126)
    generated_code += add_code('         .start_fld = {},'.format(hdr_startidxs[stk0]), indent_level = 2, lineno = 127)
    generated_code += add_code("     },", indent_level = 1, lineno = 128)
    generated_code += add_code("", indent_level = 1, lineno = 129)
generated_code += add_code(" };", lineno = 130)
generated_code += add_code("", lineno = 131)

generated_code += add_code("")
generated_code += add_code(" int get_fld_vw_size(field_instance_e fld, packet_descriptor_t* pd) {", lineno = 133)
generated_code += add_code("     header_instance_e hdr = fld_infos[fld].header_instance;", indent_level = 1, lineno = 134)
generated_code += add_code("     return pd->headers[hdr].vw_size;", indent_level = 1, lineno = 135)
generated_code += add_code(" }", lineno = 136)
generated_code += add_code("", lineno = 137)
