
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/parser.h.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/parser.h.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/parser.h.py: via hardware_indep/parser.h.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

#!/usr/bin/env python3 ## src/hardware_indep/parser.h.py:2
# -*- coding: utf-8 -*- ## src/hardware_indep/parser.h.py:3

generated_code += add_code("")
# SPDX-License-Identifier: Apache-2.0 ## src/hardware_indep/parser.h.py:5
# Copyright 2016 Eotvos Lorand University, Budapest, Hungary ## src/hardware_indep/parser.h.py:6

generated_code += add_code("")
from utils.codegen import format_type ## src/hardware_indep/parser.h.py:8

generated_code += add_code("")
generated_code += add_code(" #pragma once", lineno = 9)

generated_code += add_code("")
generated_code += add_code(" #include <byteswap.h>", lineno = 11)
generated_code += add_code(" #include <stdbool.h>", lineno = 12)
generated_code += add_code(" #include \"aliases.h\"", lineno = 13)
generated_code += add_code(" #include \"hdr_fld.h\"", lineno = 14)
generated_code += add_code(" #include \"common_enums.h\"", lineno = 15)

generated_code += add_code("")
generated_code += add_code(" #define to_bytes(bits) (((bits) + 7) / 8)", lineno = 18)
generated_code += add_code("", lineno = 19)

generated_code += add_code("")
generated_code += add_code(" // TODO documentation", lineno = 21)
generated_code += add_code(" #define mod_top(n, bits) (((bits-(n%bits)) % bits))", lineno = 22)

generated_code += add_code("")
generated_code += add_code(" // Produces a 32 bit int that has n bits on at the top end.", lineno = 24)
generated_code += add_code(" #define uint32_top_bits(n) (0xffffffff << mod_top(n, 32))", lineno = 25)

generated_code += add_code("")
generated_code += add_code(" // the type has some optional values ", lineno = 27)
generated_code += add_code(" #define MAYBE(type,...)    type", lineno = 28)

generated_code += add_code("")
generated_code += add_code(" #define NO_VW_FIELD_PRESENT (-1)", lineno = 31)
generated_code += add_code(" #define NO_STACK_PRESENT    (-1)", lineno = 32)

generated_code += add_code("")
generated_code += add_code(" typedef enum {", lineno = 35)
generated_code += add_code("     NOT_MODIFIED,", indent_level = 1, lineno = 36)
generated_code += add_code("     MODIFIED,", indent_level = 1, lineno = 37)
generated_code += add_code(" } parsed_field_attr_t;", lineno = 38)

generated_code += add_code("")
all_fields = [(hdr, fld) for hdr in hlir.header_instances for fld in hdr.urtype.fields] ## src/hardware_indep/parser.h.py:41
parsed_fields = [(hdr, fld) for hdr, fld in all_fields if not fld.preparsed] ## src/hardware_indep/parser.h.py:42

generated_code += add_code("")
for hdr in hlir.header_instances: ## src/hardware_indep/parser.h.py:44
    if hdr.urtype.node_type == 'Type_HeaderUnion': ## src/hardware_indep/parser.h.py:45
        raise NotImplementedError("Header unions are not supported") ## src/hardware_indep/parser.h.py:46
generated_code += add_code(" typedef struct {", lineno = 47)
for hdr, fld in all_fields: ## src/hardware_indep/parser.h.py:49
    fldtype = fld.type.type if fld.type.node_type == 'StructField' else fld.type ## src/hardware_indep/parser.h.py:50
    varname = f'FLD({hdr.name},{fld._expression.name})' ## src/hardware_indep/parser.h.py:51
    generated_code += add_code('     {};'.format(format_type(fldtype, varname=varname)), indent_level = 1, lineno = 51)
generated_code += add_code("", indent_level = 1, lineno = 52)

generated_code += add_code("", indent_level = 1)
for hdr, fld in parsed_fields: ## src/hardware_indep/parser.h.py:55
    generated_code += add_code('     parsed_field_attr_t FLD_ATTR({},{});'.format(hdr.name, fld._expression.name), indent_level = 1, lineno = 55)
generated_code += add_code("", indent_level = 1, lineno = 56)
generated_code += add_code(" } parsed_fields_t;", lineno = 57)

generated_code += add_code("")
generated_code += add_code(" // Header instance infos", lineno = 60)
generated_code += add_code(" // ---------------------", lineno = 61)

generated_code += add_code("")
generated_code += add_code(' #define HEADER_COUNT {}'.format(max(len(hlir.header_instances), 1)), lineno = 63)
generated_code += add_code(' #define FIELD_COUNT {}'.format(max(len(all_fields), 1)), lineno = 64)
generated_code += add_code(' #define STACK_COUNT {}'.format(max(len(hlir.header_stacks), 1)), lineno = 65)

generated_code += add_code("")
# note: implemented in hdr_fld.c.py ## src/hardware_indep/parser.h.py:68
generated_code += add_code(" extern const char*const field_names[FIELD_COUNT];", lineno = 68)
generated_code += add_code(" extern const char*const header_instance_names[HEADER_COUNT];", lineno = 69)

generated_code += add_code("")
# TODO maybe some more space needs to be added on for varlen headers? ## src/hardware_indep/parser.h.py:72
nonmeta_hdrlens = "+".join([f'{hdr.urtype.byte_width}' for hdr in hlir.header_instances]) ## src/hardware_indep/parser.h.py:73
generated_code += add_code(' #define NONMETA_HDR_TOTAL_LENGTH ({})'.format(nonmeta_hdrlens), lineno = 73)

generated_code += add_code("")
generated_code += add_code(" typedef enum {", lineno = 75)
for hdr in hlir.header_instances: ## src/hardware_indep/parser.h.py:77
    generated_code += add_code('     HDR({}),'.format(hdr.name), indent_level = 1, lineno = 77)
if len(hlir.header_instances) == 0: ## src/hardware_indep/parser.h.py:79
    generated_code += add_code(" HDR(__dummy__),", indent_level = 1, lineno = 79)
generated_code += add_code(" } header_instance_e;", lineno = 80)
generated_code += add_code("", lineno = 81)

generated_code += add_code("")
generated_code += add_code(" typedef enum {", lineno = 83)
for hdr, fld in all_fields: ## src/hardware_indep/parser.h.py:85
    generated_code += add_code('   FLD({},{}),'.format(hdr.name, fld.name), indent_level = 1, lineno = 85)
if len(all_fields) == 0: ## src/hardware_indep/parser.h.py:87
    generated_code += add_code("     FLD(__dummy__,__dummy__),", indent_level = 1, lineno = 87)
generated_code += add_code(" } field_instance_e;", lineno = 88)
generated_code += add_code("", lineno = 89)

generated_code += add_code("")
generated_code += add_code(" typedef enum {", lineno = 91)
for stk in hlir.header_stacks: ## src/hardware_indep/parser.h.py:93
    generated_code += add_code('     STK({}),'.format(stk.name), indent_level = 1, lineno = 93)
if len(hlir.header_stacks) == 0: ## src/hardware_indep/parser.h.py:95
    generated_code += add_code("     STK(__dummy__),", indent_level = 1, lineno = 95)
generated_code += add_code(" } header_stack_e;", lineno = 96)
generated_code += add_code("", lineno = 97)

generated_code += add_code("")
generated_code += add_code(" typedef struct {", lineno = 100)
generated_code += add_code("     const int        idx;", indent_level = 1, lineno = 101)
generated_code += add_code("     const int        stack_idx;", indent_level = 1, lineno = 102)
generated_code += add_code("     const char*const name;", indent_level = 1, lineno = 103)

generated_code += add_code("", indent_level = 1)
generated_code += add_code("     const int        byte_width;", indent_level = 1, lineno = 105)
generated_code += add_code("     const int        byte_offset;", indent_level = 1, lineno = 106)

generated_code += add_code("", indent_level = 1)
generated_code += add_code("     const bool       is_metadata;", indent_level = 1, lineno = 108)

generated_code += add_code("", indent_level = 1)
generated_code += add_code("     const field_instance_e first_fld;", indent_level = 1, lineno = 110)
generated_code += add_code("     const field_instance_e last_fld;", indent_level = 1, lineno = 111)

generated_code += add_code("", indent_level = 1)
generated_code += add_code("     const MAYBE(field_instance_e, NO_VW_FIELD_PRESENT) var_width_field;", indent_level = 1, lineno = 113)
generated_code += add_code("     const int var_width_size;", indent_level = 1, lineno = 114)
generated_code += add_code(" } hdr_info_t;", lineno = 115)
generated_code += add_code("", lineno = 116)

generated_code += add_code("")
generated_code += add_code(" typedef struct {", lineno = 118)
generated_code += add_code("     const int               size;", indent_level = 1, lineno = 119)
generated_code += add_code("     const int               bit_offset;", indent_level = 1, lineno = 120)
generated_code += add_code("     const int               byte_width;", indent_level = 1, lineno = 121)
generated_code += add_code("     const int               byte_offset;", indent_level = 1, lineno = 122)
generated_code += add_code("     const uint32_t          mask;", indent_level = 1, lineno = 123)
generated_code += add_code("     const bool              is_metadata;", indent_level = 1, lineno = 124)
generated_code += add_code("     const bool              is_vw;", indent_level = 1, lineno = 125)
generated_code += add_code("     const field_instance_e  instance;", indent_level = 1, lineno = 126)
generated_code += add_code("     const header_instance_e header_instance;", indent_level = 1, lineno = 127)
generated_code += add_code("     const char*const        name;", indent_level = 1, lineno = 128)
generated_code += add_code("     const char*const        short_name;", indent_level = 1, lineno = 129)
generated_code += add_code(" } fld_info_t;", lineno = 130)
generated_code += add_code("", lineno = 131)

generated_code += add_code("")
generated_code += add_code(" typedef struct {", lineno = 133)
generated_code += add_code("     const int               size;", indent_level = 1, lineno = 134)
generated_code += add_code("     const int               fld_count;", indent_level = 1, lineno = 135)
generated_code += add_code("     const header_instance_e start_hdr;", indent_level = 1, lineno = 136)
generated_code += add_code("     const field_instance_e  start_fld;", indent_level = 1, lineno = 137)
generated_code += add_code(" } stk_info_t;", lineno = 138)
generated_code += add_code("", lineno = 139)

generated_code += add_code("")
# note: implemented in hdr_fld.c.py ## src/hardware_indep/parser.h.py:143
generated_code += add_code(" extern const hdr_info_t hdr_infos[HEADER_COUNT];", lineno = 143)
generated_code += add_code(" extern const fld_info_t fld_infos[FIELD_COUNT];", lineno = 144)
generated_code += add_code(" extern const stk_info_t stk_infos[STACK_COUNT];", lineno = 145)

generated_code += add_code("")
generated_code += add_code(" // HW optimization related infos", lineno = 148)
generated_code += add_code(" // --------------------", lineno = 149)

generated_code += add_code("")
generated_code += add_code(' #define OFFLOAD_CHECKSUM {}'.format('true' if []!=[x for x in hlir.sc_annotations if x.name=='offload'] else 'false'), lineno = 151)

generated_code += add_code("")
generated_code += add_code(" // Parser state local vars", lineno = 154)
generated_code += add_code(" // -----------------------", lineno = 155)

generated_code += add_code("")
vw_names = [hdr.name for hdr in hlir.header_instances.filter(lambda hdr: not hdr.urtype.is_metadata and hdr.urtype.is_vw)] ## src/hardware_indep/parser.h.py:158

generated_code += add_code("")
generated_code += add_code(" typedef struct {", lineno = 159)
for parser in hlir.parsers: ## src/hardware_indep/parser.h.py:161
    for loc in parser.parserLocals: ## src/hardware_indep/parser.h.py:162
        locname = f'LOCALNAME({parser.name},{loc.name})' ## src/hardware_indep/parser.h.py:163
        if 'type_ref' in loc.type: ## src/hardware_indep/parser.h.py:164
            if loc.urtype.node_type == 'Type_Extern': ## src/hardware_indep/parser.h.py:165
                generated_code += add_code('     {}_t {};'.format(loc.urtype.name, locname), indent_level = 1, lineno = 165)
            else: ## src/hardware_indep/parser.h.py:167
                generated_code += add_code('     {}; // type: {}'.format(format_type(loc.type, addon=locname), loc.urtype.name), indent_level = 1, lineno = 167)
        else: ## src/hardware_indep/parser.h.py:169
            generated_code += add_code('     {};'.format(format_type(loc.type, addon=locname)), indent_level = 1, lineno = 169)
for name in vw_names: ## src/hardware_indep/parser.h.py:172
    generated_code += add_code('     uint8_t {}_var; // Width of the variable width field // type: {}'.format(name, name), indent_level = 1, lineno = 172)
if all(len(parser.parserLocals) == 0 for parser in hlir.parsers) and len(vw_names) == 0: ## src/hardware_indep/parser.h.py:175
    generated_code += add_code("     // no parser locals", indent_level = 1, lineno = 175)
generated_code += add_code(" } parser_state_t;", lineno = 176)

generated_code += add_code("")
for stk in hlir.header_stacks: ## src/hardware_indep/parser.h.py:180
    for idx, fld in enumerate(stk.urtype.elementType.urtype.fields): ## src/hardware_indep/parser.h.py:181
        generated_code += add_code(' #define stkfld_offset_{}_{} {}'.format(stk.name, fld.name, idx), lineno = 181)
generated_code += add_code("", lineno = 182)

generated_code += add_code("")
generated_code += add_code(" #define PARSED_AFTER_END_OF_PACKET INT_MIN", lineno = 184)
generated_code += add_code(" #define PARSED_OVER_STACK_SIZE     (INT_MIN+1)", lineno = 185)
generated_code += add_code(" #define HDR_PARSED_OK              0", lineno = 186)
