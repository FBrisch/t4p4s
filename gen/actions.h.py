
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/actions.h.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/actions.h.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/actions.h.py: via hardware_indep/actions.h.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

# SPDX-License-Identifier: Apache-2.0 ## src/hardware_indep/actions.h.py:2
# Copyright 2016 Eotvos Lorand University, Budapest, Hungary ## src/hardware_indep/actions.h.py:3

generated_code += add_code("")
from utils.codegen import format_type ## src/hardware_indep/actions.h.py:5
from utils.extern import get_smem_name ## src/hardware_indep/actions.h.py:6
from compiler_common import unique_everseen ## src/hardware_indep/actions.h.py:7

generated_code += add_code("")
generated_code += add_code(" #pragma once", lineno = 8)

generated_code += add_code("")
generated_code += add_code(" #include \"dataplane.h\"", lineno = 10)
generated_code += add_code(" #include \"common.h\"", lineno = 11)
generated_code += add_code(" #include \"gen_include.h\"", lineno = 12)

generated_code += add_code("")
generated_code += add_code(" #include \"util_packet.h\"", lineno = 14)
generated_code += add_code(" #include \"stateful_memory_type.h\"", lineno = 15)

generated_code += add_code("")
# Note: this is for Digest_t ## src/hardware_indep/actions.h.py:18
generated_code += add_code(" #include \"ctrl_plane_backend.h\"", lineno = 18)

generated_code += add_code("")
# TODO this should not be here in the indep section ## src/hardware_indep/actions.h.py:21
generated_code += add_code(" #include \"dpdk_smem.h\"", lineno = 21)

generated_code += add_code("")
generated_code += add_code(" #define FIELD(name, length) uint8_t name[(length + 7) / 8];", lineno = 23)

generated_code += add_code("")
generated_code += add_code(" typedef enum {", lineno = 26)
for table in hlir.tables: ## src/hardware_indep/actions.h.py:28
    for action in unique_everseen(table.actions): ## src/hardware_indep/actions.h.py:29
        generated_code += add_code('     action_{},'.format(action.action_object.name), indent_level = 1, lineno = 29)
    if len(table.actions) == 0: ## src/hardware_indep/actions.h.py:31
        generated_code += add_code("     action_,", indent_level = 1, lineno = 31)
if len(hlir.tables) == 0: ## src/hardware_indep/actions.h.py:33
    generated_code += add_code("     action_DUMMY_ACTION_0,", indent_level = 1, lineno = 33)
generated_code += add_code(" } actions_e;", lineno = 34)

generated_code += add_code("")
for ctl in hlir.controls: ## src/hardware_indep/actions.h.py:37
    for act in ctl.actions: ## src/hardware_indep/actions.h.py:38
        generated_code += add_code(" typedef struct {", lineno = 38)
        for param in act.parameters.parameters: ## src/hardware_indep/actions.h.py:40
            paramtype = param.urtype ## src/hardware_indep/actions.h.py:41
            generated_code += add_code('     {};'.format(format_type(param.urtype, varname = param.name)), indent_level = 1, lineno = 41)
        if len(act.parameters.parameters) == 0: ## src/hardware_indep/actions.h.py:44
            generated_code += add_code("     FIELD(DUMMY_FIELD, 0);", indent_level = 1, lineno = 44)
        generated_code += add_code(' }} action_{}_params_t;'.format(act.name), lineno = 45)
        generated_code += add_code("", lineno = 46)
for table in hlir.tables: ## src/hardware_indep/actions.h.py:50
    generated_code += add_code(" typedef union {", lineno = 50)
    for action in table.actions: ## src/hardware_indep/actions.h.py:52
        action_method_name = action.expression.method.path.name ## src/hardware_indep/actions.h.py:53
        generated_code += add_code('     action_{}_params_t {}_params;'.format(action.action_object.name, action_method_name), indent_level = 1, lineno = 53)
    generated_code += add_code(' }} {}_action_params_t;'.format(table.name), lineno = 54)
    generated_code += add_code("", lineno = 55)
for table in hlir.tables: ## src/hardware_indep/actions.h.py:58
    generated_code += add_code(" typedef struct {", lineno = 58)
    generated_code += add_code("     actions_e                     id;", indent_level = 1, lineno = 59)
    generated_code += add_code('     {}_action_params_t params;'.format(table.name), indent_level = 1, lineno = 60)
    generated_code += add_code(' }} {}_action_t;'.format(table.name), lineno = 61)
    generated_code += add_code("", lineno = 62)
for table in hlir.tables: ## src/hardware_indep/actions.h.py:67
    generated_code += add_code(' void apply_table_{}(SHORT_STDPARAMS);'.format(table.name), lineno = 67)
    for action in table.actions: ## src/hardware_indep/actions.h.py:69
        aname = action.action_object.name ## src/hardware_indep/actions.h.py:70
        mname = action.expression.method.path.name ## src/hardware_indep/actions.h.py:71
        generated_code += add_code(' void action_code_{}(action_{}_params_t, SHORT_STDPARAMS);'.format(aname, mname), lineno = 72)
for ctl in hlir.controls: ## src/hardware_indep/actions.h.py:75
    generated_code += add_code(" typedef struct {", lineno = 75)
    for local_var_decl in ctl.local_var_decls.filterfalse('urtype.node_type', 'Type_Header'): ## src/hardware_indep/actions.h.py:77
        if 'smem_type' in (smem := local_var_decl): ## src/hardware_indep/actions.h.py:78
            if (reg := smem).smem_type == 'register': ## src/hardware_indep/actions.h.py:79
                varnames = [get_smem_name(reg)] ## src/hardware_indep/actions.h.py:80
            else: ## src/hardware_indep/actions.h.py:81
                varnames = [get_smem_name(inst) for inst in smem.insts] ## src/hardware_indep/actions.h.py:82
        elif (extern := local_var_decl.urtype).node_type == 'Type_Extern': ## src/hardware_indep/actions.h.py:83
            if extern.repr is None: ## src/hardware_indep/actions.h.py:84
                continue ## src/hardware_indep/actions.h.py:85
            varnames = [f'EXTERNNAME({local_var_decl.name})'] ## src/hardware_indep/actions.h.py:87
        else: ## src/hardware_indep/actions.h.py:88
            varnames = [local_var_decl.name] ## src/hardware_indep/actions.h.py:89
        targs = local_var_decl.type('arguments', []) ## src/hardware_indep/actions.h.py:91
        for varname in varnames: ## src/hardware_indep/actions.h.py:92
            generated_code += add_code('     {};'.format(format_type(local_var_decl.urtype, varname = varname, resolve_names = False, type_args = targs)), indent_level = 1, lineno = 92)
    generated_code += add_code(' }} control_locals_{}_t;'.format(ctl.name), lineno = 94)
    generated_code += add_code("", lineno = 95)
