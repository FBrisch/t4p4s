
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/parser.c.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/parser.c.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/parser.c.py: via hardware_indep/parser.c.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

# SPDX-License-Identifier: Apache-2.0 ## src/hardware_indep/parser.c.py:2
# Copyright 2016 Eotvos Lorand University, Budapest, Hungary ## src/hardware_indep/parser.c.py:3

generated_code += add_code("")
from compiler_log_warnings_errors import addError, addWarning ## src/hardware_indep/parser.c.py:5
from utils.codegen import format_expr, format_type, format_statement, format_declaration ## src/hardware_indep/parser.c.py:6
from compiler_common import statement_buffer_value, generate_var_name, get_hdr_name, unique_everseen ## src/hardware_indep/parser.c.py:7

generated_code += add_code("")
import functools ## src/hardware_indep/parser.c.py:9

generated_code += add_code("")
generated_code += add_code(" #include \"dpdk_lib.h\"", lineno = 11)
generated_code += add_code(" #include \"util_packet.h\"", lineno = 12)
generated_code += add_code(" #include \"gen_include.h\"", lineno = 13)
generated_code += add_code(" #include \"parser_stages.h\"", lineno = 14)

generated_code += add_code("")
generated_code += add_code(" #ifdef T4P4S_STATS", lineno = 16)
generated_code += add_code("     extern t4p4s_stats_t t4p4s_stats_global;", indent_level = 1, lineno = 17)
generated_code += add_code("     extern t4p4s_stats_t t4p4s_stats_per_packet;", indent_level = 1, lineno = 18)
generated_code += add_code(" #endif", lineno = 19)

generated_code += add_code("")
################################################################################ ## src/hardware_indep/parser.c.py:22

generated_code += add_code("")
generated_code += add_code(" void gen_parse_drop_msg(int apparent_hdr_len, const char* hdrname, int max_stkhdr_count) {", lineno = 23)
generated_code += add_code("     if (apparent_hdr_len == PARSED_AFTER_END_OF_PACKET) {", indent_level = 1, lineno = 24)
generated_code += add_code("         debug(\"   \" T4LIT(XX,status) \" \" T4LIT(Dropping packet,status) \": tried to parse \" T4LIT(%s,header) \" but it overshot the end of the packet\\n\", hdrname);", indent_level = 2, lineno = 25)
generated_code += add_code("     } else if (apparent_hdr_len == PARSED_OVER_STACK_SIZE) {", indent_level = 2, lineno = 26)
generated_code += add_code("         debug(\"   \" T4LIT(XX,status) \" \" T4LIT(Dropping packet,status) \": cannot have more than \" T4LIT(%d) \" headers in stack \" T4LIT(%s,header) \"\\n\", max_stkhdr_count, hdrname);", indent_level = 2, lineno = 27)
generated_code += add_code("     } else {", indent_level = 2, lineno = 28)
generated_code += add_code("         debug(\"   \" T4LIT(XX,status) \" \" T4LIT(Dropping packet,status) \": its length is negative (%d)\\n\", apparent_hdr_len);", indent_level = 2, lineno = 29)
generated_code += add_code("     }", indent_level = 1, lineno = 30)
generated_code += add_code(" }", lineno = 31)
generated_code += add_code("", lineno = 32)

generated_code += add_code("")
generated_code += add_code(" void drop_packet(STDPARAMS) {", lineno = 35)
generated_code += add_code("     MODIFY(dst_pkt(pd), EGRESS_META_FLD, src_32(EGRESS_DROP_VALUE), ENDIAN_KEEP);", indent_level = 1, lineno = 36)
generated_code += add_code(" }", lineno = 37)
generated_code += add_code("", lineno = 38)

generated_code += add_code("")
generated_code += add_code(" #ifdef T4P4S_DEBUG", lineno = 40)
generated_code += add_code("     char transition_cond[1024];", indent_level = 1, lineno = 41)
generated_code += add_code("", indent_level = 1, lineno = 42)
generated_code += add_code("     void set_transition_txt(const char* transition_txt) {", indent_level = 1, lineno = 43)
generated_code += add_code("         strcpy(transition_cond, transition_txt);", indent_level = 2, lineno = 44)
generated_code += add_code("     }", indent_level = 1, lineno = 45)
generated_code += add_code(" #else", indent_level = 1, lineno = 46)
generated_code += add_code("     void set_transition_txt(const char* transition_txt) {", indent_level = 1, lineno = 47)
generated_code += add_code("         // do nothing", indent_level = 2, lineno = 48)
generated_code += add_code("     }", indent_level = 1, lineno = 49)
generated_code += add_code(" #endif", lineno = 50)
generated_code += add_code("", lineno = 51)

generated_code += add_code("")
generated_code += add_code(" void check_hdr_valid(packet_descriptor_t* pd, field_instance_e fld, const char* unspec) {", lineno = 53)
generated_code += add_code("     #ifdef T4P4S_DEBUG", indent_level = 1, lineno = 54)
generated_code += add_code("         header_instance_e hdr = fld_infos[fld].header_instance;", indent_level = 2, lineno = 55)
generated_code += add_code("         if (unlikely(!is_header_valid(hdr, pd))) {", indent_level = 2, lineno = 56)
generated_code += add_code("             const char* hdrname = hdr_infos[hdr].name;", indent_level = 3, lineno = 57)
generated_code += add_code("             const char* fldname = field_names[fld];", indent_level = 3, lineno = 58)
generated_code += add_code("             debug(\"   \" T4LIT(!!,warning) \" Access to field in invalid header \" T4LIT(%s,warning) \".\" T4LIT(%s,field) \", returning \\\"unspecified\\\" value \" T4LIT(%s) \"\\n\", hdrname, fldname, unspec);", indent_level = 3, lineno = 59)
generated_code += add_code("         }", indent_level = 2, lineno = 60)
generated_code += add_code("     #endif", indent_level = 1, lineno = 61)
generated_code += add_code(" }", lineno = 62)

generated_code += add_code("")
generated_code += add_code(" void init_parser_state(parser_state_t* pstate) {", lineno = 65)
generated_code += add_code("     set_transition_txt(\"\");", indent_level = 1, lineno = 66)
for parser in hlir.parsers: ## src/hardware_indep/parser.c.py:68
    for local in parser.parserLocals.filter('node_type', 'Declaration_Instance'): ## src/hardware_indep/parser.c.py:69
        generated_code += add_code('     {}_t_init(pstate->{});'.format(local.urtype.name, local.name), indent_level = 1, lineno = 69)
generated_code += add_code(" }", lineno = 70)
generated_code += add_code("", lineno = 71)

generated_code += add_code("")
generated_code += add_code(" void cannot_parse_hdr(const char* varwidth_txt, const char* hdr_name, int hdrlen, int vwlen, STDPARAMS) {", lineno = 73)
generated_code += add_code("     #ifdef T4P4S_DEBUG", indent_level = 1, lineno = 74)
generated_code += add_code("         int total_bytes = (hdrlen + vwlen) / 8;", indent_level = 2, lineno = 75)
generated_code += add_code("         if (pd->parsed_size == pd->wrapper->pkt_len) {", indent_level = 2, lineno = 76)
generated_code += add_code("             debug(\"    \" T4LIT(!,warning) \" Missing %sheader \" T4LIT(%s,header) \"/\" T4LIT(%d) \"+\" T4LIT(%d) \"B at offset \" T4LIT(%d) \"\\n\",", indent_level = 3, lineno = 77)
generated_code += add_code("                   varwidth_txt, hdr_name, (hdrlen+7) / 8, (vwlen+7) / 8, pd->parsed_size);", indent_level = 3, lineno = 78)
generated_code += add_code("         } else {", indent_level = 3, lineno = 79)
generated_code += add_code("             debug(\"    \" T4LIT(!,warning) \" Trying to parse %sheader \" T4LIT(%s,header) \"/\" T4LIT(%d) \"+\" T4LIT(%d) \"B at offset \" T4LIT(%d) \", \" T4LIT(missing %d bytes,warning) \"\\n\",", indent_level = 3, lineno = 80)
generated_code += add_code("                   varwidth_txt, hdr_name, (hdrlen+7) / 8, (vwlen+7) / 8, pd->parsed_size, pd->parsed_size + total_bytes - pd->wrapper->pkt_len);", indent_level = 3, lineno = 81)
generated_code += add_code("         }", indent_level = 2, lineno = 82)
generated_code += add_code("     #endif", indent_level = 1, lineno = 83)
generated_code += add_code(" }", lineno = 84)
generated_code += add_code("", lineno = 85)

generated_code += add_code("")
# TODO find a less convoluted way to get to the header ## src/hardware_indep/parser.c.py:88
def get_hdrinst(arg0, component): ## src/hardware_indep/parser.c.py:89
    if 'path' in arg0: ## src/hardware_indep/parser.c.py:90
        hdrinst_name = arg0.path.name ## src/hardware_indep/parser.c.py:91
        hdrtype = component.header.urtype ## src/hardware_indep/parser.c.py:93
        dvar = parser.parserLocals.get(hdrinst_name, 'Declaration_Variable') ## src/hardware_indep/parser.c.py:94
        if not dvar: ## src/hardware_indep/parser.c.py:95
            return hlir.header_instances.get(hdrinst_name, 'Declaration_Variable', lambda hi: hi.urtype.name == hdrtype.name) ## src/hardware_indep/parser.c.py:96
        insts = [hi for hi in hlir.header_instances['StructField'] if hi.urtype.name == hdrtype.name] ## src/hardware_indep/parser.c.py:98
        if len(insts) == 1: ## src/hardware_indep/parser.c.py:99
            return insts[0] ## src/hardware_indep/parser.c.py:100
        if len(insts) == 0: ## src/hardware_indep/parser.c.py:101
            # note: it is defined as a local variable ## src/hardware_indep/parser.c.py:102
            return dvar.urtype ## src/hardware_indep/parser.c.py:103
        addError("Finding header", f"There is no single header that corresponds to {hdrtype.name}") ## src/hardware_indep/parser.c.py:105
        return None ## src/hardware_indep/parser.c.py:106
    if 'hdr_ref' in (mexpr := component.methodCall.method.expr): ## src/hardware_indep/parser.c.py:108
        return mexpr.hdr_ref ## src/hardware_indep/parser.c.py:109
    a0e = arg0.expression ## src/hardware_indep/parser.c.py:111
    if a0e.node_type == 'ArrayIndex': ## src/hardware_indep/parser.c.py:113
        return hlir.header_instances.get(get_hdr_name(a0e)) ## src/hardware_indep/parser.c.py:114
    if 'expr' in a0e and a0e.expr.urtype.node_type == 'Type_Stack': ## src/hardware_indep/parser.c.py:116
        # TODO do not always return #0 ## src/hardware_indep/parser.c.py:117
        return hlir.header_instances.get(f'{a0e.expr.member}_0') ## src/hardware_indep/parser.c.py:118
    if "member" in a0e: ## src/hardware_indep/parser.c.py:120
        hdrtype = component.header.urtype ## src/hardware_indep/parser.c.py:121
        hdrinst_name = a0e.member ## src/hardware_indep/parser.c.py:122
        return hlir.header_instances.get(hdrinst_name, 'StructField', lambda hi: hi.urtype.name == hdrtype.name) ## src/hardware_indep/parser.c.py:123
    hdrinst_name = a0e.hdr_ref.name ## src/hardware_indep/parser.c.py:125
    return hlir.header_instances.get(hdrinst_name) ## src/hardware_indep/parser.c.py:126
for parser in hlir.parsers: ## src/hardware_indep/parser.c.py:129
    for s in parser.states: ## src/hardware_indep/parser.c.py:130
        if s.is_reachable: ## src/hardware_indep/parser.c.py:131
            generated_code += add_code(' void parser_state_{}_{}(STDPARAMS);'.format(parser.name, s.name), lineno = 131)
        else: ## src/hardware_indep/parser.c.py:133
            generated_code += add_code(' // state {} is not reachable'.format(s.name), lineno = 133)
    generated_code += add_code("", lineno = 134)
generated_code += add_code("", lineno = 135)

generated_code += add_code("")
generated_code += add_code(" void print_missed_transition_conditions(const char*const* texts, int idx) {", lineno = 138)
generated_code += add_code("     #ifdef T4P4S_SHOW_MISSED_TRANSITION_CONDITIONS", indent_level = 1, lineno = 139)
generated_code += add_code("         for (int i = 0; i < idx; ++i) {", indent_level = 2, lineno = 140)
generated_code += add_code("             if (!strcmp(\"\", texts[i]))    continue;", indent_level = 3, lineno = 141)
generated_code += add_code("             debug(\"   %%%% Transition condition \" T4LIT(not met,status) \": %s\\n\", texts[i]);", indent_level = 3, lineno = 142)
generated_code += add_code("         }", indent_level = 2, lineno = 143)
generated_code += add_code("     #endif", indent_level = 1, lineno = 144)
generated_code += add_code(" }", lineno = 145)
generated_code += add_code("", lineno = 146)

generated_code += add_code("")
for parser in hlir.parsers: ## src/hardware_indep/parser.c.py:149
    for s in parser.states: ## src/hardware_indep/parser.c.py:150
        if not s.is_reachable: ## src/hardware_indep/parser.c.py:151
            continue ## src/hardware_indep/parser.c.py:152
        if s.name in ('accept', 'reject'): ## src/hardware_indep/parser.c.py:154
            continue ## src/hardware_indep/parser.c.py:155
        # note: this is a direct state transition, complex select code is not needed ## src/hardware_indep/parser.c.py:157
        if s.selectExpression.node_type == 'PathExpression': ## src/hardware_indep/parser.c.py:158
            continue ## src/hardware_indep/parser.c.py:159
        generated_code += add_code(' void parser_state_{}_{}_next_state(STDPARAMS) {{'.format(parser.name, s.name), lineno = 160)
        generated_code += add_code("     parser_state_t* local_vars = pstate;", indent_level = 1, lineno = 161)
        generated_code += add_code("     parser_state_t parameters = *pstate;", indent_level = 1, lineno = 162)
        bexpr = format_expr(s.selectExpression) ## src/hardware_indep/parser.c.py:164
        prebuf, postbuf = statement_buffer_value() ## src/hardware_indep/parser.c.py:165
        generated_code += add_code('     {}'.format(prebuf), indent_level = 1, lineno = 165)
        generated_code += bexpr ## src/hardware_indep/parser.c.py:166
        generated_code += add_code('     {}'.format(postbuf), indent_level = 1, lineno = 167)
        generated_code += add_code(" }", lineno = 168)
        generated_code += add_code("", lineno = 169)
def state_component_name(parser_name, s, idx, component): ## src/hardware_indep/parser.c.py:173
    def methodcall_info(mc): ## src/hardware_indep/parser.c.py:174
        m = mc.method ## src/hardware_indep/parser.c.py:175
        if 'expr' not in m: ## src/hardware_indep/parser.c.py:176
            return f'_{m.path.name}' ## src/hardware_indep/parser.c.py:177
        if m.expr.node_type == 'ArrayIndex': ## src/hardware_indep/parser.c.py:179
            stk_name = m.expr.left.member ## src/hardware_indep/parser.c.py:180
            idx = m.expr.right.value ## src/hardware_indep/parser.c.py:181
            hdrname = f'{stk_name}__{idx}' ## src/hardware_indep/parser.c.py:182
        elif 'member' in m.expr: ## src/hardware_indep/parser.c.py:183
            hdrname = m.expr.member ## src/hardware_indep/parser.c.py:184
        else: ## src/hardware_indep/parser.c.py:185
            hdrname = m.expr.path.name ## src/hardware_indep/parser.c.py:186
        method_name = m.member ## src/hardware_indep/parser.c.py:188
        return f'_{hdrname}_{method_name}' ## src/hardware_indep/parser.c.py:189
    def member_info(m): ## src/hardware_indep/parser.c.py:191
        hdrname = m.expr.member if 'member' in m.expr else m.expr.path.name ## src/hardware_indep/parser.c.py:192
        return f'_{hdrname}${m.member}' ## src/hardware_indep/parser.c.py:193
    info = '' ## src/hardware_indep/parser.c.py:195
    if 'call' not in component: ## src/hardware_indep/parser.c.py:196
        info = f'_{component.node_type}' ## src/hardware_indep/parser.c.py:197
        if component.node_type == 'AssignmentStatement': ## src/hardware_indep/parser.c.py:198
            left = '' ## src/hardware_indep/parser.c.py:199
            if (m := component.left).node_type == 'Member': ## src/hardware_indep/parser.c.py:200
                left = member_info(m) ## src/hardware_indep/parser.c.py:201
            if (pe := component.left).node_type == 'PathExpression': ## src/hardware_indep/parser.c.py:202
                left = f'_{pe.path.name}' ## src/hardware_indep/parser.c.py:203
            right = '' ## src/hardware_indep/parser.c.py:205
            if (mc := component.right).node_type == 'MethodCallExpression': ## src/hardware_indep/parser.c.py:206
                right = methodcall_info(mc) ## src/hardware_indep/parser.c.py:207
            elif (const := component.right).node_type == 'Constant': ## src/hardware_indep/parser.c.py:208
                right = f'_const_{const.value}' ## src/hardware_indep/parser.c.py:209
            elif (pe := component.right).node_type == 'PathExpression': ## src/hardware_indep/parser.c.py:210
                right = f'_assign_{pe.path.name}' ## src/hardware_indep/parser.c.py:211
            info = f'{left}{right}' ## src/hardware_indep/parser.c.py:213
        if component.node_type == 'MethodCallStatement': ## src/hardware_indep/parser.c.py:214
            info = methodcall_info(component.methodCall) ## src/hardware_indep/parser.c.py:215
    elif component.call == 'extract_header': ## src/hardware_indep/parser.c.py:216
        is_underscore_header, hdr, hdrt = component_extract_info(component) ## src/hardware_indep/parser.c.py:217
        if is_underscore_header: ## src/hardware_indep/parser.c.py:219
            info = f'_extract_{hdrt.name}_underscore' ## src/hardware_indep/parser.c.py:220
        else: ## src/hardware_indep/parser.c.py:221
            info = f'_extract_{hdr.name}' ## src/hardware_indep/parser.c.py:222
    return f'parser_state_{parser_name}_{s.name}_{idx:03}{info}' ## src/hardware_indep/parser.c.py:224
def component_extract_info(component): ## src/hardware_indep/parser.c.py:227
    arg0 = component.methodCall.arguments['Argument'][0] ## src/hardware_indep/parser.c.py:228
    hdr = get_hdrinst(arg0, component) ## src/hardware_indep/parser.c.py:229
    # note: a hack (an attribute's proper value should be the determinant, not the presence/absence of an attribute), ## src/hardware_indep/parser.c.py:231
    #       but it looks like the best way to determine whether we are extracting to the underscore identifier ## src/hardware_indep/parser.c.py:232
    # is_underscore_header = hdr is None or not hasattr(hdr, 'annotations') ## src/hardware_indep/parser.c.py:233
    is_underscore_header = False ## src/hardware_indep/parser.c.py:234
    if is_underscore_header: ## src/hardware_indep/parser.c.py:236
        hdrt = arg0.expression.hdr_ref.urtype ## src/hardware_indep/parser.c.py:237
        size = (hdrt.size+7)//8 ## src/hardware_indep/parser.c.py:238
    else: ## src/hardware_indep/parser.c.py:239
        hdrt = hdr.urtype ## src/hardware_indep/parser.c.py:240
    return is_underscore_header, hdr, hdrt ## src/hardware_indep/parser.c.py:242
for parser in hlir.parsers: ## src/hardware_indep/parser.c.py:244
    for s in parser.states: ## src/hardware_indep/parser.c.py:245
        if not s.is_reachable: ## src/hardware_indep/parser.c.py:246
            continue ## src/hardware_indep/parser.c.py:247
        for idx, component in enumerate(s.components): ## src/hardware_indep/parser.c.py:249
            generated_code += add_code(' bool {}(STDPARAMS) {{'.format(state_component_name(parser.name, s, idx, component)), lineno = 249)
            generated_code += add_code("     parser_state_t* local_vars = pstate;", indent_level = 1, lineno = 250)
            if 'call' in component: ## src/hardware_indep/parser.c.py:253
                if component.call != 'extract_header': ## src/hardware_indep/parser.c.py:254
                    addWarning('invoking state component', f'Unknown state component call of type {component.call}') ## src/hardware_indep/parser.c.py:255
                    continue ## src/hardware_indep/parser.c.py:256
                is_underscore_header, hdr, hdrt = component_extract_info(component) ## src/hardware_indep/parser.c.py:258
                args = component.methodCall.arguments ## src/hardware_indep/parser.c.py:260
                vwlen_var = generate_var_name('vwlen') ## src/hardware_indep/parser.c.py:261
                if len(args) == 1: ## src/hardware_indep/parser.c.py:262
                    generated_code += add_code('     int {} = 0;'.format(vwlen_var), indent_level = 1, lineno = 262)
                else: ## src/hardware_indep/parser.c.py:264
                    vw_size = hdr.urtype.vw_fld.urtype.size ## src/hardware_indep/parser.c.py:265
                    vw_size_bytes = (vw_size+7) // 8 ## src/hardware_indep/parser.c.py:266
                    bexpr = format_expr(args[1].expression) ## src/hardware_indep/parser.c.py:268
                    prebuf, postbuf = statement_buffer_value() ## src/hardware_indep/parser.c.py:269
                    generated_code += add_code('     {}'.format(prebuf), indent_level = 1, lineno = 269)
                    generated_code += add_code('     int {} = (({}) + 7) / 8;'.format(vwlen_var, bexpr), indent_level = 1, lineno = 270)
                    generated_code += add_code('     {}'.format(postbuf), indent_level = 1, lineno = 271)
                    generated_code += add_code('     if (unlikely({} < 0)) {{'.format(vwlen_var), indent_level = 1, lineno = 273)
                    generated_code += add_code('         debug("    " T4LIT(!,error) " Determined variable length for field " T4LIT({},header) "." T4LIT(%s,field) " = " T4LIT(%d) " " T4LIT(is negative,error) "\\n", field_names[hdr_infos[HDR({})].var_width_field], {});'.format(hdr.name, hdr.name, vwlen_var), indent_level = 2, lineno = 274)
                    generated_code += add_code("         drop_packet(STDPARAMS_IN);", indent_level = 2, lineno = 276)
                    generated_code += add_code("         return false;", indent_level = 2, lineno = 277)
                    generated_code += add_code('     }} else if (unlikely({} > {})) {{'.format(vwlen_var, vw_size_bytes), indent_level = 2, lineno = 278)
                    generated_code += add_code('         debug("    " T4LIT(!,error) " Determined variable length for field " T4LIT({},header) "." T4LIT(%s,field) " = " T4LIT(%d) " " T4LIT(is larger than the maximum varbit size,error) " " T4LIT(%d) "\\n", field_names[hdr_infos[HDR({})].var_width_field], {}, {});'.format(hdr.name, hdr.name, vwlen_var, vw_size_bytes), indent_level = 2, lineno = 279)
                    generated_code += add_code("         drop_packet(STDPARAMS_IN);", indent_level = 2, lineno = 281)
                    generated_code += add_code("         return false;", indent_level = 2, lineno = 282)
                    generated_code += add_code("     #ifdef T4P4S_DEBUG", indent_level = 2, lineno = 283)
                    generated_code += add_code("     } else {", indent_level = 3, lineno = 284)
                    generated_code += add_code('         debug("    : Determined variable length for field " T4LIT({},header) "." T4LIT(%s,field) " = " T4LIT(%d) "B\\n", field_names[hdr_infos[HDR({})].var_width_field], {} / 8);'.format(hdr.name, hdr.name, vwlen_var), indent_level = 3, lineno = 285)
                    generated_code += add_code("     #endif", indent_level = 2, lineno = 286)
                    generated_code += add_code("     }", indent_level = 1, lineno = 287)
                generated_code += add_code('     int {}_len = parser_extract_{}({}, STDPARAMS_IN);'.format(hdr.name, hdr.name, vwlen_var), indent_level = 1, lineno = 289)
                generated_code += add_code('     if (unlikely({}_len < 0)) {{'.format(hdr.name), indent_level = 1, lineno = 290)
                generated_code += add_code('         gen_parse_drop_msg({}_len, "{}", -1 /* ignored */);'.format(hdr.name, hdr.name), indent_level = 2, lineno = 291)
                generated_code += add_code("         drop_packet(STDPARAMS_IN);", indent_level = 2, lineno = 292)
                generated_code += add_code("         return false;", indent_level = 2, lineno = 293)
                generated_code += add_code("     }", indent_level = 1, lineno = 294)
                # if any header is skipped (extracted as (_)), it will not be emitted during deparsing ## src/hardware_indep/parser.c.py:297
                if any(hlir.header_instances.filterfalse(lambda hdr: hdr.urtype.is_metadata).map(lambda hdr: hdr.is_local)): ## src/hardware_indep/parser.c.py:298
                    generated_code += add_code("     pd->is_deparse_reordering = true;", indent_level = 1, lineno = 298)
            else: ## src/hardware_indep/parser.c.py:300
                generated_code += add_code('     {}'.format(format_statement(component, parser)), indent_level = 1, lineno = 300)
            generated_code += add_code("     return true;", indent_level = 1, lineno = 301)
            generated_code += add_code(" }", lineno = 302)
            generated_code += add_code("", lineno = 303)
nonmeta_hdrinst_count = len(hlir.header_instances.filterfalse('urtype.is_metadata')) ## src/hardware_indep/parser.c.py:306
generated_code += add_code(" int get_active_hdr_count(STDPARAMS) {", lineno = 306)
generated_code += add_code("     int retval = 0;", indent_level = 1, lineno = 307)
generated_code += add_code('     for (int i = 0; i < {}; ++i) {{'.format(nonmeta_hdrinst_count), indent_level = 1, lineno = 308)
generated_code += add_code("         retval += is_header_valid(i, pd) ? 1 : 0;", indent_level = 2, lineno = 309)
generated_code += add_code("     }", indent_level = 1, lineno = 310)
generated_code += add_code("     return retval;", indent_level = 1, lineno = 311)
generated_code += add_code(" }", lineno = 312)
generated_code += add_code("", lineno = 313)

generated_code += add_code("")
generated_code += add_code(" void print_parsing_success(STDPARAMS) {", lineno = 315)
generated_code += add_code("     #ifdef T4P4S_DEBUG", indent_level = 1, lineno = 316)
generated_code += add_code("         int hdr_count = get_active_hdr_count(STDPARAMS_IN);", indent_level = 2, lineno = 317)
generated_code += add_code("         if (pd->payload_size > 0) {", indent_level = 2, lineno = 318)
generated_code += add_code("             dbg_bytes(pd->data + pd->parsed_size, pd->payload_size, \" \" T4LIT(%%%%%%%%,success) \" Packet is \" T4LIT(accepted,success) \", \" T4LIT(%d) \"B in \" T4LIT(%d) \" header%s, \" T4LIT(%d) \"B of payload: \", pd->parsed_size, hdr_count, hdr_count != 1 ? \"s\" : \"\", pd->payload_size);", indent_level = 3, lineno = 319)
generated_code += add_code("         } else {", indent_level = 3, lineno = 320)
generated_code += add_code("             debug(\" \" T4LIT(%%%%%%%%,success) \" Packet is \" T4LIT(accepted,success) \", \" T4LIT(%d) \"B in \" T4LIT(%d) \" header%s, \" T4LIT(empty payload) \"\\n\", pd->parsed_size, hdr_count, hdr_count != 1 ? \"s\" : \"\");", indent_level = 3, lineno = 321)
generated_code += add_code("         }", indent_level = 2, lineno = 322)
generated_code += add_code("", indent_level = 2, lineno = 323)
generated_code += add_code("         if (hdr_count == 0) {", indent_level = 2, lineno = 324)
generated_code += add_code("             debug(\"   \" T4LIT(!! No headers were found,warning) \" during parsing, the packet solely consists of payload\\n\");", indent_level = 3, lineno = 325)
generated_code += add_code("         }", indent_level = 2, lineno = 326)
generated_code += add_code("     #endif", indent_level = 1, lineno = 327)
generated_code += add_code(" }", lineno = 328)
generated_code += add_code("", lineno = 329)

generated_code += add_code("")
for parser in hlir.parsers: ## src/hardware_indep/parser.c.py:332
    for s in parser.states: ## src/hardware_indep/parser.c.py:333
        if not s.is_reachable: ## src/hardware_indep/parser.c.py:334
            continue ## src/hardware_indep/parser.c.py:335
        generated_code += add_code(' void parser_state_{}_{}(STDPARAMS) {{'.format(parser.name, s.name), lineno = 336)
        generated_code += add_code("     #ifdef T4P4S_STATS", indent_level = 1, lineno = 337)
        generated_code += add_code('         t4p4s_stats_global.T4STAT(parser,state,{}) = true;'.format(s.name), indent_level = 2, lineno = 338)
        generated_code += add_code('         t4p4s_stats_per_packet.T4STAT(parser,state,{}) = true;'.format(s.name), indent_level = 2, lineno = 339)
        generated_code += add_code("     #endif", indent_level = 1, lineno = 340)
        generated_code += add_code("", indent_level = 1, lineno = 341)
        if s.name == 'accept': ## src/hardware_indep/parser.c.py:344
            generated_code += add_code("     pd->payload_size = packet_size(pd) - (pd->extract_ptr - (void*)pd->data);", indent_level = 1, lineno = 344)
            generated_code += add_code("     print_parsing_success(STDPARAMS_IN);", indent_level = 1, lineno = 345)
        elif s.name == 'reject': ## src/hardware_indep/parser.c.py:347
            generated_code += add_code('     debug(" " T4LIT(XXXX,status) " Parser state " T4LIT({},parserstate) " %s\\n", transition_cond);'.format(s.name), indent_level = 1, lineno = 347)
            generated_code += add_code("     debug(\"   \" T4LIT(XX,status) \" Packet is \" T4LIT(dropped,status) \"\\n\");", indent_level = 1, lineno = 348)
            generated_code += add_code("     drop_packet(STDPARAMS_IN);", indent_level = 1, lineno = 349)
        else: ## src/hardware_indep/parser.c.py:351
            generated_code += add_code('     debug(" %%%%%%%% Parser state " T4LIT({},parserstate) "%s\\n", transition_cond);'.format(s.name), indent_level = 1, lineno = 351)
            generated_code += add_code("     set_transition_txt(\"\");", indent_level = 1, lineno = 352)
            for idx, component in enumerate(s.components): ## src/hardware_indep/parser.c.py:355
                generated_code += add_code('     bool success{} = {}(STDPARAMS_IN);'.format(idx, state_component_name(parser.name, s, idx, component)), indent_level = 1, lineno = 355)
                generated_code += add_code('     if (unlikely(!success{})) {{'.format(idx), indent_level = 1, lineno = 356)
                generated_code += add_code("         debug(\"    \" T4LIT(!,error) \" Parsing \" T4LIT(failed,error) \", \" T4LIT(dropping,status) \" packet\\n\");", indent_level = 2, lineno = 357)
                generated_code += add_code("         return;", indent_level = 2, lineno = 358)
                generated_code += add_code("     }", indent_level = 1, lineno = 359)
            if s.selectExpression.node_type == 'PathExpression': ## src/hardware_indep/parser.c.py:362
                generated_code += add_code('     parser_state_{}_{}(STDPARAMS_IN);'.format(parser.name, s.selectExpression.path.name), indent_level = 1, lineno = 362)
            else: ## src/hardware_indep/parser.c.py:364
                generated_code += add_code('     parser_state_{}_{}_next_state(STDPARAMS_IN);'.format(parser.name, s.name), indent_level = 1, lineno = 364)
        generated_code += add_code(" }", lineno = 366)
        generated_code += add_code("", lineno = 367)
all_stk_hdrs = hlir.header_instances.filter(lambda hdr: 'stack' in hdr) ## src/hardware_indep/parser.c.py:370
for stk in unique_everseen(all_stk_hdrs.map('stack')): ## src/hardware_indep/parser.c.py:371
    generated_code += add_code(' int parser_extract_{}(int vwlen, STDPARAMS) {{'.format(stk.name), lineno = 371)
    generated_code += add_code('     switch (pd->stacks[STK({})].current) {{'.format(stk.name), indent_level = 1, lineno = 372)
    for idx, stkhdr in enumerate(all_stk_hdrs.filter('stack', stk)): ## src/hardware_indep/parser.c.py:375
        generated_code += add_code('         case {}: return parser_extract_{}(vwlen, STDPARAMS_IN);'.format(idx-1, stkhdr.name), indent_level = 2, lineno = 375)
    generated_code += add_code("         default:     return PARSED_OVER_STACK_SIZE; // cannot be reached", indent_level = 2, lineno = 376)
    generated_code += add_code("     }", indent_level = 1, lineno = 377)
    generated_code += add_code(" }", lineno = 378)
    generated_code += add_code("", lineno = 379)
