
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/stateful_memory_type.c.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/stateful_memory_type.c.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/stateful_memory_type.c.py: via hardware_indep/stateful_memory_type.c.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

# SPDX-License-Identifier: Apache-2.0 ## src/hardware_indep/stateful_memory_type.c.py:2
# Copyright 2021 Eotvos Lorand University, Budapest, Hungary ## src/hardware_indep/stateful_memory_type.c.py:3

generated_code += add_code("")
from utils.codegen import format_type ## src/hardware_indep/stateful_memory_type.c.py:5
from hlir16.hlir_model import model_specific_infos ## src/hardware_indep/stateful_memory_type.c.py:6

generated_code += add_code("")
generated_code += add_code(" #pragma once", lineno = 7)

generated_code += add_code("")
generated_code += add_code(" #include <stdbool.h>", lineno = 9)
generated_code += add_code(" #include <stdint.h>", lineno = 10)

generated_code += add_code("")
generated_code += add_code(" #include \"aliases.h\"", lineno = 12)

generated_code += add_code("")
def extern_repr_is_model_specific(extern): ## src/hardware_indep/stateful_memory_type.c.py:16
    return extern.name in model_specific_infos[hlir.news.model]['extern_reprs'] ## src/hardware_indep/stateful_memory_type.c.py:17
for extern in hlir.externs.filter(lambda extern: len(extern.constructors) > 0 or extern_repr_is_model_specific(extern)): ## src/hardware_indep/stateful_memory_type.c.py:20
    if extern.repr is None: ## src/hardware_indep/stateful_memory_type.c.py:21
        continue ## src/hardware_indep/stateful_memory_type.c.py:22
    if 'smem_type' in (smem := extern): ## src/hardware_indep/stateful_memory_type.c.py:24
        struct_name = f'SMEMTYPE({smem.smem_type}_s)' ## src/hardware_indep/stateful_memory_type.c.py:25
    else: ## src/hardware_indep/stateful_memory_type.c.py:26
        struct_name = f'EXTERNTYPE({extern.name}_s)' ## src/hardware_indep/stateful_memory_type.c.py:27
    generated_code += add_code(' struct {} {{'.format(struct_name), lineno = 28)
    generated_code += add_code('     {};'.format(format_type(extern.repr, addon='value', is_atomic=True)), indent_level = 1, lineno = 29)
    generated_code += add_code("     #ifdef T4P4S_DEBUG", indent_level = 1, lineno = 30)
    generated_code += add_code("         char name[256];", indent_level = 1, lineno = 31)
    generated_code += add_code("     #endif", indent_level = 1, lineno = 32)
    generated_code += add_code(" };", lineno = 33)
    generated_code += add_code("", lineno = 34)
