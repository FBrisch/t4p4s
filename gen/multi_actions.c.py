
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/multi_actions.c.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/multi_actions.c.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/multi_actions.c.py: via hardware_indep/multi_actions.c.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

# SPDX-License-Identifier: Apache-2.0 ## src/hardware_indep/multi_actions.c.py:2
# Copyright 2016 Eotvos Lorand University, Budapest, Hungary ## src/hardware_indep/multi_actions.c.py:3

generated_code += add_code("")
from compiler_common import get_hdrfld_name, generate_var_name, SugarStyle, make_const ## src/hardware_indep/multi_actions.c.py:5

generated_code += add_code("")
from compiler_log_warnings_errors import addError, addWarning ## src/hardware_indep/multi_actions.c.py:7
from utils.codegen import format_declaration, format_statement, format_expr, format_type, get_method_call_env ## src/hardware_indep/multi_actions.c.py:8
from compiler_common import types, unique_everseen ## src/hardware_indep/multi_actions.c.py:9

generated_code += add_code("")
generated_code += add_code(" #include <unistd.h>", lineno = 10)

generated_code += add_code("")
generated_code += add_code(" #include \"dpdk_lib.h\"", lineno = 12)
generated_code += add_code(" #include \"actions.h\"", lineno = 13)
generated_code += add_code(" #include \"util_debug.h\"", lineno = 14)
generated_code += add_code(" #include \"util_packet.h\"", lineno = 15)

generated_code += add_code("")
generated_code += add_code(" #include \"dpdk_primitives.h\"", lineno = 17)
generated_code += add_code(" #include \"dpdkx_gen_extern.h\"", lineno = 18)

generated_code += add_code("")
generated_code += add_code(" extern const char* action_names[];", lineno = 20)
generated_code += add_code(" extern const char* action_canonical_names[];", lineno = 21)
generated_code += add_code(" extern const char* action_short_names[];", lineno = 22)

generated_code += add_code("")
generated_code += add_code(" extern void check_hdr_valid(packet_descriptor_t* pd, field_instance_e fld, const char* unspec);", lineno = 24)

generated_code += add_code("")
generated_code += add_code(" extern ctrl_plane_backend bg;", lineno = 26)

generated_code += add_code("")
for mcall in hlir.all_nodes.by_type('MethodCallStatement').map('methodCall').filter(lambda n: 'path' in n.method and n.method.path.name=='digest'): ## src/hardware_indep/multi_actions.c.py:29
    digest = mcall.typeArguments[0] ## src/hardware_indep/multi_actions.c.py:30
    funname = f'{mcall.method.path.name}__{digest.path.name}' ## src/hardware_indep/multi_actions.c.py:31
    generated_code += add_code(' extern {} {}(uint32_t /* ignored */ receiver, ctrl_plane_digest cpd, SHORT_STDPARAMS);'.format(format_type(mcall.urtype), funname), lineno = 32)
generated_code += add_code(" extern void do_assignment(header_instance_e dst_hdr, header_instance_e src_hdr, SHORT_STDPARAMS);", lineno = 34)

generated_code += add_code("")
################################################################################ ## src/hardware_indep/multi_actions.c.py:37

generated_code += add_code("")
part_count = compiler_common.current_compilation['multi'] ## src/hardware_indep/multi_actions.c.py:39
all_ctl_acts = sorted(((ctl, act) for ctl in hlir.controls for act in ctl.actions if len(act.body.components) != 0), key=lambda k: len(k[1].body.components)) ## src/hardware_indep/multi_actions.c.py:40
for idx, (ctl, act) in enumerate(all_ctl_acts): ## src/hardware_indep/multi_actions.c.py:41
    multi_idx = idx % part_count ## src/hardware_indep/multi_actions.c.py:42
    generated_code += add_code(' #if T4P4S_MULTI_IDX == {}'.format(multi_idx), lineno = 42)
    name = act.annotations.annotations.get('name') ## src/hardware_indep/multi_actions.c.py:45
    if name: ## src/hardware_indep/multi_actions.c.py:46
        generated_code += add_code('     // action name: {}; {}'.format(name.expr[0].value, act.canonical_name), indent_level = 1, lineno = 46)
    else: ## src/hardware_indep/multi_actions.c.py:48
        generated_code += add_code('     // action name: {}'.format(act.canonical_name), indent_level = 1, lineno = 48)
    generated_code += add_code('     void action_code_{}(action_{}_params_t parameters, SHORT_STDPARAMS) {{'.format(act.name, act.name), indent_level = 1, lineno = 49)
    if len(act.body.components) != 0: ## src/hardware_indep/multi_actions.c.py:51
        generated_code += add_code('         control_locals_{}_t* local_vars = (control_locals_{}_t*) pd->control_locals;'.format(ctl.name, ctl.name), indent_level = 2, lineno = 51)
        for stmt in act.body.components: ## src/hardware_indep/multi_actions.c.py:54
            global pre_statement_buffer ## src/hardware_indep/multi_actions.c.py:55
            global post_statement_buffer ## src/hardware_indep/multi_actions.c.py:56
            pre_statement_buffer = "" ## src/hardware_indep/multi_actions.c.py:57
            post_statement_buffer = "" ## src/hardware_indep/multi_actions.c.py:58
            code = format_statement(stmt, ctl) ## src/hardware_indep/multi_actions.c.py:60
            if pre_statement_buffer != "": ## src/hardware_indep/multi_actions.c.py:61
                generated_code += pre_statement_buffer ## src/hardware_indep/multi_actions.c.py:61
                pre_statement_buffer = "" ## src/hardware_indep/multi_actions.c.py:63
            generated_code += code ## src/hardware_indep/multi_actions.c.py:63
            if post_statement_buffer != "": ## src/hardware_indep/multi_actions.c.py:65
                generated_code += post_statement_buffer ## src/hardware_indep/multi_actions.c.py:65
                post_statement_buffer = "" ## src/hardware_indep/multi_actions.c.py:67
    generated_code += add_code("     }", indent_level = 1, lineno = 67)
    generated_code += add_code(' #endif // T4P4S_MULTI_IDX == {}'.format(multi_idx), lineno = 68)
    generated_code += add_code("", lineno = 69)
