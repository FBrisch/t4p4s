
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/dataplane_deparse.c.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/dataplane_deparse.c.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/dataplane_deparse.c.py: via hardware_indep/dataplane_deparse.c.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

# SPDX-License-Identifier: Apache-2.0 ## src/hardware_indep/dataplane_deparse.c.py:2
# Copyright 2016 Eotvos Lorand University, Budapest, Hungary ## src/hardware_indep/dataplane_deparse.c.py:3

generated_code += add_code("")
from utils.codegen import format_declaration, format_statement, format_expr, format_type, gen_format_type, get_method_call_env ## src/hardware_indep/dataplane_deparse.c.py:5
from compiler_log_warnings_errors import addError, addWarning ## src/hardware_indep/dataplane_deparse.c.py:6
from compiler_common import types, generate_var_name, get_hdrfld_name, unique_everseen ## src/hardware_indep/dataplane_deparse.c.py:7

generated_code += add_code("")
generated_code += add_code(" #include \"gen_include.h\"", lineno = 8)
generated_code += add_code(" #include \"dataplane_impl.h\"", lineno = 9)
generated_code += add_code(" #include \"dataplane.h\"", lineno = 10)
generated_code += add_code(" #include \"dataplane_stages.h\"", lineno = 11)
generated_code += add_code(" #include \"hdr_fld.h\"", lineno = 12)
generated_code += add_code(" #include \"hdr_fld_sprintf.h\"", lineno = 13)

generated_code += add_code("")
# TODO make this an import from hardware_indep ## src/hardware_indep/dataplane_deparse.c.py:16
generated_code += add_code(" #include \"dpdk_smem.h\"", lineno = 16)

generated_code += add_code("")
longest_hdr_name_len = max({len(h.name) for h in hlir.header_instances if not h.urtype.is_metadata if not h.is_local if not h.is_skipped}) ## src/hardware_indep/dataplane_deparse.c.py:20

generated_code += add_code("")
pkt_name_indent = " " * longest_hdr_name_len ## src/hardware_indep/dataplane_deparse.c.py:22

generated_code += add_code("")
generated_code += add_code(" void print_headers(SHORT_STDPARAMS) {", lineno = 23)
generated_code += add_code("     #ifdef T4P4S_DEBUG", indent_level = 1, lineno = 24)
generated_code += add_code("         int skips = 0;", indent_level = 2, lineno = 25)
generated_code += add_code("         for (int i = 0; i < pd->deparse_hdrinst_count; ++i) {", indent_level = 2, lineno = 26)
generated_code += add_code("             header_descriptor_t hdr = pd->headers[pd->header_reorder[i]];", indent_level = 3, lineno = 27)
generated_code += add_code("             if (unlikely(hdr.pointer == NULL))    ++skips;", indent_level = 3, lineno = 28)
generated_code += add_code("         }", indent_level = 2, lineno = 29)
generated_code += add_code("         int deparses = pd->deparse_hdrinst_count - skips;", indent_level = 2, lineno = 30)
generated_code += add_code("         debug(\" :::: Deparse reordering: preparing \" T4LIT(%d) \" header%s for storage\\n\",", indent_level = 2, lineno = 31)
generated_code += add_code("               deparses, deparses != 1 ? \"s\" : \"\");", indent_level = 2, lineno = 32)
generated_code += add_code("     #endif", indent_level = 1, lineno = 33)
generated_code += add_code(" }", lineno = 34)
generated_code += add_code("", lineno = 35)

generated_code += add_code("")
generated_code += add_code(" void store_headers_for_deparse(SHORT_STDPARAMS) {", lineno = 37)
generated_code += add_code("     pd->deparse_size = 0;", indent_level = 1, lineno = 38)
generated_code += add_code("     for (int i = 0; i < pd->deparse_hdrinst_count; ++i) {", indent_level = 1, lineno = 39)
generated_code += add_code("         header_descriptor_t* hdr = &(pd->headers[pd->header_reorder[i]]);", indent_level = 2, lineno = 40)
generated_code += add_code("", indent_level = 2, lineno = 41)
generated_code += add_code("         if (unlikely(hdr->pointer == NULL)) {", indent_level = 2, lineno = 42)
generated_code += add_code("             #ifdef T4P4S_DEBUG", indent_level = 3, lineno = 43)
generated_code += add_code("                 if (hdr->was_enabled_at_initial_parse) {", indent_level = 4, lineno = 44)
generated_code += add_code('                     debug("        : -" T4LIT(#%02d ,status) "" T4LIT(%{}s,status) "" T4LIT(/%02dB,status) " (invalidated)\\n",'.format(longest_hdr_name_len+1), indent_level = 5, lineno = 45)
generated_code += add_code("                           hdr->type + 1, hdr->name, hdr->size);", indent_level = 5, lineno = 46)
generated_code += add_code("                 }", indent_level = 4, lineno = 47)
generated_code += add_code("             #endif", indent_level = 3, lineno = 48)
generated_code += add_code("             continue;", indent_level = 3, lineno = 49)
generated_code += add_code("         }", indent_level = 2, lineno = 50)
generated_code += add_code("", indent_level = 2, lineno = 51)
generated_code += add_code("         bool at_init = likely(hdr->was_enabled_at_initial_parse);", indent_level = 2, lineno = 52)
generated_code += add_code("", indent_level = 2, lineno = 53)
generated_code += add_code("         if (at_init) {", indent_level = 2, lineno = 54)
generated_code += add_code("             memcpy(pd->header_tmp_storage + hdr_infos[hdr->type].byte_offset, hdr->pointer, hdr->size);", indent_level = 3, lineno = 55)
generated_code += add_code("         }", indent_level = 2, lineno = 56)
generated_code += add_code("", indent_level = 2, lineno = 57)
generated_code += add_code("         #ifdef T4P4S_DEBUG", indent_level = 2, lineno = 58)
generated_code += add_code("             char fields_txt[4096];", indent_level = 3, lineno = 59)
generated_code += add_code('             debug("        : %s" T4LIT(#%02d) " " T4LIT(%{}s,header) "/" T4LIT(%02dB) " = %s\\n",'.format(longest_hdr_name_len), indent_level = 3, lineno = 60)
generated_code += add_code("                   at_init ? \" \" : \"+\", hdr->type + 1, hdr->name, hdr->size,", indent_level = 3, lineno = 61)
generated_code += add_code("                   hdr->pointer == NULL ? T4LIT((invalid),warning) \" \" : sprintf_hdr(fields_txt, pd, hdr));", indent_level = 3, lineno = 62)
generated_code += add_code("         #endif", indent_level = 2, lineno = 63)
generated_code += add_code("", indent_level = 2, lineno = 64)
generated_code += add_code("         pd->deparse_size += hdr->size;", indent_level = 2, lineno = 65)
generated_code += add_code("     }", indent_level = 1, lineno = 66)
generated_code += add_code(" }", lineno = 67)
generated_code += add_code("", lineno = 68)

generated_code += add_code("")
generated_code += add_code(" void resize_packet_on_deparse(SHORT_STDPARAMS)", lineno = 70)
generated_code += add_code(" {", lineno = 71)
generated_code += add_code("     int old_size = packet_size(pd);", indent_level = 1, lineno = 72)
generated_code += add_code("     int new_size = pd->deparse_size + pd->payload_size;", indent_level = 1, lineno = 73)
generated_code += add_code("     if (likely(new_size == old_size)) {", indent_level = 1, lineno = 74)
generated_code += add_code("         return;", indent_level = 2, lineno = 75)
generated_code += add_code("     }", indent_level = 1, lineno = 76)
generated_code += add_code("", indent_level = 1, lineno = 77)
generated_code += add_code("     int len_change = new_size - old_size;", indent_level = 1, lineno = 78)
generated_code += add_code("     if (likely(len_change > 0)) {", indent_level = 1, lineno = 79)
generated_code += add_code("         char* new_ptr = rte_pktmbuf_prepend(pd->wrapper, len_change);", indent_level = 2, lineno = 80)
generated_code += add_code("         if (unlikely(new_ptr == 0)) {", indent_level = 2, lineno = 81)
generated_code += add_code('             rte_exit(1, "Could not reserve necessary headroom (" T4LIT(%d) " additional bytes)", len_change);', indent_level = 2, lineno = 82)
generated_code += add_code("         }", indent_level = 2, lineno = 83)
generated_code += add_code("         pd->data = (packet_data_t*)new_ptr;", indent_level = 2, lineno = 84)
generated_code += add_code("     } else {", indent_level = 2, lineno = 85)
generated_code += add_code("         char* new_ptr = rte_pktmbuf_adj(pd->wrapper, -len_change);", indent_level = 2, lineno = 86)
generated_code += add_code("         pd->data = (packet_data_t*)new_ptr;", indent_level = 2, lineno = 87)
generated_code += add_code("     }", indent_level = 1, lineno = 88)
generated_code += add_code("     pd->wrapper->pkt_len = new_size;", indent_level = 1, lineno = 89)
generated_code += add_code(" }", lineno = 90)
generated_code += add_code("", lineno = 91)

generated_code += add_code("")
generated_code += add_code(" // if (some of) the deparsed headers are one after another, this function copies them in one go", lineno = 93)
generated_code += add_code(" void copy_deparse_contents(SHORT_STDPARAMS)", lineno = 94)
generated_code += add_code(" {", lineno = 95)
generated_code += add_code("     uint8_t* dst_start = rte_pktmbuf_mtod(pd->wrapper, uint8_t*);", indent_level = 1, lineno = 96)
generated_code += add_code("     uint8_t* dst = dst_start;", indent_level = 1, lineno = 97)
generated_code += add_code("     for (int idx = 0; idx < pd->deparse_hdrinst_count; ) {", indent_level = 1, lineno = 98)
generated_code += add_code("         header_descriptor_t hdr = pd->headers[pd->header_reorder[idx]];", indent_level = 2, lineno = 99)
generated_code += add_code("         if (unlikely(hdr.pointer == NULL))    { ++idx; continue; }", indent_level = 2, lineno = 100)

generated_code += add_code("", indent_level = 2)
generated_code += add_code("         uint8_t* copy_start = hdr.pointer;", indent_level = 2, lineno = 102)
generated_code += add_code("         int copy_start_idx  = idx;", indent_level = 2, lineno = 103)
generated_code += add_code("         int copy_size       = hdr.size;", indent_level = 2, lineno = 104)
generated_code += add_code("         int count           = 1;", indent_level = 2, lineno = 105)

generated_code += add_code("", indent_level = 2)
generated_code += add_code("         ++idx;", indent_level = 2, lineno = 107)
generated_code += add_code("         while (idx < pd->deparse_hdrinst_count) {", indent_level = 2, lineno = 108)
generated_code += add_code("             header_descriptor_t prevhdr = hdr;", indent_level = 3, lineno = 109)
generated_code += add_code("             int prevlen = hdr.size;", indent_level = 3, lineno = 110)
generated_code += add_code("             hdr = pd->headers[pd->header_reorder[idx]];", indent_level = 3, lineno = 111)

generated_code += add_code("", indent_level = 3)
generated_code += add_code("             if (unlikely(hdr.pointer != prevhdr.pointer + prevlen)) break;", indent_level = 3, lineno = 113)

generated_code += add_code("", indent_level = 3)
generated_code += add_code("             ++count;", indent_level = 3, lineno = 115)
generated_code += add_code("             ++idx;", indent_level = 3, lineno = 116)
generated_code += add_code("             if (unlikely(hdr.pointer == NULL))    continue;", indent_level = 3, lineno = 117)
generated_code += add_code("             copy_size += hdr.size;", indent_level = 3, lineno = 118)
generated_code += add_code("         }", indent_level = 2, lineno = 119)

generated_code += add_code("", indent_level = 2)
generated_code += add_code("         memcpy(dst, copy_start, copy_size);", indent_level = 2, lineno = 121)
generated_code += add_code("         dst += copy_size;", indent_level = 2, lineno = 122)
generated_code += add_code("     }", indent_level = 1, lineno = 123)
generated_code += add_code(" }", lineno = 124)

generated_code += add_code("")
generated_code += add_code(" bool is_packet_dropped(packet_descriptor_t* pd) {", lineno = 126)
generated_code += add_code("      return get_egress_port(pd) == EGRESS_DROP_VALUE;", indent_level = 1, lineno = 127)
generated_code += add_code(" }", lineno = 128)

generated_code += add_code("")
generated_code += add_code(" void deparse_packet(SHORT_STDPARAMS)", lineno = 131)
generated_code += add_code(" {", lineno = 132)
generated_code += add_code("     if (unlikely(pd->is_deparse_reordering)) {", indent_level = 1, lineno = 133)
generated_code += add_code("         if (unlikely(is_packet_dropped(pd))) {", indent_level = 2, lineno = 134)
generated_code += add_code("             return;", indent_level = 3, lineno = 135)
generated_code += add_code("         }", indent_level = 2, lineno = 136)
generated_code += add_code("         print_headers(SHORT_STDPARAMS_IN);", indent_level = 2, lineno = 137)
generated_code += add_code("         store_headers_for_deparse(SHORT_STDPARAMS_IN);", indent_level = 2, lineno = 138)
generated_code += add_code("         resize_packet_on_deparse(SHORT_STDPARAMS_IN);", indent_level = 2, lineno = 139)
generated_code += add_code("         copy_deparse_contents(SHORT_STDPARAMS_IN);", indent_level = 2, lineno = 140)
generated_code += add_code("     } else {", indent_level = 2, lineno = 141)
generated_code += add_code("         if (unlikely(is_packet_dropped(pd))) {", indent_level = 2, lineno = 142)
generated_code += add_code("             return;", indent_level = 3, lineno = 143)
generated_code += add_code("         } else {", indent_level = 3, lineno = 144)
generated_code += add_code("         }", indent_level = 2, lineno = 145)
generated_code += add_code("     }", indent_level = 1, lineno = 146)
generated_code += add_code(" }", lineno = 147)
generated_code += add_code("", lineno = 148)
