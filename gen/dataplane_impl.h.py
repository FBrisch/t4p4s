
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/dataplane_impl.h.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/dataplane_impl.h.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/dataplane_impl.h.py: via hardware_indep/dataplane_impl.h.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

# SPDX-License-Identifier: Apache-2.0 ## src/hardware_indep/dataplane_impl.h.py:2
# Copyright 2021 Eotvos Lorand University, Budapest, Hungary ## src/hardware_indep/dataplane_impl.h.py:3

generated_code += add_code("")
generated_code += add_code(" #pragma once", lineno = 4)

generated_code += add_code("")
from utils.codegen import format_declaration, format_statement, format_expr, format_type, gen_format_type, get_method_call_env ## src/hardware_indep/dataplane_impl.h.py:7
from compiler_log_warnings_errors import addError, addWarning ## src/hardware_indep/dataplane_impl.h.py:8
from compiler_common import types, generate_var_name, get_hdrfld_name, unique_everseen ## src/hardware_indep/dataplane_impl.h.py:9

generated_code += add_code("")
generated_code += add_code(" #include <stdlib.h>", lineno = 10)
generated_code += add_code(" #include <string.h>", lineno = 11)
generated_code += add_code(" #include <stdbool.h>", lineno = 12)
generated_code += add_code(" #include <netinet/in.h>", lineno = 13)

generated_code += add_code("")
generated_code += add_code(" #include \"dpdk_lib.h\"", lineno = 15)
generated_code += add_code(" #include \"actions.h\"", lineno = 16)
generated_code += add_code(" #include \"backend.h\"", lineno = 17)
generated_code += add_code(" #include \"util_debug.h\"", lineno = 18)
generated_code += add_code(" #include \"tables.h\"", lineno = 19)
generated_code += add_code(" #include \"gen_include.h\"", lineno = 20)

generated_code += add_code("")
generated_code += add_code(" #ifdef T4P4S_P4RT", lineno = 22)
generated_code += add_code("     #include \"PI/proto/pi_server.h\"", indent_level = 1, lineno = 23)
generated_code += add_code("     #include \"p4rt/device_mgr.h\"", indent_level = 1, lineno = 24)
generated_code += add_code("     extern device_mgr_t *dev_mgr_ptr;", indent_level = 1, lineno = 25)
generated_code += add_code(" #endif", lineno = 26)

generated_code += add_code("")
generated_code += add_code(" extern ctrl_plane_backend bg;", lineno = 28)
generated_code += add_code(" extern const char* action_short_names[];", lineno = 29)
generated_code += add_code(" extern const char* action_names[];", lineno = 30)

generated_code += add_code("")
generated_code += add_code(" void parse_packet(STDPARAMS);", lineno = 32)
generated_code += add_code(" void increase_counter(int counterid, int index);", lineno = 33)
generated_code += add_code(" void set_handle_packet_metadata(packet_descriptor_t* pd, uint32_t portid);", lineno = 34)

generated_code += add_code("")
generated_code += add_code(" #ifdef T4P4S_STATS", lineno = 36)
generated_code += add_code("     extern t4p4s_stats_t t4p4s_stats_global;", indent_level = 1, lineno = 37)
generated_code += add_code("     extern t4p4s_stats_t t4p4s_stats_per_packet;", indent_level = 1, lineno = 38)
generated_code += add_code(" #endif", lineno = 39)

generated_code += add_code("")
generated_code += add_code(" void update_packet(STDPARAMS);", lineno = 41)

generated_code += add_code("")
table_infos = [(table, table.short_name + ("/keyless" if table.key_bit_size == 0 else "") + ("/hidden" if table.is_hidden else "")) for table in hlir.tables] ## src/hardware_indep/dataplane_impl.h.py:44

generated_code += add_code("")
for table in hlir.tables: ## src/hardware_indep/dataplane_impl.h.py:46
    if 'key' not in table or table.key_bit_size == 0: ## src/hardware_indep/dataplane_impl.h.py:47
        continue ## src/hardware_indep/dataplane_impl.h.py:48
    generated_code += add_code(' void table_{}_key(packet_descriptor_t* pd, uint8_t* key KEYTXTPARAMS);'.format(table.name), lineno = 49)
for table, table_info in table_infos: ## src/hardware_indep/dataplane_impl.h.py:52
    generated_code += add_code(' void {}_stats(int action_id, STDPARAMS);'.format(table.name), lineno = 52)
for table, table_info in table_infos: ## src/hardware_indep/dataplane_impl.h.py:55
    generated_code += add_code(' ENTRY({})* {}_get_default_entry(STDPARAMS);'.format(table.name, table.name), lineno = 55)
for table, table_info in table_infos: ## src/hardware_indep/dataplane_impl.h.py:58
    if len(table.direct_meters + table.direct_counters) == 0: ## src/hardware_indep/dataplane_impl.h.py:59
        continue ## src/hardware_indep/dataplane_impl.h.py:60
    generated_code += add_code(' void {}_apply_smems(STDPARAMS);'.format(table.name), lineno = 61)
packet_name = hlir.news.main.type.baseType.type_ref.name ## src/hardware_indep/dataplane_impl.h.py:65
pipeline_elements = hlir.news.main.arguments ## src/hardware_indep/dataplane_impl.h.py:66

generated_code += add_code("")
generated_code += add_code(" typedef struct {", lineno = 67)
generated_code += add_code("     bool hit;", indent_level = 1, lineno = 68)
generated_code += add_code("     int action_run;", indent_level = 1, lineno = 69)
generated_code += add_code(" } apply_result_t;", lineno = 70)
generated_code += add_code("", lineno = 71)

generated_code += add_code("")
for ctl in hlir.controls: ## src/hardware_indep/dataplane_impl.h.py:74
    generated_code += add_code(' void control_{}(STDPARAMS);'.format(ctl.name), lineno = 74)
generated_code += add_code("", lineno = 75)

generated_code += add_code("")
for ctl in hlir.controls: ## src/hardware_indep/dataplane_impl.h.py:78
    for t in ctl.controlLocals['P4Table']: ## src/hardware_indep/dataplane_impl.h.py:79
        generated_code += add_code(' apply_result_t {}_apply(STDPARAMS);'.format(t.name), lineno = 79)
for table, table_info in table_infos: ## src/hardware_indep/dataplane_impl.h.py:82
    if len(table.direct_meters + table.direct_counters) == 0: ## src/hardware_indep/dataplane_impl.h.py:83
        continue ## src/hardware_indep/dataplane_impl.h.py:84
    generated_code += add_code(' void {}_apply_smems(STDPARAMS);'.format(table.name), lineno = 85)
generated_code += add_code(" #ifdef T4P4S_DEBUG", lineno = 87)
generated_code += add_code("     void show_params_by_action_id(char* out, int table_id, int action_id, const void* entry);", indent_level = 1, lineno = 88)

generated_code += add_code("", indent_level = 1)
for table in hlir.tables: ## src/hardware_indep/dataplane_impl.h.py:91
    if 'key' not in table or table.key_bit_size == 0: ## src/hardware_indep/dataplane_impl.h.py:92
        continue ## src/hardware_indep/dataplane_impl.h.py:93
    generated_code += add_code('     void {}_apply_show_hit_with_key(bool hit, const ENTRY({})* entry  KEYTXTPARAM, STDPARAMS);'.format(table.name, table.name), indent_level = 1, lineno = 94)
    for dbg_action in table.actions: ## src/hardware_indep/dataplane_impl.h.py:97
        aoname = dbg_action.action_object.name ## src/hardware_indep/dataplane_impl.h.py:98
        generated_code += add_code('     void {}_show_params_{}(char* out, const action_{}_params_t* actpar);'.format(table.name, aoname, aoname), indent_level = 1, lineno = 98)
generated_code += add_code(" #endif", lineno = 100)

generated_code += add_code("")
for table, table_info in table_infos: ## src/hardware_indep/dataplane_impl.h.py:103
    if 'key' in table and table.key_bit_size > 0: ## src/hardware_indep/dataplane_impl.h.py:104
        continue ## src/hardware_indep/dataplane_impl.h.py:105
    generated_code += add_code(' void {}_apply_show_hit(int action_id, STDPARAMS);'.format(table.name), lineno = 106)
generated_code += add_code(" void table_set_default_action(lookup_table_t* table, ENTRYBASE* entry);", lineno = 109)
