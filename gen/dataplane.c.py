
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/dataplane.c.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/dataplane.c.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/dataplane.c.py: via hardware_indep/dataplane.c.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

# SPDX-License-Identifier: Apache-2.0 ## src/hardware_indep/dataplane.c.py:2
# Copyright 2016 Eotvos Lorand University, Budapest, Hungary ## src/hardware_indep/dataplane.c.py:3

generated_code += add_code("")
from utils.codegen import format_declaration, format_statement, format_expr, format_type, gen_format_type, get_method_call_env ## src/hardware_indep/dataplane.c.py:5
from compiler_log_warnings_errors import addError, addWarning ## src/hardware_indep/dataplane.c.py:6
from compiler_common import types, generate_var_name, get_hdrfld_name, unique_everseen ## src/hardware_indep/dataplane.c.py:7

generated_code += add_code("")
generated_code += add_code(" #include \"gen_include.h\"", lineno = 8)
generated_code += add_code(" #include \"dataplane_impl.h\"", lineno = 9)
generated_code += add_code(" #include \"dataplane.h\"", lineno = 10)
generated_code += add_code(" #include \"dataplane_stages.h\"", lineno = 11)
generated_code += add_code(" #include \"hdr_fld.h\"", lineno = 12)

generated_code += add_code("")
# TODO make this an import from hardware_indep ## src/hardware_indep/dataplane.c.py:15
generated_code += add_code(" #include \"dpdk_smem.h\"", lineno = 15)

generated_code += add_code("")
table_infos = [(table, table.short_name + ("/keyless" if table.key_bit_size == 0 else "") + ("/hidden" if table.is_hidden else "")) for table in hlir.tables] ## src/hardware_indep/dataplane.c.py:18

generated_code += add_code("")
################################################################################ ## src/hardware_indep/dataplane.c.py:20

generated_code += add_code("")
for parser in hlir.parsers: ## src/hardware_indep/dataplane.c.py:22
    generated_code += add_code(' void parser_state_{}_start(STDPARAMS);'.format(parser.name), lineno = 22)
################################################################################ ## src/hardware_indep/dataplane.c.py:25
# Table application ## src/hardware_indep/dataplane.c.py:26

generated_code += add_code("")
for type in unique_everseen([comp['type'] for table in hlir.tables for smem in table.direct_meters + table.direct_counters for comp in smem.components]): ## src/hardware_indep/dataplane.c.py:28
    generated_code += add_code(' void apply_direct_smem_{}(register_uint32_t* smem, uint32_t value, char* table_name, char* smem_type_name, char* smem_name) {{'.format(type), lineno = 28)
    generated_code += add_code('    debug("     : applying apply_direct_smem_{}(register_uint32_t (*smem)[1], uint32_t value, char* table_name, char* smem_type_name, char* smem_name)");'.format(type), lineno = 29)
    generated_code += add_code(" }", lineno = 30)
################################################################################ ## src/hardware_indep/dataplane.c.py:33

generated_code += add_code("")
generated_code += add_code(" void reset_vw_fields(SHORT_STDPARAMS) {", lineno = 34)
for hdr in hlir.header_instances.filterfalse('urtype.is_metadata').filter('urtype.is_vw'): ## src/hardware_indep/dataplane.c.py:36
    generated_code += add_code(' pd->headers[HDR({})].vw_size = 0;'.format(hdr.name), indent_level = 1, lineno = 36)
generated_code += add_code(" }", lineno = 37)

generated_code += add_code("")
generated_code += add_code(" void reset_headers(SHORT_STDPARAMS) {", lineno = 39)
generated_code += add_code("     pd->is_deparse_reordering = false;", indent_level = 1, lineno = 40)
for hdr in hlir.header_instances.filter('urtype.is_metadata', False): ## src/hardware_indep/dataplane.c.py:42
    generated_code += add_code('     pd->headers[HDR({})].pointer = NULL;'.format(hdr.name), indent_level = 1, lineno = 42)
for stk in hlir.header_stacks: ## src/hardware_indep/dataplane.c.py:45
    generated_code += add_code('     pd->stacks[STK({})].current = -1;'.format(stk.name), indent_level = 1, lineno = 45)
generated_code += add_code("     // reset metadatas", indent_level = 1, lineno = 47)
generated_code += add_code("     memset(pd->headers[HDR(all_metadatas)].pointer, 0, hdr_infos[HDR(all_metadatas)].byte_width * sizeof(uint8_t));", indent_level = 1, lineno = 48)
generated_code += add_code("", indent_level = 1, lineno = 49)
generated_code += add_code("     reset_vw_fields(SHORT_STDPARAMS_IN);", indent_level = 1, lineno = 50)
generated_code += add_code(" }", lineno = 51)

generated_code += add_code("")
generated_code += add_code(" void init_header(header_instance_e hdrinst, const char* hdrname, SHORT_STDPARAMS) {", lineno = 54)
generated_code += add_code("     pd->headers[hdrinst] = (header_descriptor_t) {", indent_level = 1, lineno = 55)
generated_code += add_code("         .type = hdrinst,", indent_level = 2, lineno = 56)
generated_code += add_code("         .size = hdr_infos[hdrinst].byte_width,", indent_level = 2, lineno = 57)
generated_code += add_code("         .pointer = NULL,", indent_level = 2, lineno = 58)
generated_code += add_code("         .vw_size = 0,", indent_level = 2, lineno = 59)
generated_code += add_code("         #ifdef T4P4S_DEBUG", indent_level = 2, lineno = 60)
generated_code += add_code("             .name = hdrname,", indent_level = 2, lineno = 61)
generated_code += add_code("         #endif", indent_level = 2, lineno = 62)
generated_code += add_code("     };", indent_level = 1, lineno = 63)
generated_code += add_code(" }", lineno = 64)
generated_code += add_code("", lineno = 65)

generated_code += add_code("")
generated_code += add_code(" void init_metadata_header(SHORT_STDPARAMS) {", lineno = 68)
generated_code += add_code("     pd->headers[HDR(all_metadatas)] = (header_descriptor_t) {", indent_level = 1, lineno = 69)
generated_code += add_code("         .type = HDR(all_metadatas),", indent_level = 2, lineno = 70)
generated_code += add_code("         .size = hdr_infos[HDR(all_metadatas)].byte_width * 8,", indent_level = 2, lineno = 71)
generated_code += add_code("         .pointer = rte_malloc(\"all_metadatas_t\", hdr_infos[HDR(all_metadatas)].byte_width * sizeof(uint8_t), 0),", indent_level = 2, lineno = 72)
generated_code += add_code("         .vw_size = 0,", indent_level = 2, lineno = 73)
generated_code += add_code("     };", indent_level = 1, lineno = 74)
generated_code += add_code(" }", lineno = 75)
generated_code += add_code("", lineno = 76)

generated_code += add_code("")
generated_code += add_code(" void init_headers(SHORT_STDPARAMS) {", lineno = 79)
for hdr in hlir.header_instances.filter('urtype.is_metadata', False): ## src/hardware_indep/dataplane.c.py:81
    generated_code += add_code('     init_header(HDR({}), "{}", SHORT_STDPARAMS_IN);'.format(hdr.name, hdr.name), indent_level = 1, lineno = 81)
generated_code += add_code("     init_metadata_header(SHORT_STDPARAMS_IN);", indent_level = 1, lineno = 83)
generated_code += add_code(" }", lineno = 84)
generated_code += add_code("", lineno = 85)

generated_code += add_code("")
################################################################################ ## src/hardware_indep/dataplane.c.py:88

generated_code += add_code("")
generated_code += add_code(" void init_dataplane(SHORT_STDPARAMS) {", lineno = 89)
generated_code += add_code("     init_headers(SHORT_STDPARAMS_IN);", indent_level = 1, lineno = 90)
generated_code += add_code("     reset_headers(SHORT_STDPARAMS_IN);", indent_level = 1, lineno = 91)

generated_code += add_code("", indent_level = 1)
generated_code += add_code("     MODIFY(dst_pkt(pd), EGRESS_META_FLD, src_32(EGRESS_INIT_VALUE), ENDIAN_KEEP);", indent_level = 1, lineno = 93)
generated_code += add_code(" }", lineno = 94)

generated_code += add_code("")
################################################################################ ## src/hardware_indep/dataplane.c.py:97
# Pipeline ## src/hardware_indep/dataplane.c.py:98

generated_code += add_code("")
for ctl in hlir.controls: ## src/hardware_indep/dataplane.c.py:100
    if len(ctl.body.components) == 0: ## src/hardware_indep/dataplane.c.py:101
        generated_code += add_code(' // skipping method generation for empty control {}'.format(ctl.name), lineno = 101)
        continue ## src/hardware_indep/dataplane.c.py:103
    generated_code += add_code(' void control_{}(STDPARAMS)  {{'.format(ctl.name), lineno = 104)
    generated_code += add_code('     control_locals_{}_t local_vars_struct;'.format(ctl.name), indent_level = 1, lineno = 105)
    generated_code += add_code("     pd->control_locals = (void*)&local_vars_struct;", indent_level = 1, lineno = 106)
    for idx, comp in enumerate(ctl.body.components): ## src/hardware_indep/dataplane.c.py:108
        generated_code += add_code('     control_stage_{}_{}(&local_vars_struct, STDPARAMS_IN);'.format(ctl.name, idx), indent_level = 1, lineno = 108)
    generated_code += add_code(" }", lineno = 109)
    generated_code += add_code("", lineno = 110)
################################################################################ ## src/hardware_indep/dataplane.c.py:113

generated_code += add_code("")
def has_annotation(node, annot_name): ## src/hardware_indep/dataplane.c.py:115
    return node.annotations.get(annot_name) is not None ## src/hardware_indep/dataplane.c.py:116
def gen_use_package(decl, depth): ## src/hardware_indep/dataplane.c.py:118
    generated_code = ""
    for arg in decl.arguments.map('expression'): ## src/hardware_indep/dataplane.c.py:119
        if arg.node_type == 'PathExpression': ## src/hardware_indep/dataplane.c.py:120
            decl2 = hlir.decl_instances.get(arg.path.name) ## src/hardware_indep/dataplane.c.py:121
            generated_code += add_code(' // {} {}'.format(arg.urtype.name, arg.path.name), lineno = 121)
            generated_code += add_code(" {", lineno = 122)
            generated_code += gen_use_package(decl2, depth+1) ## src/hardware_indep/dataplane.c.py:123
            generated_code += add_code(" }", lineno = 124)
        elif (ctl := arg.urtype).node_type == 'Type_Control': ## src/hardware_indep/dataplane.c.py:126
            if len(hlir.controls.get(ctl.name).body.components) == 0: ## src/hardware_indep/dataplane.c.py:127
                generated_code += add_code(' // control {} is empty'.format(ctl.name), lineno = 127)
                continue ## src/hardware_indep/dataplane.c.py:129
            generated_code += add_code(' control_{}(STDPARAMS_IN);'.format(ctl.name), lineno = 129)
            if ctl.name in hlir.news.deparsers or has_annotation(ctl, 'deparser'): ## src/hardware_indep/dataplane.c.py:131
                generated_code += add_code("     deparse_packet(SHORT_STDPARAMS_IN);", lineno = 131)
        elif (parser := arg.urtype).node_type == 'Type_Parser': ## src/hardware_indep/dataplane.c.py:133
            generated_code += add_code(' parser_state_{}_start(STDPARAMS_IN);'.format(parser.name), lineno = 133)
            generated_code += add_code(" if (unlikely(is_packet_dropped(pd)))   return;", lineno = 134)
        elif (extern := arg.urtype).node_type == 'Type_Extern': ## src/hardware_indep/dataplane.c.py:136
            generated_code += add_code(' // nonpkg {} {}'.format(arg.urtype.name, arg.urtype.node_type), lineno = 136)
        else: ## src/hardware_indep/dataplane.c.py:138
            addWarning('Unknown item in package', f'Item {arg.name} in package {pkg.urtype.name} {pkg.name} is of unknown type {arg.urtype.name}') ## src/hardware_indep/dataplane.c.py:139
    return generated_code
main_decl = hlir.decl_instances.filter('urtype.name', hlir.news.model)[0] ## src/hardware_indep/dataplane.c.py:141
generated_code += add_code(" void process_packet(STDPARAMS) {", lineno = 141)
generated_code += gen_use_package(main_decl, 0) ## src/hardware_indep/dataplane.c.py:142
generated_code += add_code(" }", lineno = 143)
generated_code += add_code("", lineno = 144)

generated_code += add_code("")
generated_code += add_code(" extern void deparse_packet(SHORT_STDPARAMS);", lineno = 146)
generated_code += add_code("", lineno = 147)

generated_code += add_code("")
generated_code += add_code(" void handle_packet(uint32_t portid, int pkt_idx, STDPARAMS)", lineno = 149)
generated_code += add_code(" {", lineno = 150)
generated_code += add_code("     reset_headers(SHORT_STDPARAMS_IN);", indent_level = 1, lineno = 151)
generated_code += add_code("     set_handle_packet_metadata(pd, portid);", indent_level = 1, lineno = 152)
generated_code += add_code("", indent_level = 1, lineno = 153)
generated_code += add_code('     dbg_bytes(pd->data, packet_size(pd), "Handling packet " T4LIT(#%03d) " (port " T4LIT(%d,port) ", " T4LIT(%02dB) "): ", pkt_idx, get_ingress_port(pd), packet_size(pd));', indent_level = 1, lineno = 154)
generated_code += add_code("", indent_level = 1, lineno = 155)
generated_code += add_code("     pd->parsed_size = 0;", indent_level = 1, lineno = 156)
generated_code += add_code("     pd->extract_ptr = pd->data;", indent_level = 1, lineno = 157)
generated_code += add_code("", indent_level = 1, lineno = 158)
generated_code += add_code("     pd->deparse_hdrinst_count = 0;", indent_level = 1, lineno = 159)
generated_code += add_code("", indent_level = 1, lineno = 160)
generated_code += add_code("     process_packet(STDPARAMS_IN);", indent_level = 1, lineno = 161)
generated_code += add_code("", indent_level = 1, lineno = 162)
generated_code += add_code("     deparse_packet(SHORT_STDPARAMS_IN);", indent_level = 1, lineno = 163)
generated_code += add_code(" }", lineno = 164)
generated_code += add_code("", lineno = 165)
