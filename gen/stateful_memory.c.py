
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/stateful_memory.c.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/stateful_memory.c.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/stateful_memory.c.py: via hardware_indep/stateful_memory.c.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

# SPDX-License-Identifier: Apache-2.0 ## src/hardware_indep/stateful_memory.c.py:2
# Copyright 2018 Eotvos Lorand University, Budapest, Hungary ## src/hardware_indep/stateful_memory.c.py:3

generated_code += add_code("")
from utils.codegen import format_expr, format_statement, format_declaration ## src/hardware_indep/stateful_memory.c.py:5
from utils.extern import get_smem_name ## src/hardware_indep/stateful_memory.c.py:6
from compiler_common import unique_everseen ## src/hardware_indep/stateful_memory.c.py:7

generated_code += add_code("")
generated_code += add_code(" #include \"stateful_memory.h\"", lineno = 8)

generated_code += add_code("")
generated_code += add_code(" global_state_t global_smem;", lineno = 10)

generated_code += add_code("")
for stype in unique_everseen(smem.smem_type for table, smem in hlir.smem.all_meters + hlir.smem.all_counters): ## src/hardware_indep/stateful_memory.c.py:13
    generated_code += add_code(' void init_{}_smem(SMEMTYPE({}) smem[], int amount, const char*const name, const char*const purpose) {{'.format(stype, stype), lineno = 13)
    generated_code += add_code("     #ifdef T4P4S_DEBUG", indent_level = 1, lineno = 14)
    generated_code += add_code("         for (int idx = 0; idx < amount; ++idx) {", indent_level = 2, lineno = 15)
    generated_code += add_code("             sprintf(smem[idx].name, \"%s/%s\", name, purpose);", indent_level = 3, lineno = 16)
    generated_code += add_code("         }", indent_level = 2, lineno = 17)
    generated_code += add_code("     #endif", indent_level = 1, lineno = 18)
    generated_code += add_code(" }", lineno = 19)
    generated_code += add_code("", lineno = 20)
generated_code += add_code(" void gen_init_smems() {", lineno = 23)
generated_code += add_code(" #ifdef T4P4S_DEBUG", indent_level = 1, lineno = 24)
for _, smem in hlir.smem.all_meters + hlir.smem.all_counters: ## src/hardware_indep/stateful_memory.c.py:26
    if smem.is_direct: ## src/hardware_indep/stateful_memory.c.py:27
        generated_code += add_code('     strcpy(global_smem.{}[0].name, "{}/{}");'.format(get_smem_name(smem), smem.name, smem.packets_or_bytes), indent_level = 1, lineno = 27)
    else: ## src/hardware_indep/stateful_memory.c.py:29
        generated_code += add_code('     init_{}_smem(global_smem.{}, {}, "{}", "{}");'.format(smem.smem_type, get_smem_name(smem), smem.amount, smem.name, smem.packets_or_bytes), indent_level = 1, lineno = 29)
generated_code += add_code("", indent_level = 1, lineno = 31)

generated_code += add_code("", indent_level = 1)
for reg in hlir.smem.registers: ## src/hardware_indep/stateful_memory.c.py:34
    generated_code += add_code('     for (int idx = 0; idx < {}; ++idx) {{'.format(reg.amount), indent_level = 1, lineno = 34)
    generated_code += add_code('         strcpy(global_smem.{}[idx].name, "{}");'.format(get_smem_name(reg), reg.name), indent_level = 2, lineno = 35)
    generated_code += add_code("     }", indent_level = 1, lineno = 36)
    generated_code += add_code("", indent_level = 1, lineno = 38)
generated_code += add_code(" #endif", indent_level = 1, lineno = 40)
generated_code += add_code(" }", lineno = 41)
