
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/multi_dataplane.c.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/multi_dataplane.c.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/multi_dataplane.c.py: via hardware_indep/multi_dataplane.c.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

# SPDX-License-Identifier: Apache-2.0 ## src/hardware_indep/multi_dataplane.c.py:2
# Copyright 2021 Eotvos Lorand University, Budapest, Hungary ## src/hardware_indep/multi_dataplane.c.py:3

generated_code += add_code("")
part_count = compiler_common.current_compilation['multi'] ## src/hardware_indep/multi_dataplane.c.py:5

generated_code += add_code("")
from utils.codegen import format_declaration, format_statement, format_expr, format_type, gen_format_type, get_method_call_env ## src/hardware_indep/multi_dataplane.c.py:7
from compiler_log_warnings_errors import addError, addWarning ## src/hardware_indep/multi_dataplane.c.py:8
from compiler_common import types, generate_var_name, get_hdrfld_name, unique_everseen ## src/hardware_indep/multi_dataplane.c.py:9

generated_code += add_code("")
generated_code += add_code(" #include \"dataplane_impl.h\"", lineno = 10)
generated_code += add_code(" #include \"gen_model.h\"", lineno = 11)

generated_code += add_code("")
# TODO make this an import from hardware_indep ## src/hardware_indep/multi_dataplane.c.py:14
generated_code += add_code(" #include \"dpdk_smem.h\"", lineno = 14)
generated_code += add_code("", lineno = 15)

generated_code += add_code("")
table_names = (table.short_name + ("/keyless" if table.key_bit_size == 0 else "") + ("/hidden" if table.is_hidden else "") for table in hlir.tables) ## src/hardware_indep/multi_dataplane.c.py:18
all_table_infos = sorted(zip(hlir.tables, table_names), key=lambda k: len(k[0].actions)) ## src/hardware_indep/multi_dataplane.c.py:19
for part_idx, (table, table_info) in enumerate(all_table_infos): ## src/hardware_indep/multi_dataplane.c.py:20
    multi_idx = part_idx % part_count ## src/hardware_indep/multi_dataplane.c.py:21
    generated_code += add_code(' #if T4P4S_MULTI_IDX == {}'.format(multi_idx), lineno = 21)
    tname = table.name ## src/hardware_indep/multi_dataplane.c.py:24
    generated_code += add_code('     apply_result_t {}_apply(STDPARAMS) {{'.format(tname), indent_level = 1, lineno = 24)
    if table.key_bit_size == 0: ## src/hardware_indep/multi_dataplane.c.py:26
        generated_code += add_code('         ENTRY({})* entry = {}_get_default_entry(STDPARAMS_IN);'.format(tname, tname), indent_level = 2, lineno = 26)
        generated_code += add_code('         bool is_hit = true; // empty key in table {}'.format(table.name), indent_level = 2, lineno = 27)
        generated_code += add_code('         {}_apply_show_hit(entry->id, STDPARAMS_IN);'.format(tname), indent_level = 2, lineno = 28)
    else: ## src/hardware_indep/multi_dataplane.c.py:30
        generated_code += add_code("         #ifdef T4P4S_DEBUG", indent_level = 2, lineno = 30)
        generated_code += add_code("             char key_txt[4096];", indent_level = 3, lineno = 31)
        generated_code += add_code("             int key_txt_idx = 0;", indent_level = 3, lineno = 32)
        generated_code += add_code("         #endif", indent_level = 2, lineno = 33)
        generated_code += add_code('         uint8_t key[{}];'.format(table.key_length_bytes), indent_level = 2, lineno = 35)
        generated_code += add_code('         table_{}_key(pd, key  KEYTXTPARAMS_IN);'.format(tname), indent_level = 2, lineno = 36)
        generated_code += add_code('         ENTRY({})* entry = (ENTRY({})*){}_lookup(tables[TABLE_{}], key);'.format(tname, tname, table.matchType.name, tname), indent_level = 2, lineno = 38)
        noaction_names = table.actions.map('expression.method.path').filter(lambda p: p.name.startswith('NoAction')).map('name') ## src/hardware_indep/multi_dataplane.c.py:41
        if len(noaction_names) == 0: ## src/hardware_indep/multi_dataplane.c.py:42
            generated_code += add_code('         bool is_hit = true; // lookup on table {} cannot miss'.format(table.name), indent_level = 2, lineno = 42)
        elif len(noaction_names) == 1: ## src/hardware_indep/multi_dataplane.c.py:44
            generated_code += add_code('         bool is_hit = entry->id != action_{};'.format(noaction_names[0]), indent_level = 2, lineno = 44)
        else: ## src/hardware_indep/multi_dataplane.c.py:46
            addError('Finding NoAction', f'Too many NoActions ({len(noaction_names)}) found') ## src/hardware_indep/multi_dataplane.c.py:47
        generated_code += add_code("         if (likely(is_hit)) {", indent_level = 2, lineno = 48)
        generated_code += add_code('             ENTRY({})* default_entry = {}_get_default_entry(STDPARAMS_IN);'.format(tname, tname), indent_level = 3, lineno = 49)
        generated_code += add_code("             is_hit = entry != default_entry;", indent_level = 3, lineno = 50)
        generated_code += add_code("         }", indent_level = 2, lineno = 51)
        generated_code += add_code("         #ifdef T4P4S_DEBUG", indent_level = 2, lineno = 53)
        generated_code += add_code('             {}_apply_show_hit_with_key(is_hit, entry  KEYTXTPARAM_IN, STDPARAMS_IN);'.format(tname), indent_level = 3, lineno = 54)
        generated_code += add_code("         #endif", indent_level = 2, lineno = 55)
        generated_code += add_code("         #ifdef T4P4S_STATS", indent_level = 2, lineno = 57)
        generated_code += add_code('             t4p4s_stats_global.T4STAT(table,hit,{}) = is_hit || t4p4s_stats_global.T4STAT(table,hit,{});'.format(tname, tname), indent_level = 3, lineno = 58)
        generated_code += add_code('             t4p4s_stats_global.T4STAT(table,miss,{}) = !is_hit || t4p4s_stats_global.T4STAT(table,miss,{});'.format(tname, tname), indent_level = 3, lineno = 59)
        generated_code += add_code('             t4p4s_stats_per_packet.T4STAT(table,hit,{}) = is_hit || t4p4s_stats_per_packet.T4STAT(table,hit,{});'.format(tname, tname), indent_level = 3, lineno = 60)
        generated_code += add_code('             t4p4s_stats_per_packet.T4STAT(table,miss,{}) = !is_hit || t4p4s_stats_per_packet.T4STAT(table,miss,{});'.format(tname, tname), indent_level = 3, lineno = 61)
        generated_code += add_code("         #endif", indent_level = 2, lineno = 62)
    if len(table.direct_meters + table.direct_counters) > 0: ## src/hardware_indep/multi_dataplane.c.py:65
        generated_code += add_code('         if (likely(is_hit))    {}_apply_smems(STDPARAMS_IN);'.format(tname), indent_level = 2, lineno = 65)
    generated_code += add_code('         {}_stats(entry->id, STDPARAMS_IN);'.format(tname), indent_level = 2, lineno = 67)
    # ACTIONS ## src/hardware_indep/multi_dataplane.c.py:70
    if len(table.actions) == 1: ## src/hardware_indep/multi_dataplane.c.py:71
        ao = table.actions[0].action_object ## src/hardware_indep/multi_dataplane.c.py:72
        if len(ao.body.components) != 0: ## src/hardware_indep/multi_dataplane.c.py:73
            generated_code += add_code('         action_code_{}(entry->params.{}_params, SHORT_STDPARAMS_IN);'.format(ao.name, ao.name), indent_level = 2, lineno = 73)
        generated_code += add_code('         return (apply_result_t) {{ is_hit, action_{} }};'.format(ao.name), indent_level = 2, lineno = 74)
    else: ## src/hardware_indep/multi_dataplane.c.py:76
        generated_code += add_code("         switch (entry->id) {", indent_level = 2, lineno = 76)
        for action in table.actions.filter(lambda act: len(act.action_object.body.components) != 0): ## src/hardware_indep/multi_dataplane.c.py:78
            ao = action.action_object ## src/hardware_indep/multi_dataplane.c.py:79
            generated_code += add_code('           case action_{}:'.format(ao.name), indent_level = 3, lineno = 79)
            generated_code += add_code('              action_code_{}(entry->params.{}_params, SHORT_STDPARAMS_IN);'.format(ao.name, ao.name), indent_level = 4, lineno = 80)
            generated_code += add_code("              return (apply_result_t) { is_hit, entry->id };", indent_level = 3, lineno = 81)
        if len(acts := table.actions.filter(lambda act: len(act.action_object.body.components) == 0)) > 0: ## src/hardware_indep/multi_dataplane.c.py:83
            cases = ' '.join(f'case action_{act.action_object.name}:' for act in acts) ## src/hardware_indep/multi_dataplane.c.py:84
            generated_code += add_code('           {}'.format(cases), indent_level = 3, lineno = 84)
            generated_code += add_code("              return (apply_result_t) { is_hit, entry->id };", indent_level = 4, lineno = 85)
            generated_code += add_code("", indent_level = 3, lineno = 86)
        generated_code += add_code("           default: return (apply_result_t) {}; // unreachable", indent_level = 3, lineno = 87)
        generated_code += add_code("         }", indent_level = 2, lineno = 88)
    generated_code += add_code("     }", indent_level = 1, lineno = 90)
    generated_code += add_code(' #endif // T4P4S_MULTI_IDX == {}'.format(multi_idx), lineno = 91)
    generated_code += add_code("", lineno = 92)
################################################################################ ## src/hardware_indep/multi_dataplane.c.py:96

generated_code += add_code("")
all_ctl_stages = ((ctl, idx, comp) for ctl in hlir.controls for idx, comp in enumerate(ctl.body.components)) ## src/hardware_indep/multi_dataplane.c.py:98
for part_idx, (ctl, idx, comp) in enumerate(all_ctl_stages): ## src/hardware_indep/multi_dataplane.c.py:99
    multi_idx = part_idx % part_count ## src/hardware_indep/multi_dataplane.c.py:100
    generated_code += add_code(' #if T4P4S_MULTI_IDX == {}'.format(multi_idx), lineno = 100)
    generated_code += add_code('     void control_stage_{}_{}(control_locals_{}_t* local_vars, STDPARAMS) {{'.format(ctl.name, idx, ctl.name), indent_level = 1, lineno = 102)
    compiler_common.enclosing_control = ctl ## src/hardware_indep/multi_dataplane.c.py:104
    generated_code += format_statement(comp, ctl) ## src/hardware_indep/multi_dataplane.c.py:104
    compiler_common.enclosing_control = None ## src/hardware_indep/multi_dataplane.c.py:106
    generated_code += add_code("     }", indent_level = 1, lineno = 106)
    generated_code += add_code(' #endif // T4P4S_MULTI_IDX == {}'.format(multi_idx), lineno = 107)
    generated_code += add_code("", lineno = 108)
