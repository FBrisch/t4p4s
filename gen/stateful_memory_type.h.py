
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/stateful_memory_type.h.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/stateful_memory_type.h.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/stateful_memory_type.h.py: via hardware_indep/stateful_memory_type.h.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

# SPDX-License-Identifier: Apache-2.0 ## src/hardware_indep/stateful_memory_type.h.py:2
# Copyright 2021 Eotvos Lorand University, Budapest, Hungary ## src/hardware_indep/stateful_memory_type.h.py:3

generated_code += add_code("")
from utils.codegen import format_type ## src/hardware_indep/stateful_memory_type.h.py:5
from hlir16.hlir_model import model_specific_infos, packets_by_model ## src/hardware_indep/stateful_memory_type.h.py:6

generated_code += add_code("")
generated_code += add_code(" #pragma once", lineno = 7)

generated_code += add_code("")
generated_code += add_code(" #include <stdbool.h>", lineno = 9)
generated_code += add_code(" #include <stdint.h>", lineno = 10)

generated_code += add_code("")
generated_code += add_code(" #include \"aliases.h\"", lineno = 12)

generated_code += add_code("")
generated_code += add_code(" typedef enum {", lineno = 14)
generated_code += add_code("     pob_packets,", indent_level = 1, lineno = 15)
generated_code += add_code("     pob_bytes,", indent_level = 1, lineno = 16)
generated_code += add_code("     pob_packets_and_bytes,", indent_level = 1, lineno = 17)
generated_code += add_code(" } packets_or_bytes_e;", lineno = 18)

generated_code += add_code("")
def extern_repr_is_model_specific(extern): ## src/hardware_indep/stateful_memory_type.h.py:22
    return extern.name in model_specific_infos[hlir.news.model]['extern_reprs'] ## src/hardware_indep/stateful_memory_type.h.py:23
for extern in hlir.externs.filter(lambda extern: (len(extern.constructors) > 0 or extern_repr_is_model_specific(extern)) and extern.repr is not None): ## src/hardware_indep/stateful_memory_type.h.py:26
    if 'smem_type' in (smem := extern): ## src/hardware_indep/stateful_memory_type.h.py:27
        extern_name = f'SMEMTYPE({smem.smem_type})' ## src/hardware_indep/stateful_memory_type.h.py:28
    else: ## src/hardware_indep/stateful_memory_type.h.py:29
        extern_name = f'EXTERNTYPE0({extern.name})' ## src/hardware_indep/stateful_memory_type.h.py:30
    generated_code += add_code(" typedef struct {", lineno = 31)
    if 'smem_type' in extern: ## src/hardware_indep/stateful_memory_type.h.py:33
        generated_code += add_code('     {};'.format(format_type(smem.repr, addon='packets', is_atomic=True)), indent_level = 1, lineno = 33)
        generated_code += add_code('     {};'.format(format_type(smem.repr, addon='bytes', is_atomic=True)), indent_level = 1, lineno = 34)
        generated_code += add_code("     packets_or_bytes_e pob;", indent_level = 1, lineno = 35)
    else: ## src/hardware_indep/stateful_memory_type.h.py:37
        generated_code += add_code('     {};'.format(format_type(extern.repr, addon='value', is_atomic=True)), indent_level = 1, lineno = 37)
    generated_code += add_code("     #ifdef T4P4S_DEBUG", indent_level = 1, lineno = 38)
    generated_code += add_code("         char name[256];", indent_level = 1, lineno = 39)
    generated_code += add_code("     #endif", indent_level = 1, lineno = 40)
    generated_code += add_code(' }} {};'.format(extern_name), lineno = 41)
    generated_code += add_code("", lineno = 42)
# TODO remove ## src/hardware_indep/stateful_memory_type.h.py:45
generated_code += add_code(" typedef struct {", lineno = 45)
generated_code += add_code("     rte_atomic32_t value;", indent_level = 1, lineno = 46)
generated_code += add_code(" } EXTERNTYPE1(Checksum,u32);", lineno = 47)

generated_code += add_code("")
pars = [(extern, ctor, m, par) for extern in hlir.externs for ctor in extern.constructors for m in ctor.env_node.interface_methods if m is not None for par in m.type.parameters.parameters[:1] if par.urtype.node_type == 'Type_Struct'] ## src/hardware_indep/stateful_memory_type.h.py:50
# print('dbgpars', pars) ## src/hardware_indep/stateful_memory_type.h.py:51
# breakpoint() ## src/hardware_indep/stateful_memory_type.h.py:52
for extern, ctor, m, par in pars: ## src/hardware_indep/stateful_memory_type.h.py:53
    generated_code += add_code(" typedef struct {", lineno = 53)
    for fld in par.type.fields: ## src/hardware_indep/stateful_memory_type.h.py:55
        generated_code += add_code('     {};'.format(format_type(fld.type, addon=fld.name)), indent_level = 1, lineno = 55)
    generated_code += add_code(' }} EXTERNTYPE1({},{});'.format(extern.name, par.type.name), lineno = 56)
    generated_code += add_code("", lineno = 57)
