
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/multi/parser.stage.c.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/multi/parser.stage.c.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/multi/parser.stage.c.py: via hardware_indep/multi/parser.stage.c.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

# SPDX-License-Identifier: Apache-2.0 ## src/hardware_indep/multi/parser.stage.c.py:2
# Copyright 2021 Eotvos Lorand University, Budapest, Hungary ## src/hardware_indep/multi/parser.stage.c.py:3

generated_code += add_code("")
from compiler_log_warnings_errors import addWarning ## src/hardware_indep/multi/parser.stage.c.py:5
from utils.codegen import to_c_bool ## src/hardware_indep/multi/parser.stage.c.py:6

generated_code += add_code("")
compiler_common.current_compilation['is_multicompiled'] = True ## src/hardware_indep/multi/parser.stage.c.py:8

generated_code += add_code("")
part_count = compiler_common.current_compilation['multi'] ## src/hardware_indep/multi/parser.stage.c.py:10
multi_idx = compiler_common.current_compilation['multi_idx'] ## src/hardware_indep/multi/parser.stage.c.py:11

generated_code += add_code("")
table_names = (table.short_name + ("/keyless" if table.key_bit_size == 0 else "") + ("/hidden" if table.is_hidden else "") for table in hlir.tables) ## src/hardware_indep/multi/parser.stage.c.py:13
all_table_infos = sorted(zip(hlir.tables, table_names), key=lambda k: len(k[0].actions)) ## src/hardware_indep/multi/parser.stage.c.py:14
table_infos = list(ti for idx, ti in enumerate(all_table_infos) if idx % part_count == multi_idx) ## src/hardware_indep/multi/parser.stage.c.py:15

generated_code += add_code("")
all_hdrs = sorted(hlir.header_instances.filterfalse(lambda hdr: hdr.urtype.is_metadata), key=lambda hdr: len(hdr.urtype.fields)) ## src/hardware_indep/multi/parser.stage.c.py:17
hdrs = list(hdr for idx, hdr in enumerate(all_hdrs) if idx % part_count == multi_idx) ## src/hardware_indep/multi/parser.stage.c.py:18

generated_code += add_code("")
if hdrs == []: ## src/hardware_indep/multi/parser.stage.c.py:20
    compiler_common.current_compilation['skip_output'] = True ## src/hardware_indep/multi/parser.stage.c.py:21
else: ## src/hardware_indep/multi/parser.stage.c.py:22
    generated_code += add_code(' #define T4P4S_MULTI_IDX {}'.format(multi_idx), lineno = 22)
    generated_code += add_code(" #include \"multi_parser.c\"", lineno = 23)
