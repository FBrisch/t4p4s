
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/dpdkx_v1model_log_tuple.c.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/dpdkx_v1model_log_tuple.c.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/dpdkx_v1model_log_tuple.c.py: via hardware_indep/dpdkx_v1model_log_tuple.c.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

# SPDX-License-Identifier: Apache-2.0 ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:2
# Copyright 2021 Eotvos Lorand University, Budapest, Hungary ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:3

generated_code += add_code("")
# TODO move it to the DPDK specific area ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:6

generated_code += add_code("")
generated_code += add_code(" #include \"common.h\"", lineno = 7)
generated_code += add_code(" #include \"util_debug.h\"", lineno = 8)

generated_code += add_code("")
generated_code += add_code(" void make_formatter_tuple(char* out_fmt, const char* in_fmt, ...) {", lineno = 10)
generated_code += add_code("     va_list argp;", lineno = 11)
generated_code += add_code("     va_start(argp, in_fmt);", lineno = 12)
generated_code += add_code(" ", lineno = 13)
generated_code += add_code("     char* param_ptr;", lineno = 14)
generated_code += add_code("     while ((param_ptr = strstr(in_fmt, \"{}\")) != NULL) {", lineno = 15)
generated_code += add_code("         const char* param_fmt = va_arg(argp, const char*);", lineno = 16)
generated_code += add_code(" ", lineno = 17)
generated_code += add_code("         int pre_param_len = param_ptr - in_fmt;", lineno = 18)
generated_code += add_code("         int param_len = strlen(param_fmt);", lineno = 19)
generated_code += add_code(" ", lineno = 20)
generated_code += add_code("         memcpy(out_fmt, in_fmt, pre_param_len);", lineno = 21)
generated_code += add_code("         strcpy(out_fmt + pre_param_len, param_fmt);", lineno = 22)
generated_code += add_code("         out_fmt += pre_param_len + param_len;", lineno = 23)
generated_code += add_code("         in_fmt += pre_param_len + 2; // skip the {} characters", lineno = 24)
generated_code += add_code("     }", lineno = 25)
generated_code += add_code(" ", lineno = 26)
generated_code += add_code("     // the remaining format characters don't contain {}, copy them", lineno = 27)
generated_code += add_code("     strcpy(out_fmt, in_fmt);", lineno = 28)
generated_code += add_code(" ", lineno = 29)
generated_code += add_code("     va_end(argp);", lineno = 30)
generated_code += add_code(" }", lineno = 31)
generated_code += add_code("", lineno = 32)
generated_code += add_code(" void print_log_msg_tuple(const char* msg) {", lineno = 33)
generated_code += add_code("     #ifdef T4P4S_DEBUG", lineno = 34)
generated_code += add_code("         debug(\"    : \" T4LIT(Logged,status) \": %s\\n\", msg);", lineno = 35)
generated_code += add_code("     #else", lineno = 36)
generated_code += add_code("         printf(\"    : \" T4LIT(Logged,status) \": %s\\n\", msg);", lineno = 37)
generated_code += add_code("     #endif", lineno = 38)
generated_code += add_code(" }", lineno = 39)
generated_code += add_code("", lineno = 40)

generated_code += add_code("")
for struct in hlir.news.data: ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:44
    name = re.sub('_t$', '', struct.name) ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:45
    def get_fmt(fld): ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:47
        if fld.urtype.node_type == 'Type_Stack': ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:48
            return '"TODO_Stack1"' ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:49
        if fld.urtype.node_type == 'Type_Header': ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:51
            parts = '", "'.join(f'"{hdrfld.name}="{get_fmt(hdrfld)}' for hdrfld in fld.urtype.fields) ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:52
            return f'"["{parts}"]"' ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:53
        size = fld.urtype.size ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:55
        if size <= 32: ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:56
            return f'T4LIT(0x%0{size//4}x,bytes) "=" T4LIT(%d) "/" T4LIT({size}) "b"' ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:57
        bytes_fmt = '%02x' * (size//8) ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:59
        return f'T4LIT(0x{bytes_fmt},bytes) "/" T4LIT({size//8}) "B"' ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:60
    def get_contents(fld, hdrname=None): ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:62
        if fld.urtype.node_type == 'Type_Stack': ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:63
            return "TODO_Stack2" ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:64
        if (hdr := fld).urtype.node_type == 'Type_Header': ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:66
            return ', '.join(f'{hdrfld.name}={get_contents(hdrfld, hdr.name)}' for hdrfld in hdr.urtype.fields) ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:67
        size = fld.urtype.size ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:69
        container = f'parts->{hdrname}.{fld.name}' if hdrname else f'parts->{fld.name}' ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:70
        if size <= 32: ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:71
            return f'{container}, {container}' ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:72
        return ', '.join(f'((uint8_t*){container})[{idx}]' for idx in range(0, size//8)) ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:73
    fmts = ', '.join(['fmt', '*msg'] + list(struct.fields.map(get_fmt))) ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:75
    contents = ', '.join(struct.fields.map(get_contents)) ## src/hardware_indep/dpdkx_v1model_log_tuple.c.py:76
    generated_code += add_code(' void log_msg__{}(const char** msg, const {}_t* parts, SHORT_STDPARAMS) {{'.format(name, name), lineno = 77)
    generated_code += add_code("     char fmt[1024];", indent_level = 1, lineno = 78)
    generated_code += add_code("     char text[1024];", indent_level = 1, lineno = 79)
    generated_code += add_code('     make_formatter_tuple({});'.format(fmts), indent_level = 1, lineno = 80)
    generated_code += add_code('     sprintf(text, fmt, "{}");'.format(contents), indent_level = 1, lineno = 81)
    generated_code += add_code("     print_log_msg_tuple(text);", indent_level = 1, lineno = 82)
    generated_code += add_code(" }", lineno = 83)
