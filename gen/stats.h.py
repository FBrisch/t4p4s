
# SPDX-License-Identifier: Apache-2.0
# Copyright 2019 Eotvos Lorand University, Budapest, Hungary

# Autogenerated file (from src/hardware_indep/stats.h.py:), do not modify directly.
# Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)

import compiler_common
import re

def add_code(line, indent_level = 0, lineno = None, file = "src/hardware_indep/stats.h.py:"):
    global generated_code

    line_ends = {
        "line_comment": "\n",
        "inline_comment": "",
        "no_comment": "\n",
        "no_comment_inline": "",
    }

    sugar_style = compiler_common.file_sugar_style[-1]

    stripped_line = line.strip()
    no_sugar_on_line = stripped_line.startswith('//') or stripped_line.startswith('# ') or stripped_line == ""

    indent = compiler_common.file_indent_str * indent_level
    if 'inline' in compiler_common.file_sugar_style[-1]:
        indent = ''

    sugared = sugar(no_sugar_on_line, file, lineno, sugar_style)
    line_end = line_ends[sugar_style]
    return f'{indent}{stripped_line}{sugared}{line_end}'


def sugar(no_sugar_on_line, file, lineno, sugar_style):
    if True or no_sugar_on_line or file is None or lineno is None:
        return ""

    if sugar_style == 'line_comment':
        return f" // {file}{lineno}"
    if sugar_style == 'inline_comment':
        return f" /* {file}{lineno} */"
    return ""


generated_code += "// Autogenerated file (from src/hardware_indep/stats.h.py: via hardware_indep/stats.h.py), do not modify directly.\n"
generated_code += "// Generator: T4P4S (https://github.com/P4ELTE/t4p4s/)\n"
generated_code += "\n"

generated_code += add_code(" // SPDX-License-Identifier: Apache-2.0", lineno = 1)
generated_code += add_code(" // Copyright 2021 Eotvos Lorand University, Budapest, Hungary", lineno = 2)

generated_code += add_code("")
from itertools import chain ## src/hardware_indep/stats.h.py:5

generated_code += add_code("")
from compiler_common import unique_everseen ## src/hardware_indep/stats.h.py:7
from utils.codegen import format_type ## src/hardware_indep/stats.h.py:8

generated_code += add_code("")
targets_parser       = (f'parser state {s.name}' for s in hlir.parsers[0].states) ## src/hardware_indep/stats.h.py:10
targets_table_apply  = (f'table apply {table.name}' for table in hlir.tables) ## src/hardware_indep/stats.h.py:11
targets_table_hit    = (f'table apply {table.name}' for table in hlir.tables if 'key' in table) ## src/hardware_indep/stats.h.py:12
targets_table_miss   = (f'table apply {table.name}' for table in hlir.tables if 'key' in table) ## src/hardware_indep/stats.h.py:13
targets_table_action = (f'action {table.name} {action_name}' for table in hlir.tables for action_name in table.actions.map('expression.method.path.name')) ## src/hardware_indep/stats.h.py:14

generated_code += add_code("")
targets = list(target.split(' ') for target in chain(targets_parser, targets_table_apply, targets_table_hit, targets_table_miss, targets_table_action)) ## src/hardware_indep/stats.h.py:16
part1, part2, part3 = zip(*targets) ## src/hardware_indep/stats.h.py:17
stat1, stat2, stat3 = sorted(unique_everseen(part1)), sorted(unique_everseen(part2)), sorted(unique_everseen(part3)) ## src/hardware_indep/stats.h.py:18

generated_code += add_code("")
generated_code += add_code(" #pragma once", lineno = 20)

generated_code += add_code("")
generated_code += add_code(" #define T4STAT(part1, part2, part3)   t4stat_ ## part1 ## _ ## part2 ## _ ## part3", lineno = 22)
generated_code += add_code(" #define T4REQ(part1, part2, part3)   t4req_ ## part1 ## _ ## part2 ## _ ## part3", lineno = 23)

generated_code += add_code("")
generated_code += add_code(" typedef enum {", lineno = 25)
for s1 in stat1: ## src/hardware_indep/stats.h.py:27
    generated_code += add_code('     t4stat1_{},'.format(s1), indent_level = 1, lineno = 27)
generated_code += add_code(" } t4p4s_stat1_e;", lineno = 28)
generated_code += add_code("", lineno = 29)

generated_code += add_code("")
generated_code += add_code(" typedef enum {", lineno = 31)
for s2 in stat2: ## src/hardware_indep/stats.h.py:33
    generated_code += add_code('     t4stat2_{},'.format(s2), indent_level = 1, lineno = 33)
generated_code += add_code(" } t4p4s_stat2_e;", lineno = 34)
generated_code += add_code("", lineno = 35)

generated_code += add_code("")
generated_code += add_code(" typedef enum {", lineno = 37)
for s3 in stat3: ## src/hardware_indep/stats.h.py:39
    generated_code += add_code('     t4stat3_{},'.format(s3), indent_level = 1, lineno = 39)
generated_code += add_code(" } t4p4s_stat3_e;", lineno = 40)
generated_code += add_code("", lineno = 41)

generated_code += add_code("")
generated_code += add_code(" typedef struct {", lineno = 44)
parser = hlir.parsers[0] ## src/hardware_indep/stats.h.py:46
for s in parser.states: ## src/hardware_indep/stats.h.py:47
    generated_code += add_code('     bool T4STAT(parser,state,{});'.format(s.name), indent_level = 1, lineno = 47)
generated_code += add_code("", indent_level = 1, lineno = 49)

generated_code += add_code("", indent_level = 1)
for table in hlir.tables: ## src/hardware_indep/stats.h.py:52
    generated_code += add_code('     bool T4STAT(table,apply,{});'.format(table.name), indent_level = 1, lineno = 52)
    if 'key' in table: ## src/hardware_indep/stats.h.py:55
        generated_code += add_code('     bool T4STAT(table,hit,{});'.format(table.name), indent_level = 1, lineno = 55)
        generated_code += add_code('     bool T4STAT(table,miss,{});'.format(table.name), indent_level = 1, lineno = 56)
    else: ## src/hardware_indep/stats.h.py:58
        generated_code += add_code('     bool T4STAT(table,used,{});'.format(table.name), indent_level = 1, lineno = 58)
    for action_name in table.actions.map('expression.method.path.name'): ## src/hardware_indep/stats.h.py:62
        generated_code += add_code('     bool T4STAT(action,{},{});'.format(table.name, action_name), indent_level = 1, lineno = 62)
generated_code += add_code(" } t4p4s_stats_t;", lineno = 64)

generated_code += add_code("")
generated_code += add_code(" typedef enum {", lineno = 67)
generated_code += add_code("     req_none,", indent_level = 1, lineno = 68)
parser = hlir.parsers[0] ## src/hardware_indep/stats.h.py:70
for s in parser.states: ## src/hardware_indep/stats.h.py:71
    generated_code += add_code('     T4REQ(parser,state,{}),'.format(s.name), indent_level = 1, lineno = 71)
generated_code += add_code("", indent_level = 1, lineno = 73)

generated_code += add_code("", indent_level = 1)
for table in hlir.tables: ## src/hardware_indep/stats.h.py:76
    generated_code += add_code('     T4REQ(table,apply,{}),'.format(table.name), indent_level = 1, lineno = 76)
    if 'key' in table: ## src/hardware_indep/stats.h.py:78
        generated_code += add_code('     T4REQ(table,hit,{}),'.format(table.name), indent_level = 1, lineno = 78)
        generated_code += add_code('     T4REQ(table,miss,{}),'.format(table.name), indent_level = 1, lineno = 79)
    else: ## src/hardware_indep/stats.h.py:81
        generated_code += add_code('     T4REQ(table,used,{}),'.format(table.name), indent_level = 1, lineno = 81)
    for action_name in table.actions.map('expression.method.path.name'): ## src/hardware_indep/stats.h.py:85
        generated_code += add_code('     T4REQ(action,{},{}),'.format(table.name, action_name), indent_level = 1, lineno = 85)
generated_code += add_code(" } t4p4s_controlflow_name_e;", lineno = 87)
generated_code += add_code("", lineno = 88)
